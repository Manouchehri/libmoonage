#include <string>
#include <cstdint>
#include <cmath>
#include "common.h"
#include "lightRecompiler.h"
using std::string;

bool LightRecompiler::recompile(uint inst, ulong pc) {
	if((inst & 0x7FE0FC00U) == 0x3A000000U) {
		if(ADCS(inst, pc)) return true;
	}
	if((inst & 0x7FE00000U) == 0x0B200000U) {
		if(ADD_extended_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x11000000U) {
		if(ADD_immediate(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x0B000000U) {
		if(ADD_shifted_register(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x0E208400U) {
		if(ADD_vector(inst, pc)) return true;
	}
	if((inst & 0x7FE00000U) == 0x2B200000U) {
		if(ADDS_extended_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x31000000U) {
		if(ADDS_immediate(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x2B000000U) {
		if(ADDS_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x9F000000U) == 0x10000000U) {
		if(ADR(inst, pc)) return true;
	}
	if((inst & 0x9F000000U) == 0x90000000U) {
		if(ADRP(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x12000000U) {
		if(AND_immediate(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x0A000000U) {
		if(AND_shifted_register(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0E201C00U) {
		if(AND_vector(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x6A000000U) {
		if(ANDS_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x72000000U) {
		if(ANDS_immediate(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC02800U) {
		if(ASRV(inst, pc)) return true;
	}
	if((inst & 0xFC000000U) == 0x14000000U) {
		if(B(inst, pc)) return true;
	}
	if((inst & 0xFF000010U) == 0x54000000U) {
		if(B_cond(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x33000000U) {
		if(BFM(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x0A200000U) {
		if(BIC(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0E601C00U) {
		if(BIC_vector_register(inst, pc)) return true;
	}
	if((inst & 0xBFF8DC00U) == 0x2F009400U) {
		if(BIC_vector_immediate_16bit(inst, pc)) return true;
	}
	if((inst & 0xBFF89C00U) == 0x2F001400U) {
		if(BIC_vector_immediate_32bit(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x6A200000U) {
		if(BICS(inst, pc)) return true;
	}
	if((inst & 0xFC000000U) == 0x94000000U) {
		if(BL(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC1FU) == 0xD63F0000U) {
		if(BLR(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC1FU) == 0xD61F0000U) {
		if(BR(inst, pc)) return true;
	}
	if((inst & 0xFFE0001FU) == 0xD4200000U) {
		if(BRK(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x2E601C00U) {
		if(BSL(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x08207C00U) {
		if(CASP(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x08607C00U) {
		if(CASPA(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0860FC00U) {
		if(CASPAL(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0820FC00U) {
		if(CASPL(inst, pc)) return true;
	}
	if((inst & 0x7F000000U) == 0x35000000U) {
		if(CBNZ(inst, pc)) return true;
	}
	if((inst & 0x7F000000U) == 0x34000000U) {
		if(CBZ(inst, pc)) return true;
	}
	if((inst & 0x7FE00C10U) == 0x3A400800U) {
		if(CCMN_immediate(inst, pc)) return true;
	}
	if((inst & 0x7FE00C10U) == 0x7A400800U) {
		if(CCMP_immediate(inst, pc)) return true;
	}
	if((inst & 0x7FE00C10U) == 0x7A400000U) {
		if(CCMP_register(inst, pc)) return true;
	}
	if((inst & 0xFFFFF0FFU) == 0xD503305FU) {
		if(CLREX(inst, pc)) return true;
	}
	if((inst & 0x7FFFFC00U) == 0x5AC01000U) {
		if(CLZ(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x7E208C00U) {
		if(CMEQ_register_scalar(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x2E208C00U) {
		if(CMEQ_register_vector(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x5E209800U) {
		if(CMEQ_zero_scalar(inst, pc)) return true;
	}
	if((inst & 0xBF3FFC00U) == 0x0E209800U) {
		if(CMEQ_zero_vector(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x5E203400U) {
		if(CMGT_register_scalar(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x0E203400U) {
		if(CMGT_register_vector(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x5E208800U) {
		if(CMGT_zero_scalar(inst, pc)) return true;
	}
	if((inst & 0xBF3FFC00U) == 0x0E208800U) {
		if(CMGT_zero_vector(inst, pc)) return true;
	}
	if((inst & 0xBF3FFC00U) == 0x0E205800U) {
		if(CNT(inst, pc)) return true;
	}
	if((inst & 0x7FE00C00U) == 0x1A800000U) {
		if(CSEL(inst, pc)) return true;
	}
	if((inst & 0x7FE00C00U) == 0x1A800400U) {
		if(CSINC(inst, pc)) return true;
	}
	if((inst & 0x7FE00C00U) == 0x5A800000U) {
		if(CSINV(inst, pc)) return true;
	}
	if((inst & 0x7FE00C00U) == 0x5A800400U) {
		if(CSNEG(inst, pc)) return true;
	}
	if((inst & 0xFFFFF0FFU) == 0xD50330BFU) {
		if(DMB(inst, pc)) return true;
	}
	if((inst & 0xFFFFF0FFU) == 0xD503309FU) {
		if(DSB(inst, pc)) return true;
	}
	if((inst & 0xFFE0FC00U) == 0x5E000400U) {
		if(DUP_element_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0E000400U) {
		if(DUP_element_vector(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0E000C00U) {
		if(DUP_general(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x4A200000U) {
		if(EON_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x52000000U) {
		if(EOR_immediate(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x4A000000U) {
		if(EOR_shifted_register(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x2E201C00U) {
		if(EOR_vector(inst, pc)) return true;
	}
	if((inst & 0xBFE08400U) == 0x2E000000U) {
		if(EXT(inst, pc)) return true;
	}
	if((inst & 0x7FA00000U) == 0x13800000U) {
		if(EXTR(inst, pc)) return true;
	}
	if((inst & 0xFFA0FC00U) == 0x7EA0D400U) {
		if(FABD_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E20C000U) {
		if(FABS_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x0EA0F800U) {
		if(FABS_vector(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E202800U) {
		if(FADD_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x0E20D400U) {
		if(FADD_vector(inst, pc)) return true;
	}
	if((inst & 0xFFBFFC00U) == 0x7E30D800U) {
		if(FADDP_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x2E20D400U) {
		if(FADDP_vector(inst, pc)) return true;
	}
	if((inst & 0xFF200C10U) == 0x1E200400U) {
		if(FCCMP(inst, pc)) return true;
	}
	if((inst & 0x9F20F400U) == 0x0E20E400U) {
		if(FCMxx_register_vector(inst, pc)) return true;
	}
	if((inst & 0x9FBFEC00U) == 0x0EA0C800U) {
		if(FCMxx_zero_vector(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x0EA0E800U) {
		if(FCMLT_zero_vector(inst, pc)) return true;
	}
	if((inst & 0xFF20FC17U) == 0x1E202000U) {
		if(FCMP(inst, pc)) return true;
	}
	if((inst & 0xFF200C00U) == 0x1E200C00U) {
		if(FCSEL(inst, pc)) return true;
	}
	if((inst & 0xFF3E7C00U) == 0x1E224000U) {
		if(FCVT(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E240000U) {
		if(FCVTAS_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E250000U) {
		if(FCVTAU_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x0E217800U) {
		if(FCVTL_2_(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E300000U) {
		if(FCVTMS_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E310000U) {
		if(FCVTMU_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0xFFBFFC00U) == 0x0E216800U) {
		if(FCVTN(inst, pc)) return true;
	}
	if((inst & 0xFFBFFC00U) == 0x4E216800U) {
		if(FCVTN2(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E280000U) {
		if(FCVTPS_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E290000U) {
		if(FCVTPU_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0x7F3F0000U) == 0x1E180000U) {
		if(FCVTZS_scalar_fixedpoint(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E380000U) {
		if(FCVTZS_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0x7F3F0000U) == 0x1E190000U) {
		if(FCVTZU_scalar_fixedpoint(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E390000U) {
		if(FCVTZU_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E201800U) {
		if(FDIV_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x2E20FC00U) {
		if(FDIV_vector(inst, pc)) return true;
	}
	if((inst & 0xFF208000U) == 0x1F000000U) {
		if(FMADD(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E204800U) {
		if(FMAX_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E206800U) {
		if(FMAXNM_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E205800U) {
		if(FMIN_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E207800U) {
		if(FMINNM_scalar(inst, pc)) return true;
	}
	if((inst & 0xBF80F400U) == 0x0F801000U) {
		if(FMLA_by_element_vector_spdp(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x0E20CC00U) {
		if(FMLA_vector(inst, pc)) return true;
	}
	if((inst & 0xBF80F400U) == 0x0F805000U) {
		if(FMLS_by_element_vector_spdp(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x0EA0CC00U) {
		if(FMLS_vector(inst, pc)) return true;
	}
	if((inst & 0x7F36FC00U) == 0x1E260000U) {
		if(FMOV_general(inst, pc)) return true;
	}
	if((inst & 0xFF201FE0U) == 0x1E201000U) {
		if(FMOV_scalar_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFF8FC00U) == 0x0F00F400U) {
		if(FMOV_vector_immediate_single(inst, pc)) return true;
	}
	if((inst & 0xFFF8FC00U) == 0x6F00F400U) {
		if(FMOV_vector_immediate_double(inst, pc)) return true;
	}
	if((inst & 0xFF208000U) == 0x1F008000U) {
		if(FMSUB(inst, pc)) return true;
	}
	if((inst & 0xFF80F400U) == 0x5F809000U) {
		if(FMUL_by_element_scalar_spdp(inst, pc)) return true;
	}
	if((inst & 0xBF80F400U) == 0x0F809000U) {
		if(FMUL_by_element_vector_spdp(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E200800U) {
		if(FMUL_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x2E20DC00U) {
		if(FMUL_vector(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E214000U) {
		if(FNEG_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x2EA0F800U) {
		if(FNEG_vector(inst, pc)) return true;
	}
	if((inst & 0xFF208000U) == 0x1F200000U) {
		if(FNMADD(inst, pc)) return true;
	}
	if((inst & 0xFF208000U) == 0x1F208000U) {
		if(FNMSUB(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E208800U) {
		if(FNMUL_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E264000U) {
		if(FRINTA_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E27C000U) {
		if(FRINTI_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E254000U) {
		if(FRINTM_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E24C000U) {
		if(FRINTP_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E274000U) {
		if(FRINTX_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E25C000U) {
		if(FRINTZ_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x2EA1D800U) {
		if(FRSQRTE_vector(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x0EA0FC00U) {
		if(FRSQRTS_vector(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x1E21C000U) {
		if(FSQRT_scalar(inst, pc)) return true;
	}
	if((inst & 0xFF20FC00U) == 0x1E203800U) {
		if(FSUB_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFA0FC00U) == 0x0EA0D400U) {
		if(FSUB_vector(inst, pc)) return true;
	}
	if((inst & 0xFFE0FC00U) == 0x4E001C00U) {
		if(INS_general(inst, pc)) return true;
	}
	if((inst & 0xFFE08400U) == 0x6E000400U) {
		if(INS_vector(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C407000U) {
		if(LD1_multi_no_offset_one_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C40A000U) {
		if(LD1_multi_no_offset_two_registers(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C406000U) {
		if(LD1_multi_no_offset_three_registers(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C402000U) {
		if(LD1_multi_no_offset_four_registers(inst, pc)) return true;
	}
	if((inst & 0xBFFF2000U) == 0x0D400000U) {
		if(LD1_single_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0D40C000U) {
		if(LD1R_single_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0DC0C000U) {
		if(LD1R_single_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0DC0C000U) {
		if(LD1R_single_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C408000U) {
		if(LD2_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC08000U) {
		if(LD2_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC08000U) {
		if(LD2_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C404000U) {
		if(LD3_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC04000U) {
		if(LD3_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC04000U) {
		if(LD3_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C400000U) {
		if(LD4_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC00000U) {
		if(LD4_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0CC00000U) {
		if(LD4_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFFC00U) == 0x88DFFC00U) {
		if(LDAR(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x08DFFC00U) {
		if(LDARB(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x48DFFC00U) {
		if(LDARH(inst, pc)) return true;
	}
	if((inst & 0xBFFFFC00U) == 0x885FFC00U) {
		if(LDAXB(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x085FFC00U) {
		if(LDAXRB(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x485FFC00U) {
		if(LDAXRH(inst, pc)) return true;
	}
	if((inst & 0x7FC00000U) == 0x28C00000U) {
		if(LDP_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0x7FC00000U) == 0x29400000U) {
		if(LDP_immediate_signed_offset(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2CC00000U) {
		if(LDP_simd_postindex(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2DC00000U) {
		if(LDP_simd_preindex(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2D400000U) {
		if(LDP_simd_signed_offset(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0x69400000U) {
		if(LDPSW_immediate_signed_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8400C00U) {
		if(LDR_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8400400U) {
		if(LDR_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xBFC00000U) == 0xB9400000U) {
		if(LDR_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xBF000000U) == 0x18000000U) {
		if(LDR_literal(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C400400U) {
		if(LDR_simd_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C400C00U) {
		if(LDR_simd_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0x3F400000U) == 0x3D400000U) {
		if(LDR_simd_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0x3F000000U) == 0x1C000000U) {
		if(LDR_simd_literal(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C600800U) {
		if(LDR_simd_register(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8600800U) {
		if(LDR_register(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38400400U) {
		if(LDRB_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38400C00U) {
		if(LDRB_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0x39400000U) {
		if(LDRB_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38600800U) {
		if(LDRB_register(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78400400U) {
		if(LDRH_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78400C00U) {
		if(LDRH_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0x79400000U) {
		if(LDRH_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78600800U) {
		if(LDRH_register(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x38800400U) {
		if(LDRSB_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x38800C00U) {
		if(LDRSB_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFF800000U) == 0x39800000U) {
		if(LDRSB_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x38A00800U) {
		if(LDRSB_register(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x78800400U) {
		if(LDRSH_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x78800C00U) {
		if(LDRSH_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFF800000U) == 0x79800000U) {
		if(LDRSH_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x78A00800U) {
		if(LDRSH_register(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0xB8800400U) {
		if(LDRSW_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0xB8800C00U) {
		if(LDRSW_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0xB9800000U) {
		if(LDRSW_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFF000000U) == 0x98000000U) {
		if(LDRSW_literal(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0xB8A00800U) {
		if(LDRSW_register(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8400000U) {
		if(LDUR(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38400000U) {
		if(LDURB(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78400000U) {
		if(LDURH(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x38800000U) {
		if(LDURSB(inst, pc)) return true;
	}
	if((inst & 0xFFA00C00U) == 0x78800000U) {
		if(LDURSH(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0xB8800000U) {
		if(LDURSW(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C400000U) {
		if(LDUR_simd(inst, pc)) return true;
	}
	if((inst & 0xBFFFFC00U) == 0x885F7C00U) {
		if(LDXR(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x085F7C00U) {
		if(LDXRB(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x485F7C00U) {
		if(LDXRH(inst, pc)) return true;
	}
	if((inst & 0xBFFF8000U) == 0x887F0000U) {
		if(LDXP(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC02000U) {
		if(LSL_register(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC02400U) {
		if(LSRV(inst, pc)) return true;
	}
	if((inst & 0x7FE08000U) == 0x1B000000U) {
		if(MADD(inst, pc)) return true;
	}
	if((inst & 0xFFF8FC00U) == 0x2F00E400U) {
		if(MOVI_scalar_64bit(inst, pc)) return true;
	}
	if((inst & 0xBFF8FC00U) == 0x0F00E400U) {
		if(MOVI_vector_8bit(inst, pc)) return true;
	}
	if((inst & 0xBFF8DC00U) == 0x0F008400U) {
		if(MOVI_vector_16bit(inst, pc)) return true;
	}
	if((inst & 0xBFF89C00U) == 0x0F000400U) {
		if(MOVI_vector_32bit(inst, pc)) return true;
	}
	if((inst & 0xFFF8FC00U) == 0x6F00E400U) {
		if(MOVI_Vx_2D(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x72800000U) {
		if(MOVK(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x12800000U) {
		if(MOVN(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x52800000U) {
		if(MOVZ(inst, pc)) return true;
	}
	if((inst & 0xFFF00000U) == 0xD5300000U) {
		if(MRS(inst, pc)) return true;
	}
	if((inst & 0xFFF00000U) == 0xD5100000U) {
		if(MSR_register(inst, pc)) return true;
	}
	if((inst & 0x7FE08000U) == 0x1B008000U) {
		if(MSUB(inst, pc)) return true;
	}
	if((inst & 0xBF00F400U) == 0x0F008000U) {
		if(MUL_by_element(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x0E209C00U) {
		if(MUL_vector(inst, pc)) return true;
	}
	if((inst & 0xBFF8DC00U) == 0x2F008400U) {
		if(MVNI_vector_16bit(inst, pc)) return true;
	}
	if((inst & 0xBFF89C00U) == 0x2F000400U) {
		if(MVNI_vector_32bit_LSL(inst, pc)) return true;
	}
	if((inst & 0xBFF8EC00U) == 0x2F00E400U) {
		if(MVNI_vector_32bit_MSL(inst, pc)) return true;
	}
	if((inst & 0xBF3FFC00U) == 0x2E20B800U) {
		if(NEG_vector(inst, pc)) return true;
	}
	if((inst & 0xFFFFFFFFU) == 0xD503201FU) {
		if(NOP(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x2A200000U) {
		if(ORN_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x32000000U) {
		if(ORR_immediate(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x2A000000U) {
		if(ORR_shifted_register(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0EA01C00U) {
		if(ORR_simd_register(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x0E20E000U) {
		if(PMULL_2_(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0xF9800000U) {
		if(PRFM_immediate(inst, pc)) return true;
	}
	if((inst & 0xFF000000U) == 0xD8000000U) {
		if(PRFM_literal(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0xF8A00800U) {
		if(PRFM_register(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0xF8800000U) {
		if(PRFUM(inst, pc)) return true;
	}
	if((inst & 0x7FFFFC00U) == 0x5AC00000U) {
		if(RBIT(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC1FU) == 0xD65F0000U) {
		if(RET(inst, pc)) return true;
	}
	if((inst & 0x7FFFF800U) == 0x5AC00800U) {
		if(REV(inst, pc)) return true;
	}
	if((inst & 0x7FFFFC00U) == 0x5AC00400U) {
		if(REV16(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC02C00U) {
		if(RORV(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x7A000000U) {
		if(SBCS(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x13000000U) {
		if(SBFM(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E220000U) {
		if(SCVTF_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0xFFBFFC00U) == 0x5E21D800U) {
		if(SCVTF_scalar(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x0E21D800U) {
		if(SCVTF_vector(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC00C00U) {
		if(SDIV(inst, pc)) return true;
	}
	if((inst & 0xBF80FC00U) == 0x0F005400U) {
		if(SHL_vector(inst, pc)) return true;
	}
	if((inst & 0xFFE08000U) == 0x9B200000U) {
		if(SMADDL(inst, pc)) return true;
	}
	if((inst & 0xFFE0FC00U) == 0x9B407C00U) {
		if(SMULH(inst, pc)) return true;
	}
	if((inst & 0xBF80FC00U) == 0x0F00A400U) {
		if(SSHLL(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C007000U) {
		if(ST1_multi_no_offset_one_register(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C807000U) {
		if(ST1_multi_postindex_immediate_one_register(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C807000U) {
		if(ST1_multi_postindex_register_one_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C00A000U) {
		if(ST1_multi_no_offset_two_registers(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C80A000U) {
		if(ST1_multi_postindex_immediate_two_registers(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C80A000U) {
		if(ST1_multi_postindex_register_two_registers(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C006000U) {
		if(ST1_multi_no_offset_three_registers(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C806000U) {
		if(ST1_multi_postindex_immediate_three_registers(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C806000U) {
		if(ST1_multi_postindex_register_three_registers(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C002000U) {
		if(ST1_multi_no_offset_four_registers(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C802000U) {
		if(ST1_multi_postindex_immediate_four_registers(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C802000U) {
		if(ST1_multi_postindex_register_four_registers(inst, pc)) return true;
	}
	if((inst & 0xBFFF2000U) == 0x0D000000U) {
		if(ST1_single_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C008000U) {
		if(ST2_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C808000U) {
		if(ST2_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C808000U) {
		if(ST2_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C004000U) {
		if(ST3_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C804000U) {
		if(ST3_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C804000U) {
		if(ST3_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFF000U) == 0x0C000000U) {
		if(ST4_multi_no_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C800000U) {
		if(ST4_multi_postindex_immediate(inst, pc)) return true;
	}
	if((inst & 0xBFE0F000U) == 0x0C800000U) {
		if(ST4_multi_postindex_register(inst, pc)) return true;
	}
	if((inst & 0xBFFFFC00U) == 0x889FFC00U) {
		if(STLR(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x089FFC00U) {
		if(STLRB(inst, pc)) return true;
	}
	if((inst & 0xFFFFFC00U) == 0x489FFC00U) {
		if(STLRH(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x8800FC00U) {
		if(STLXR(inst, pc)) return true;
	}
	if((inst & 0xFFE0FC00U) == 0x0800FC00U) {
		if(STLXRB(inst, pc)) return true;
	}
	if((inst & 0x7FC00000U) == 0x28800000U) {
		if(STP_postindex(inst, pc)) return true;
	}
	if((inst & 0x7FC00000U) == 0x29800000U) {
		if(STP_preindex(inst, pc)) return true;
	}
	if((inst & 0x7FC00000U) == 0x29000000U) {
		if(STP_signed_offset(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2C800000U) {
		if(STP_simd_postindex(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2D800000U) {
		if(STP_simd_preindex(inst, pc)) return true;
	}
	if((inst & 0x3FC00000U) == 0x2D000000U) {
		if(STP_simd_signed_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8000400U) {
		if(STR_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8000C00U) {
		if(STR_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xBFC00000U) == 0xB9000000U) {
		if(STR_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8200800U) {
		if(STR_register(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C000400U) {
		if(STR_simd_postindex(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C000C00U) {
		if(STR_simd_preindex(inst, pc)) return true;
	}
	if((inst & 0x3F400000U) == 0x3D000000U) {
		if(STR_simd_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C200800U) {
		if(STR_simd_register(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38000400U) {
		if(STRB_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38000C00U) {
		if(STRB_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0x39000000U) {
		if(STRB_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38200800U) {
		if(STRB_register(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78000400U) {
		if(STRH_immediate_postindex(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78000C00U) {
		if(STRH_immediate_preindex(inst, pc)) return true;
	}
	if((inst & 0xFFC00000U) == 0x79000000U) {
		if(STRH_immediate_unsigned_offset(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78200800U) {
		if(STRH_register(inst, pc)) return true;
	}
	if((inst & 0xBFE00C00U) == 0xB8000000U) {
		if(STUR(inst, pc)) return true;
	}
	if((inst & 0x3F600C00U) == 0x3C000000U) {
		if(STUR_simd(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x38000000U) {
		if(STURB(inst, pc)) return true;
	}
	if((inst & 0xFFE00C00U) == 0x78000000U) {
		if(STURH(inst, pc)) return true;
	}
	if((inst & 0xFFE0FC00U) == 0x08007C00U) {
		if(STXRB(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x88007C00U) {
		if(STXR(inst, pc)) return true;
	}
	if((inst & 0xBFE08000U) == 0x88200000U) {
		if(STXP(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x51000000U) {
		if(SUB_immediate(inst, pc)) return true;
	}
	if((inst & 0x7FE00000U) == 0x4B200000U) {
		if(SUB_extended_register(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x4B000000U) {
		if(SUB_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x7FE00000U) == 0x6B200000U) {
		if(SUBS_extended_register(inst, pc)) return true;
	}
	if((inst & 0x7F200000U) == 0x6B000000U) {
		if(SUBS_shifted_register(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x71000000U) {
		if(SUBS_immediate(inst, pc)) return true;
	}
	if((inst & 0xFFE0001FU) == 0xD4000001U) {
		if(SVC(inst, pc)) return true;
	}
	if((inst & 0xFFF80000U) == 0xD5080000U) {
		if(SYS(inst, pc)) return true;
	}
	if((inst & 0x7F000000U) == 0x36000000U) {
		if(TBZ(inst, pc)) return true;
	}
	if((inst & 0x7F000000U) == 0x37000000U) {
		if(TBNZ(inst, pc)) return true;
	}
	if((inst & 0xBF3FFC00U) == 0x2E303800U) {
		if(UADDLV(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x2E201000U) {
		if(UADDW_2_(inst, pc)) return true;
	}
	if((inst & 0x7F800000U) == 0x53000000U) {
		if(UBFM(inst, pc)) return true;
	}
	if((inst & 0x7F3FFC00U) == 0x1E230000U) {
		if(UCVTF_scalar_gpr_integer(inst, pc)) return true;
	}
	if((inst & 0xFFBFFC00U) == 0x7E21D800U) {
		if(UCVTF_scalar_integer(inst, pc)) return true;
	}
	if((inst & 0xBFBFFC00U) == 0x2E21D800U) {
		if(UCVTF_vector(inst, pc)) return true;
	}
	if((inst & 0x7FE0FC00U) == 0x1AC00800U) {
		if(UDIV(inst, pc)) return true;
	}
	if((inst & 0xFFE08000U) == 0x9BA00000U) {
		if(UMADDL(inst, pc)) return true;
	}
	if((inst & 0xBFE0FC00U) == 0x0E003C00U) {
		if(UMOV(inst, pc)) return true;
	}
	if((inst & 0xFFE0FC00U) == 0x9BC07C00U) {
		if(UMULH(inst, pc)) return true;
	}
	if((inst & 0xBF20FC00U) == 0x2E204400U) {
		if(USHL_vector(inst, pc)) return true;
	}
	if((inst & 0xBF80FC00U) == 0x2F00A400U) {
		if(USHLL_vector(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x0E212800U) {
		if(XTN(inst, pc)) return true;
	}
	if((inst & 0xFF3FFC00U) == 0x4E212800U) {
		if(XTN2(inst, pc)) return true;
	}
	if((inst & 0xFFFFFFFFU) == 0xD503203FU) {
		if(YIELD(inst, pc)) return true;
	}
	if((inst & 0xBF20BC00U) == 0x0E003800U) {
		if(ZIP(inst, pc)) return true;
	}

    return false;
}

/* ADCS */
bool LightRecompiler::ADCS(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=]() -> LightRuntimeValue<uint32_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<bool>) (NZCV_CR)))).Store();
					auto bits = (int32_t) (32);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint32_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<bool>) (NZCV_CR)))).Store();
					auto bits = (int32_t) (64);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADD-extended-register */
bool LightRecompiler::ADD_extended_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto imm = (inst >> 10) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((bool) ((((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x3))))) == (0x3)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto extend = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? ((string) (([=](auto temp_651) -> string { switch(temp_651) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("LSL"); case 0x3: return string("UXTX"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))) : ((string) (([=](auto temp_652) -> string { switch(temp_652) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto m = ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))).Store();
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (([=](auto temp_653) -> LightRuntimeValue<uint32_t> { switch(temp_653) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x4: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); default: return m; } })(option))) << (imm))))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (([=](auto temp_654) -> LightRuntimeValue<uint32_t> { switch(temp_654) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x4: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); default: return m; } })(option))) << (imm))))));
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x3))))) == (0x3)) ? 1U : 0U)) != 0) {
				if(rd == 31)
					SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm)))));
				else
					XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm)))));
			} else {
				auto m = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))).Store();
				if(rd == 31)
					SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (([=](auto temp_655) -> LightRuntimeValue<uint64_t> { switch(temp_655) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFFFFFF))))); case 0x4: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); case 0x6: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (m)), 32))))); default: return m; } })(option))) << (imm)))));
				else
					XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (([=](auto temp_656) -> LightRuntimeValue<uint64_t> { switch(temp_656) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFFFFFF))))); case 0x4: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); case 0x6: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (m)), 32))))); default: return m; } })(option))) << (imm)))));
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADD-immediate */
bool LightRecompiler::ADD_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto sh = (inst >> 22) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (int64_t) (((bool) (((sh) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : (0xC));
		auto simm = (uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (simm))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (simm))));
		} else {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (simm)));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (simm)));
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADD-shifted-register */
bool LightRecompiler::ADD_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_657) -> string { switch(temp_657) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=](auto temp_658) -> LightRuntimeValue<uint32_t> { switch(temp_658) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=](auto temp_659) -> LightRuntimeValue<uint32_t> { switch(temp_659) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))));
		} else {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (([=](auto temp_660) -> LightRuntimeValue<uint64_t> { switch(temp_660) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift)))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (([=](auto temp_661) -> LightRuntimeValue<uint64_t> { switch(temp_661) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? SPR() : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADD-vector */
bool LightRecompiler::ADD_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) (([=](auto temp_662) -> string { switch(temp_662) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto v = ((LightRuntimeValue<Vector128<float>>) (([=](auto temp_663) -> LightRuntimeValue<Vector128<float>> { switch(temp_663) { case 0x0: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); case 0x1: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<uint16_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((LightRuntimeValue<Vector128<uint16_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); case 0x2: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<uint32_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((LightRuntimeValue<Vector128<uint32_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); case 0x3: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<uint64_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((LightRuntimeValue<Vector128<uint64_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); default: throw "Not implemented"; } })(size))).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((LightRuntimeValue<Vector128<float>>) ((v).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* ADDS-extended-register */
bool LightRecompiler::ADDS_extended_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto imm = (inst >> 10) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((bool) ((((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x3))))) == (0x3)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto extend = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? ((string) (([=](auto temp_664) -> string { switch(temp_664) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("LSL"); case 0x3: return string("UXTX"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))) : ((string) (([=](auto temp_665) -> string { switch(temp_665) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto m = ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=]() -> LightRuntimeValue<uint32_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (~((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (([=](auto temp_666) -> LightRuntimeValue<uint32_t> { switch(temp_666) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x4: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); default: return m; } })(option))) << (imm))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint32_t) ((uint32_t) (0x1));
					auto bits = (int32_t) (32);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint32_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x3))))) == (0x3)) ? 1U : 0U)) != 0) {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
						auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
						auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm))))).Store();
						auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint64_t) ((uint64_t) (0x0));
						auto bits = (int32_t) (64);
						auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
						auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
						auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
						NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
						NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
						NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
						NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
						return (usum).Store();
					})());
			} else {
				auto m = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))).Store();
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
						auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
						auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (([=](auto temp_667) -> LightRuntimeValue<uint64_t> { switch(temp_667) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFFFFFF))))); case 0x4: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); case 0x6: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>(m, 64))))); default: return m; } })(option))) << (imm))))).Store();
						auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint64_t) ((uint64_t) (0x0));
						auto bits = (int32_t) (64);
						auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
						auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
						auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
						NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
						NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
						NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
						NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
						return (usum).Store();
					})());
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADDS-immediate */
bool LightRecompiler::ADDS_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto sh = (inst >> 22) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (int64_t) (((bool) (((sh) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : (0xC));
		auto simm = (uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=]() -> LightRuntimeValue<uint32_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint32_t) ((uint32_t) (simm));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint32_t) ((uint32_t) (0x0));
					auto bits = (int32_t) (32);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint32_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint32_t) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint64_t) ((uint64_t) (simm));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint64_t) ((uint64_t) (0x0));
					auto bits = (int32_t) (64);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint64_t) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADDS-shifted-register */
bool LightRecompiler::ADDS_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_668) -> string { switch(temp_668) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=]() -> LightRuntimeValue<uint32_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=](auto temp_669) -> LightRuntimeValue<uint32_t> { switch(temp_669) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint32_t) ((uint32_t) (0x0));
					auto bits = (int32_t) (32);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint32_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (([=](auto temp_670) -> LightRuntimeValue<uint64_t> { switch(temp_670) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint64_t) ((uint64_t) (0x0));
					auto bits = (int32_t) (64);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* ADR */
bool LightRecompiler::ADR(uint inst, ulong pc) {
	{
		auto immlo = (inst >> 29) & 0x3U;
		auto immhi = (inst >> 5) & 0x7FFFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>((uint32_t) ((uint32_t) (((uint32_t) (((uint32_t) (immlo)) << 0)) | ((uint32_t) (((uint32_t) (immhi)) << 2)))), 21));
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (pc))) + ((uint64_t) (int64_t) (imm)));
		XR[(int) rd] = addr;
		return true;
	}
unimplemented:
	return false;
}

/* ADRP */
bool LightRecompiler::ADRP(uint inst, ulong pc) {
	{
		auto immlo = (inst >> 29) & 0x3U;
		auto immhi = (inst >> 5) & 0x7FFFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>((uint64_t) ((uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (((uint64_t) ((uint16_t) ((uint16_t) (0x0)))) << 0)) | ((uint64_t) (((uint64_t) (immlo)) << 12)))) | ((uint64_t) (((uint64_t) (immhi)) << 14)))), 33));
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) ((uint64_t) (((uint64_t) (((uint64_t) ((uint16_t) ((uint16_t) (0x0)))) << 0)) | ((uint64_t) (((uint64_t) ((uint64_t) ((uint64_t) ((uint64_t) (((uint64_t) (pc)) >> (uint) (0xC)))))) << 12)))))) + ((uint64_t) (int64_t) (imm)));
		XR[(int) rd] = addr;
		return true;
	}
unimplemented:
	return false;
}

/* AND-immediate */
bool LightRecompiler::AND_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto up = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (uint64_t) (MakeWMask(up, imms, immr, (int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x20) : (0x40)), 0x1));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) & ((LightRuntimeValue<uint32_t>) ((uint32_t) ((uint32_t) (imm)))))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) & ((LightRuntimeValue<uint32_t>) ((uint32_t) ((uint32_t) (imm)))))));
		} else {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((LightRuntimeValue<uint64_t>) (imm))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((LightRuntimeValue<uint64_t>) (imm))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* AND-shifted-register */
bool LightRecompiler::AND_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_671) -> string { switch(temp_671) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) & ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=](auto temp_672) -> LightRuntimeValue<uint32_t> { switch(temp_672) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift)))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (([=](auto temp_673) -> LightRuntimeValue<uint64_t> { switch(temp_673) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* AND-vector */
bool LightRecompiler::AND_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
		auto v = ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]))) & ((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)]))))))).ZeroTop())).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((LightRuntimeValue<Vector128<float>>) ((v).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* ANDS-shifted-register */
bool LightRecompiler::ANDS_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_674) -> string { switch(temp_674) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto result = ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) & ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=](auto temp_675) -> LightRuntimeValue<uint32_t> { switch(temp_675) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (result);
			NZCV_NR = (LightRuntimeValue<uint32_t>) ((result) >> (0x1F));
			NZCV_ZR = (LightRuntimeValue<bool>) ((result) == (0x0));
			NZCV_CR = 0x0;
			NZCV_VR = 0x0;
		} else {
			auto result = ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (([=](auto temp_676) -> LightRuntimeValue<uint64_t> { switch(temp_676) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))))).Store();
			XR[(int) rd] = result;
			NZCV_NR = (LightRuntimeValue<uint64_t>) ((result) >> (0x3F));
			NZCV_ZR = (LightRuntimeValue<bool>) ((result) == (0x0));
			NZCV_CR = 0x0;
			NZCV_VR = 0x0;
		}
		return true;
	}
unimplemented:
	return false;
}

/* ANDS-immediate */
bool LightRecompiler::ANDS_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto up = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (uint64_t) (MakeWMask(up, imms, immr, (int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x20) : (0x40)), 0x1));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto result = ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) & ((LightRuntimeValue<uint64_t>) (imm))))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (result);
			NZCV_NR = (LightRuntimeValue<uint32_t>) ((result) >> (0x1F));
			NZCV_ZR = (LightRuntimeValue<bool>) ((result) == (0x0));
			NZCV_CR = 0x0;
			NZCV_VR = 0x0;
		} else {
			auto result = ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((LightRuntimeValue<uint64_t>) (imm))))).Store();
			XR[(int) rd] = result;
			NZCV_NR = (LightRuntimeValue<uint64_t>) ((result) >> (0x3F));
			NZCV_ZR = (LightRuntimeValue<bool>) ((result) == (0x0));
			NZCV_CR = 0x0;
			NZCV_VR = 0x0;
		}
		return true;
	}
unimplemented:
	return false;
}

/* ASRV */
bool LightRecompiler::ASRV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))))) >> ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())))) % ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x20))))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())))) >> ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))) % ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x40)))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* B */
bool LightRecompiler::B(uint inst, ulong pc) {
	{
		auto imm = (inst >> 0) & 0x3FFFFFFU;
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (pc))) + ((uint64_t) (int64_t) ((int64_t) (SignExt<int64_t>((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (0x2)), 28)))));
		Branch(addr);
		return true;
	}
unimplemented:
	return false;
}

/* B.cond */
bool LightRecompiler::B_cond(uint inst, ulong pc) {
	{
		auto imm = (inst >> 5) & 0x7FFFFU;
		auto cond = (inst >> 0) & 0xFU;
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (pc))) + ((uint64_t) (int64_t) ((int64_t) (SignExt<int64_t>((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (0x2)), 21)))));
		auto condstr = (string) (([=](auto temp_677) -> string { switch(temp_677) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((LightRuntimeValue<bool>) (([=](auto temp_678) -> LightRuntimeValue<bool> { switch(temp_678) { case 0x0: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR)); case 0x2: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_NR)); case 0x3: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_VR)); case 0x4: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((uint8_t) ((cond) >> (uint) (0x1))))).Store();
		LightLabel temp_679 = DefineLabel(), temp_681 = DefineLabel(), temp_680 = DefineLabel();
		BranchIf((LightRuntimeValue<bool>) (((uint8_t) ((((uint8_t) ((uint8_t) ((((uint64_t) (cond)) & ((uint64_t) (0x1)))))) & ((uint8_t) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((LightRuntimeValue<bool>) (!(result))) : (result)), temp_679, temp_681);
		Label(temp_679);
		Branch(addr);
		Branch(temp_680);
		Label(temp_681);
		Branch(pc + 4);
		Branch(temp_680);
		Label(temp_680);
		return true;
	}
unimplemented:
	return false;
}

/* BFM */
bool LightRecompiler::BFM(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto N = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto dst = ((LightRuntimeValue<uint32_t>) ((rd) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rd]()))).Store();
			auto src = ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))).Store();
			auto wmask = (uint32_t) ((uint32_t) ((uint64_t) (MakeWMask(N, imms, immr, 0x20, 0x0))));
			auto tmask = (uint32_t) ((uint32_t) ((uint64_t) (MakeTMask(N, imms, immr, 0x20, 0x0))));
			auto bot = ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) (dst)) & ((LightRuntimeValue<uint32_t>) ((uint32_t) (~(wmask)))))))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((src) << ((LightRuntimeValue<uint>) (32 - (immr)))) | ((src) >> ((LightRuntimeValue<uint>) (immr)))))) & ((LightRuntimeValue<uint32_t>) (wmask))))))))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) (dst)) & ((LightRuntimeValue<uint32_t>) ((uint32_t) (~(tmask)))))))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) (bot)) & ((LightRuntimeValue<uint32_t>) (tmask)))))))));
		} else {
			auto dst = ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rd]())).Store();
			auto src = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
			auto wmask = (uint64_t) (MakeWMask(N, imms, immr, 0x40, 0x0));
			auto tmask = (uint64_t) (MakeTMask(N, imms, immr, 0x40, 0x0));
			auto bot = ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (dst)) & ((LightRuntimeValue<uint64_t>) ((uint64_t) (~(wmask)))))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((src) << ((LightRuntimeValue<uint>) (64 - (immr)))) | ((src) >> ((LightRuntimeValue<uint>) (immr)))))) & ((LightRuntimeValue<uint64_t>) (wmask))))))))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (dst)) & ((LightRuntimeValue<uint64_t>) ((uint64_t) (~(tmask)))))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (bot)) & ((LightRuntimeValue<uint64_t>) (tmask))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* BIC */
bool LightRecompiler::BIC(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_682) -> string { switch(temp_682) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) & ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (~((LightRuntimeValue<uint32_t>) (([=](auto temp_683) -> LightRuntimeValue<uint32_t> { switch(temp_683) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift)))))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (~((LightRuntimeValue<uint64_t>) (([=](auto temp_684) -> LightRuntimeValue<uint64_t> { switch(temp_684) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* BIC-vector-register */
bool LightRecompiler::BIC_vector_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (((bool) (((Q) == (0x1)) ? 1U : 0U) != 0) ? (string("16B")) : (string("8B")));
		auto v = ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (~(((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]))) & ((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)]))))))).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((LightRuntimeValue<Vector128<float>>) ((v).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* BIC-vector-immediate-16bit */
bool LightRecompiler::BIC_vector_immediate_16bit(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto cmode = (inst >> 13) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (((bool) (((Q) == (0x1)) ? 1U : 0U) != 0) ? (string("16B")) : (string("8B")));
		auto amount = (int64_t) ((cmode != 0) ? (0x8) : (0x0));
		auto imm = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (h)) << 0)) | ((uint8_t) (((uint8_t) (g)) << 1)))) | ((uint8_t) (((uint8_t) (f)) << 2)))) | ((uint8_t) (((uint8_t) (e)) << 3)))) | ((uint8_t) (((uint8_t) (d)) << 4)))) | ((uint8_t) (((uint8_t) (c)) << 5)))) | ((uint8_t) (((uint8_t) (b)) << 6)))) | ((uint8_t) (((uint8_t) (a)) << 7))));
		auto v = ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (~(((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rd)]))) & ((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint16_t>) ((uint16_t) (((uint16_t) ((uint16_t) (imm))) << (uint) (amount)))).CreateVector()))))))).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((LightRuntimeValue<Vector128<float>>) ((v).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* BIC-vector-immediate-32bit */
bool LightRecompiler::BIC_vector_immediate_32bit(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto cmode = (inst >> 13) & 0x3U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (((bool) (((Q) == (0x1)) ? 1U : 0U) != 0) ? (string("16B")) : (string("8B")));
		auto amount = (uint8_t) ((cmode) << (uint) (0x3));
		auto imm = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (h)) << 0)) | ((uint8_t) (((uint8_t) (g)) << 1)))) | ((uint8_t) (((uint8_t) (f)) << 2)))) | ((uint8_t) (((uint8_t) (e)) << 3)))) | ((uint8_t) (((uint8_t) (d)) << 4)))) | ((uint8_t) (((uint8_t) (c)) << 5)))) | ((uint8_t) (((uint8_t) (b)) << 6)))) | ((uint8_t) (((uint8_t) (a)) << 7))));
		auto v = ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (~(((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rd)]))) & ((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint32_t>) ((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (amount)))).CreateVector()))))))).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((LightRuntimeValue<Vector128<float>>) ((v).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* BICS */
bool LightRecompiler::BICS(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_685) -> string { switch(temp_685) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto val = ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) & ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (~((LightRuntimeValue<uint32_t>) (([=](auto temp_686) -> LightRuntimeValue<uint32_t> { switch(temp_686) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))))))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (val);
			NZCVR = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((val) >> (0x1F))))) << (0x1F)))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<bool>) ((val) == (0x0))))) << (0x1E))))));
		} else {
			auto val = ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) & ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (~((LightRuntimeValue<uint64_t>) (([=](auto temp_687) -> LightRuntimeValue<uint64_t> { switch(temp_687) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))))))).Store();
			XR[(int) rd] = val;
			NZCVR = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((val) >> (0x3F))))) << (0x1F)))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<bool>) ((val) == (0x0))))) << (0x1E))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* BL */
bool LightRecompiler::BL(uint inst, ulong pc) {
	{
		auto imm = (inst >> 0) & 0x3FFFFFFU;
		auto offset = (int64_t) (SignExt<int64_t>((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (0x2)), 28));
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (pc))) + ((uint64_t) (int64_t) (offset)));
		BranchLinked(addr);
		return true;
	}
unimplemented:
	return false;
}

/* BLR */
bool LightRecompiler::BLR(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		BranchLinkedRegister(rn);
		return true;
	}
unimplemented:
	return false;
}

/* BR */
bool LightRecompiler::BR(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		BranchRegister(rn);
		return true;
	}
unimplemented:
	return false;
}

/* BRK */
bool LightRecompiler::BRK(uint inst, ulong pc) {
	{
		auto imm = (inst >> 5) & 0xFFFFU;
		Branch(-0xE0E0E0E0D0D0D0E);
		return true;
	}
unimplemented:
	return false;
}

/* BSL */
bool LightRecompiler::BSL(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
		auto d = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rd)])).Store();
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((((LightRuntimeValue<Vector128<uint8_t>>) (b)) ^ ((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((((LightRuntimeValue<Vector128<uint8_t>>) (b)) ^ ((LightRuntimeValue<Vector128<uint8_t>>) (a))))))) & ((LightRuntimeValue<Vector128<uint8_t>>) (d))))))))));
		return true;
	}
unimplemented:
	return false;
}

/* CASP */
bool LightRecompiler::CASP(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto rs2 = (uint64_t) (((uint64_t) (uint8_t) (rs)) + ((uint64_t) (int64_t) (0x1)));
		auto rt2 = (uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1)));
		throw "Not implemented";
		return true;
	}
unimplemented:
	return false;
}

/* CASPA */
bool LightRecompiler::CASPA(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto rs2 = (uint64_t) (((uint64_t) (uint8_t) (rs)) + ((uint64_t) (int64_t) (0x1)));
		auto rt2 = (uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1)));
		throw "Not implemented";
		return true;
	}
unimplemented:
	return false;
}

/* CASPAL */
bool LightRecompiler::CASPAL(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto rs2 = (uint64_t) (((uint64_t) (uint8_t) (rs)) + ((uint64_t) (int64_t) (0x1)));
		auto rt2 = (uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1)));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto cl = ((LightRuntimeValue<uint32_t>) ((rs) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rs]()))).Store();
			auto ch = ((LightRuntimeValue<uint32_t>) (((uint64_t) (((uint64_t) (uint8_t) (rs)) + ((uint64_t) (int64_t) (0x1)))) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) (uint64_t) (((uint64_t) (uint8_t) (rs)) + ((uint64_t) (int64_t) (0x1)))]()))).Store();
			auto nl = ((LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]()))).Store();
			auto nh = ((LightRuntimeValue<uint32_t>) (((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1)))) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) (uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1)))]()))).Store();
			auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
			auto data = ((LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) (address)).value())).Store();
			LightLabel temp_688 = DefineLabel(), temp_690 = DefineLabel(), temp_689 = DefineLabel();
			BranchIf((LightRuntimeValue<bool>) ((data) == ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (ch))) << (0x20)))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (cl)))))))), temp_688, temp_690);
			Label(temp_688);
			((LightRuntimePointer<uint64_t>) (address)).value((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (nh))) << (0x20)))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (nl)))))));
			Branch(temp_689);
			Label(temp_690);
			Branch(temp_689);
			Label(temp_689);
			XR[(int) rs] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (data)));
			XR[(int) (uint64_t) (((uint64_t) (uint8_t) (rs)) + ((uint64_t) (int64_t) (0x1)))] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) ((data) >> (0x20)))));
		} else {
			auto cl = ((LightRuntimeValue<uint64_t>) ((rs) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rs]())).Store();
			auto ch = ((LightRuntimeValue<uint64_t>) (((uint64_t) (((uint64_t) (uint8_t) (rs)) + ((uint64_t) (int64_t) (0x1)))) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) (uint64_t) (((uint64_t) (uint8_t) (rs)) + ((uint64_t) (int64_t) (0x1)))]())).Store();
			auto nl = ((LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]())).Store();
			auto nh = ((LightRuntimeValue<uint64_t>) (((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1)))) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) (uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1)))]())).Store();
			auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
			auto dl = ((LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) (address)).value())).Store();
			auto dh = ((LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value())).Store();
			LightLabel temp_691 = DefineLabel(), temp_693 = DefineLabel(), temp_692 = DefineLabel();
			BranchIf((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((dl) == (cl)))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((dh) == (ch)))))), temp_691, temp_693);
			Label(temp_691);
			((LightRuntimePointer<uint64_t>) (address)).value(nl);
			((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value(nh);
			Branch(temp_692);
			Label(temp_693);
			Branch(temp_692);
			Label(temp_692);
			XR[(int) rs] = dl;
			XR[(int) (uint64_t) (((uint64_t) (uint8_t) (rs)) + ((uint64_t) (int64_t) (0x1)))] = dh;
		}
		return true;
	}
unimplemented:
	return false;
}

/* CASPL */
bool LightRecompiler::CASPL(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto rs2 = (uint64_t) (((uint64_t) (uint8_t) (rs)) + ((uint64_t) (int64_t) (0x1)));
		auto rt2 = (uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1)));
		throw "Not implemented";
		return true;
	}
unimplemented:
	return false;
}

/* CBNZ */
bool LightRecompiler::CBNZ(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 5) & 0x7FFFFU;
		auto rs = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (pc))) + ((uint64_t) (int64_t) ((int64_t) (SignExt<int64_t>((uint32_t) ((uint32_t) ((uint32_t) ((imm) << (uint) (0x2)))), 21)))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			LightLabel temp_694 = DefineLabel(), temp_696 = DefineLabel(), temp_695 = DefineLabel();
			BranchIf((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((rs) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rs]()))) != ((uint32_t) ((uint32_t) (0x0)))), temp_694, temp_696);
			Label(temp_694);
			Branch(addr);
			Branch(temp_695);
			Label(temp_696);
			Branch(pc + 4);
			Branch(temp_695);
			Label(temp_695);
		} else {
			LightLabel temp_697 = DefineLabel(), temp_699 = DefineLabel(), temp_698 = DefineLabel();
			BranchIf((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((rs) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rs]())) != ((uint64_t) ((uint64_t) (0x0)))), temp_697, temp_699);
			Label(temp_697);
			Branch(addr);
			Branch(temp_698);
			Label(temp_699);
			Branch(pc + 4);
			Branch(temp_698);
			Label(temp_698);
		}
		return true;
	}
unimplemented:
	return false;
}

/* CBZ */
bool LightRecompiler::CBZ(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 5) & 0x7FFFFU;
		auto rs = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (pc))) + ((uint64_t) (int64_t) ((int64_t) (SignExt<int64_t>((uint32_t) ((uint32_t) ((uint32_t) ((imm) << (uint) (0x2)))), 21)))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			LightLabel temp_700 = DefineLabel(), temp_702 = DefineLabel(), temp_701 = DefineLabel();
			BranchIf((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((rs) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rs]()))) == ((uint32_t) ((uint32_t) (0x0)))), temp_700, temp_702);
			Label(temp_700);
			Branch(addr);
			Branch(temp_701);
			Label(temp_702);
			Branch(pc + 4);
			Branch(temp_701);
			Label(temp_701);
		} else {
			LightLabel temp_703 = DefineLabel(), temp_705 = DefineLabel(), temp_704 = DefineLabel();
			BranchIf((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((rs) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rs]())) == ((uint64_t) ((uint64_t) (0x0)))), temp_703, temp_705);
			Label(temp_703);
			Branch(addr);
			Branch(temp_704);
			Label(temp_705);
			Branch(pc + 4);
			Branch(temp_704);
			Label(temp_704);
		}
		return true;
	}
unimplemented:
	return false;
}

/* CCMN-immediate */
bool LightRecompiler::CCMN_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto nzcv = (inst >> 0) & 0xFU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_706) -> string { switch(temp_706) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((LightRuntimeValue<bool>) (([=](auto temp_707) -> LightRuntimeValue<bool> { switch(temp_707) { case 0x0: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR)); case 0x2: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_NR)); case 0x3: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_VR)); case 0x4: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((uint8_t) ((cond) >> (uint) (0x1))))).Store();
		LightLabel temp_708 = DefineLabel(), temp_710 = DefineLabel(), temp_709 = DefineLabel();
		BranchIf((LightRuntimeValue<bool>) (((uint8_t) ((((uint8_t) ((uint8_t) ((((uint64_t) (cond)) & ((uint64_t) (0x1)))))) & ((uint8_t) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((LightRuntimeValue<bool>) (!(result))) : (result)), temp_708, temp_710);
		Label(temp_708);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) 0x1F] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=]() -> LightRuntimeValue<uint32_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint32_t) ((uint32_t) ((uint32_t) ((uint32_t) (imm))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint32_t) ((uint32_t) (0x0));
					auto bits = (int32_t) (32);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint32_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint32_t) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) 0x1F] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint64_t) ((uint64_t) ((uint64_t) ((uint64_t) (imm))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint64_t) ((uint64_t) (0x0));
					auto bits = (int32_t) (64);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint64_t) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		Branch(temp_709);
		Label(temp_710);
		NZCVR = (uint64_t) (((uint64_t) ((uint64_t) (nzcv))) << (uint) (0x1C));
		Branch(temp_709);
		Label(temp_709);
		return true;
	}
unimplemented:
	return false;
}

/* CCMP-immediate */
bool LightRecompiler::CCMP_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto nzcv = (inst >> 0) & 0xFU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_711) -> string { switch(temp_711) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((LightRuntimeValue<bool>) (([=](auto temp_712) -> LightRuntimeValue<bool> { switch(temp_712) { case 0x0: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR)); case 0x2: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_NR)); case 0x3: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_VR)); case 0x4: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((uint8_t) ((cond) >> (uint) (0x1))))).Store();
		LightLabel temp_713 = DefineLabel(), temp_715 = DefineLabel(), temp_714 = DefineLabel();
		BranchIf((LightRuntimeValue<bool>) (((uint8_t) ((((uint8_t) ((uint8_t) ((((uint64_t) (cond)) & ((uint64_t) (0x1)))))) & ((uint8_t) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((LightRuntimeValue<bool>) (!(result))) : (result)), temp_713, temp_715);
		Label(temp_713);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) 0x1F] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=]() -> LightRuntimeValue<uint32_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint32_t) ((uint32_t) ((uint32_t) (~((uint32_t) ((uint32_t) (imm))))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint32_t) ((uint32_t) (0x1));
					auto bits = (int32_t) (32);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint32_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint32_t) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) 0x1F] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint64_t) ((uint64_t) ((uint64_t) (~((uint64_t) ((uint64_t) (imm))))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint64_t) ((uint64_t) (0x1));
					auto bits = (int32_t) (64);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint64_t) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		Branch(temp_714);
		Label(temp_715);
		NZCVR = (uint64_t) (((uint64_t) ((uint64_t) (nzcv))) << (uint) (0x1C));
		Branch(temp_714);
		Label(temp_714);
		return true;
	}
unimplemented:
	return false;
}

/* CCMP-register */
bool LightRecompiler::CCMP_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto nzcv = (inst >> 0) & 0xFU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_716) -> string { switch(temp_716) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((LightRuntimeValue<bool>) (([=](auto temp_717) -> LightRuntimeValue<bool> { switch(temp_717) { case 0x0: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR)); case 0x2: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_NR)); case 0x3: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_VR)); case 0x4: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((uint8_t) ((cond) >> (uint) (0x1))))).Store();
		LightLabel temp_718 = DefineLabel(), temp_720 = DefineLabel(), temp_719 = DefineLabel();
		BranchIf((LightRuntimeValue<bool>) (((uint8_t) ((((uint8_t) ((uint8_t) ((((uint64_t) (cond)) & ((uint64_t) (0x1)))))) & ((uint8_t) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((LightRuntimeValue<bool>) (!(result))) : (result)), temp_718, temp_720);
		Label(temp_718);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) 0x1F] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=]() -> LightRuntimeValue<uint32_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (~((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint32_t) ((uint32_t) (0x1));
					auto bits = (int32_t) (32);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint32_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) 0x1F] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (~((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint64_t) ((uint64_t) (0x1));
					auto bits = (int32_t) (64);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		Branch(temp_719);
		Label(temp_720);
		NZCVR = (uint64_t) (((uint64_t) ((uint64_t) (nzcv))) << (uint) (0x1C));
		Branch(temp_719);
		Label(temp_719);
		return true;
	}
unimplemented:
	return false;
}

/* CLREX */
bool LightRecompiler::CLREX(uint inst, ulong pc) {
	{
		auto crm = (inst >> 8) & 0xFU;
		return true;
	}
unimplemented:
	return false;
}

/* CLZ */
bool LightRecompiler::CLZ(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Call<uint32_t, uint32_t>(CountLeadingZeros, (LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (Call<uint64_t, uint64_t>(CountLeadingZeros, (LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())));
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMEQ-register-scalar */
bool LightRecompiler::CMEQ_register_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto V = (string) (([=](auto temp_721) -> string { switch(temp_721) { case 0x3: return string("D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x3: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Bitcast<uint64_t>())) == ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<double>) (VDR[(int) (rm)])).Bitcast<uint64_t>())))), (uint64_t) ((uint64_t) (-0x1)), (uint64_t) ((uint64_t) (0x0))))).Bitcast<double>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMEQ-register-vector */
bool LightRecompiler::CMEQ_register_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_722) -> string { switch(temp_722) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				auto one = (uint8_t) ((uint8_t) (0xFF));
				auto zero = (uint8_t) ((uint8_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x8))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x8))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x9))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x9))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xA))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xA))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xB))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xB))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xC))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xC))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xD))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xD))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xE))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xE))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xF))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xF))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7))) == ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7))))), one, zero)));
				}
				break;
			}
			case 0x1: {
				auto one = (uint16_t) ((uint16_t) (0xFFFF));
				auto zero = (uint16_t) ((uint16_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x4))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x5))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x6))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x7))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3))) == ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3))))), one, zero)));
				}
				break;
			}
			case 0x2: {
				auto one = (uint32_t) ((uint32_t) (0xFFFFFFFF));
				auto zero = (uint32_t) ((uint32_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x0))) == ((LightRuntimeValue<uint32_t>) ((b).Element<uint32_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x1))) == ((LightRuntimeValue<uint32_t>) ((b).Element<uint32_t>(0x1))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x2))) == ((LightRuntimeValue<uint32_t>) ((b).Element<uint32_t>(0x2))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x3))) == ((LightRuntimeValue<uint32_t>) ((b).Element<uint32_t>(0x3))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x0))) == ((LightRuntimeValue<uint32_t>) ((b).Element<uint32_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x1))) == ((LightRuntimeValue<uint32_t>) ((b).Element<uint32_t>(0x1))))), one, zero)));
				}
				break;
			}
			default: {
				auto one = (uint64_t) ((uint64_t) (-0x1));
				auto zero = (uint64_t) ((uint64_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((a).Element<uint64_t>(0x0))) == ((LightRuntimeValue<uint64_t>) ((b).Element<uint64_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((a).Element<uint64_t>(0x1))) == ((LightRuntimeValue<uint64_t>) ((b).Element<uint64_t>(0x1))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((a).Element<uint64_t>(0x0))) == ((LightRuntimeValue<uint64_t>) ((b).Element<uint64_t>(0x0))))), one, zero)));
				}
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMEQ-zero-scalar */
bool LightRecompiler::CMEQ_zero_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto V = (string) (([=](auto temp_723) -> string { switch(temp_723) { case 0x3: return string("D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x3: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Bitcast<uint64_t>())) == ((uint64_t) ((uint64_t) (0x0))))), (uint64_t) ((uint64_t) (-0x1)), (uint64_t) ((uint64_t) (0x0))))).Bitcast<double>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMEQ-zero-vector */
bool LightRecompiler::CMEQ_zero_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_724) -> string { switch(temp_724) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				auto one = (uint8_t) ((uint8_t) (0xFF));
				auto zero = (uint8_t) ((uint8_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x8))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x9))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xA))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xB))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xC))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xD))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xE))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xF))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7))) == ((uint8_t) ((uint8_t) (0x0))))), one, zero)));
				}
				break;
			}
			case 0x1: {
				auto one = (uint16_t) ((uint16_t) (0xFFFF));
				auto zero = (uint16_t) ((uint16_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3))) == ((uint16_t) ((uint16_t) (0x0))))), one, zero)));
				}
				break;
			}
			case 0x2: {
				auto one = (uint32_t) ((uint32_t) (0xFFFFFFFF));
				auto zero = (uint32_t) ((uint32_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x0))) == ((uint32_t) ((uint32_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x1))) == ((uint32_t) ((uint32_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x2))) == ((uint32_t) ((uint32_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x3))) == ((uint32_t) ((uint32_t) (0x0))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x0))) == ((uint32_t) ((uint32_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x1))) == ((uint32_t) ((uint32_t) (0x0))))), one, zero)));
				}
				break;
			}
			default: {
				auto one = (uint64_t) ((uint64_t) (-0x1));
				auto zero = (uint64_t) ((uint64_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((a).Element<uint64_t>(0x0))) == ((uint64_t) ((uint64_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((a).Element<uint64_t>(0x1))) == ((uint64_t) ((uint64_t) (0x0))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((a).Element<uint64_t>(0x0))) == ((uint64_t) ((uint64_t) (0x0))))), one, zero)));
				}
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMGT-register-scalar */
bool LightRecompiler::CMGT_register_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto V = (string) (([=](auto temp_725) -> string { switch(temp_725) { case 0x3: return string("D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x3: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int64_t>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Bitcast<int64_t>())) > ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<double>) (VDR[(int) (rm)])).Bitcast<int64_t>())))), (uint64_t) ((uint64_t) (-0x1)), (uint64_t) ((uint64_t) (0x0))))).Bitcast<double>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMGT-register-vector */
bool LightRecompiler::CMGT_register_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_726) -> string { switch(temp_726) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				auto one = (uint8_t) ((uint8_t) (0xFF));
				auto zero = (uint8_t) ((uint8_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x0))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x1))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x1))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x2))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x2))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x3))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x3))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x4))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x4))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x5))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x5))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x6))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x6))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x7))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x7))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x8))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x8))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x9))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x9))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xA))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0xA))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xB))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0xB))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xC))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0xC))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xD))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0xD))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xE))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0xE))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xF))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0xF))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x0))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x1))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x1))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x2))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x2))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x3))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x3))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x4))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x4))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x5))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x5))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x6))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x6))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x7))) > ((LightRuntimeValue<int8_t>) ((b).Element<int8_t>(0x7))))), one, zero)));
				}
				break;
			}
			case 0x1: {
				auto one = (uint16_t) ((uint16_t) (0xFFFF));
				auto zero = (uint16_t) ((uint16_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x0))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x1))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x1))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x2))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x2))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x3))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x3))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x4))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x4))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x5))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x5))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x6))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x6))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x7))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x7))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x0))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x1))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x1))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x2))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x2))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x3))) > ((LightRuntimeValue<int16_t>) ((b).Element<int16_t>(0x3))))), one, zero)));
				}
				break;
			}
			case 0x2: {
				auto one = (uint32_t) ((uint32_t) (0xFFFFFFFF));
				auto zero = (uint32_t) ((uint32_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x0))) > ((LightRuntimeValue<int32_t>) ((b).Element<int32_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x1))) > ((LightRuntimeValue<int32_t>) ((b).Element<int32_t>(0x1))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x2))) > ((LightRuntimeValue<int32_t>) ((b).Element<int32_t>(0x2))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x3))) > ((LightRuntimeValue<int32_t>) ((b).Element<int32_t>(0x3))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x0))) > ((LightRuntimeValue<int32_t>) ((b).Element<int32_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x1))) > ((LightRuntimeValue<int32_t>) ((b).Element<int32_t>(0x1))))), one, zero)));
				}
				break;
			}
			default: {
				auto one = (uint64_t) ((uint64_t) (-0x1));
				auto zero = (uint64_t) ((uint64_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int64_t>) ((a).Element<int64_t>(0x0))) > ((LightRuntimeValue<int64_t>) ((b).Element<int64_t>(0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int64_t>) ((a).Element<int64_t>(0x1))) > ((LightRuntimeValue<int64_t>) ((b).Element<int64_t>(0x1))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int64_t>) ((a).Element<int64_t>(0x0))) > ((LightRuntimeValue<int64_t>) ((b).Element<int64_t>(0x0))))), one, zero)));
				}
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMGT-zero-scalar */
bool LightRecompiler::CMGT_zero_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto V = (string) (([=](auto temp_727) -> string { switch(temp_727) { case 0x3: return string("D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x3: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int64_t>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Bitcast<int64_t>())) > ((int64_t) ((int64_t) (0x0))))), (uint64_t) ((uint64_t) (-0x1)), (uint64_t) ((uint64_t) (0x0))))).Bitcast<double>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CMGT-zero-vector */
bool LightRecompiler::CMGT_zero_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_728) -> string { switch(temp_728) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				auto one = (uint8_t) ((uint8_t) (0xFF));
				auto zero = (uint8_t) ((uint8_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x0))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x1))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x2))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x3))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x4))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x5))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x6))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x7))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x8))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x9))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xA))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xB))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xC))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xD))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xE))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0xF))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x0))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x1))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x2))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x3))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x4))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x5))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x6))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (Ternary<bool, uint8_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int8_t>) ((a).Element<int8_t>(0x7))) > ((int8_t) ((int8_t) (0x0))))), one, zero)));
				}
				break;
			}
			case 0x1: {
				auto one = (uint16_t) ((uint16_t) (0xFFFF));
				auto zero = (uint16_t) ((uint16_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x0))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x1))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x2))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x3))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x4))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x5))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x6))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x7))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x0))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x1))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x2))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (Ternary<bool, uint16_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int16_t>) ((a).Element<int16_t>(0x3))) > ((int16_t) ((int16_t) (0x0))))), one, zero)));
				}
				break;
			}
			case 0x2: {
				auto one = (uint32_t) ((uint32_t) (0xFFFFFFFF));
				auto zero = (uint32_t) ((uint32_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x0))) > ((int32_t) ((int32_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x1))) > ((int32_t) ((int32_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x2))) > ((int32_t) ((int32_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x3))) > ((int32_t) ((int32_t) (0x0))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x0))) > ((int32_t) ((int32_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int32_t>) ((a).Element<int32_t>(0x1))) > ((int32_t) ((int32_t) (0x0))))), one, zero)));
				}
				break;
			}
			default: {
				auto one = (uint64_t) ((uint64_t) (-0x1));
				auto zero = (uint64_t) ((uint64_t) (0x0));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int64_t>) ((a).Element<int64_t>(0x0))) > ((int64_t) ((int64_t) (0x0))))), one, zero)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int64_t>) ((a).Element<int64_t>(0x1))) > ((int64_t) ((int64_t) (0x0))))), one, zero)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<int64_t>) ((a).Element<int64_t>(0x0))) > ((int64_t) ((int64_t) (0x0))))), one, zero)));
				}
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* CNT */
bool LightRecompiler::CNT(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_729) -> string { switch(temp_729) { case 0x0: return string("8B"); case 0x1: return string("16B"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (Call<Vector128<float>, Vector128<float>, long>(VectorCountBits, (LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]), (int64_t) (([=](auto temp_730) -> int64_t { switch(temp_730) { case 0x0: return 0x8; default: return 0x10; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))))));
		return true;
	}
unimplemented:
	return false;
}

/* CSEL */
bool LightRecompiler::CSEL(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_731) -> string { switch(temp_731) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((LightRuntimeValue<bool>) (([=](auto temp_732) -> LightRuntimeValue<bool> { switch(temp_732) { case 0x0: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR)); case 0x2: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_NR)); case 0x3: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_VR)); case 0x4: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((uint8_t) ((cond) >> (uint) (0x1))))).Store();
		LightLabel temp_733 = DefineLabel(), temp_735 = DefineLabel(), temp_734 = DefineLabel();
		BranchIf((LightRuntimeValue<bool>) (((uint8_t) ((((uint8_t) ((uint8_t) ((((uint64_t) (cond)) & ((uint64_t) (0x1)))))) & ((uint8_t) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((LightRuntimeValue<bool>) (!(result))) : (result)), temp_733, temp_735);
		Label(temp_733);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]());
		}
		Branch(temp_734);
		Label(temp_735);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]());
		}
		Branch(temp_734);
		Label(temp_734);
		return true;
	}
unimplemented:
	return false;
}

/* CSINC */
bool LightRecompiler::CSINC(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_736) -> string { switch(temp_736) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((LightRuntimeValue<bool>) (([=](auto temp_737) -> LightRuntimeValue<bool> { switch(temp_737) { case 0x0: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR)); case 0x2: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_NR)); case 0x3: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_VR)); case 0x4: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((uint8_t) ((cond) >> (uint) (0x1))))).Store();
		LightLabel temp_738 = DefineLabel(), temp_740 = DefineLabel(), temp_739 = DefineLabel();
		BranchIf((LightRuntimeValue<bool>) (((uint8_t) ((((uint8_t) ((uint8_t) ((((uint64_t) (cond)) & ((uint64_t) (0x1)))))) & ((uint8_t) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((LightRuntimeValue<bool>) (!(result))) : (result)), temp_738, temp_740);
		Label(temp_738);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]());
		}
		Branch(temp_739);
		Label(temp_740);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((uint32_t) ((uint32_t) (0x1))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x1)));
		}
		Branch(temp_739);
		Label(temp_739);
		return true;
	}
unimplemented:
	return false;
}

/* CSINV */
bool LightRecompiler::CSINV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_741) -> string { switch(temp_741) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((LightRuntimeValue<bool>) (([=](auto temp_742) -> LightRuntimeValue<bool> { switch(temp_742) { case 0x0: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR)); case 0x2: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_NR)); case 0x3: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_VR)); case 0x4: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((uint8_t) ((cond) >> (uint) (0x1))))).Store();
		LightLabel temp_743 = DefineLabel(), temp_745 = DefineLabel(), temp_744 = DefineLabel();
		BranchIf((LightRuntimeValue<bool>) (((uint8_t) ((((uint8_t) ((uint8_t) ((((uint64_t) (cond)) & ((uint64_t) (0x1)))))) & ((uint8_t) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((LightRuntimeValue<bool>) (!(result))) : (result)), temp_743, temp_745);
		Label(temp_743);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]());
		}
		Branch(temp_744);
		Label(temp_745);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (~((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (~((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())));
		}
		Branch(temp_744);
		Label(temp_744);
		return true;
	}
unimplemented:
	return false;
}

/* CSNEG */
bool LightRecompiler::CSNEG(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto condstr = (string) (([=](auto temp_746) -> string { switch(temp_746) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((LightRuntimeValue<bool>) (([=](auto temp_747) -> LightRuntimeValue<bool> { switch(temp_747) { case 0x0: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR)); case 0x2: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_NR)); case 0x3: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_VR)); case 0x4: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((uint8_t) ((cond) >> (uint) (0x1))))).Store();
		LightLabel temp_748 = DefineLabel(), temp_750 = DefineLabel(), temp_749 = DefineLabel();
		BranchIf((LightRuntimeValue<bool>) (((uint8_t) ((((uint8_t) ((uint8_t) ((((uint64_t) (cond)) & ((uint64_t) (0x1)))))) & ((uint8_t) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((LightRuntimeValue<bool>) (!(result))) : (result)), temp_748, temp_750);
		Label(temp_748);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]());
		}
		Branch(temp_749);
		Label(temp_750);
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (-((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())))))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (-((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))))));
		}
		Branch(temp_749);
		Label(temp_749);
		return true;
	}
unimplemented:
	return false;
}

/* DMB */
bool LightRecompiler::DMB(uint inst, ulong pc) {
	{
		auto m = (inst >> 8) & 0xFU;
		auto option = (string) (([=](auto temp_751) -> string { switch(temp_751) { case 0xF: return string("SY"); case 0xE: return string("ST"); case 0xD: return string("LD"); case 0xB: return string("ISH"); case 0xA: return string("ISHST"); case 0x9: return string("ISHLD"); case 0x7: return string("NSH"); case 0x6: return string("NSHST"); case 0x5: return string("NSHLD"); case 0x3: return string("OSH"); case 0x2: return string("OSHST"); default: return string("OSHLD"); } })(m));
		return true;
	}
unimplemented:
	return false;
}

/* DSB */
bool LightRecompiler::DSB(uint inst, ulong pc) {
	{
		auto crm = (inst >> 8) & 0xFU;
		auto option = (string) (([=](auto temp_752) -> string { switch(temp_752) { case 0xF: return string("SY"); case 0xE: return string("ST"); case 0xD: return string("LD"); case 0xB: return string("ISH"); case 0xA: return string("ISHST"); case 0x9: return string("ISHLD"); case 0x7: return string("NSH"); case 0x6: return string("NSHST"); case 0x5: return string("NSHLD"); case 0x3: return string("OSH"); case 0x2: return string("OSHST"); default: return string("OSHLD"); } })(crm));
		return true;
	}
unimplemented:
	return false;
}

/* DUP-element-scalar */
bool LightRecompiler::DUP_element_scalar(uint inst, ulong pc) {
	{
		auto imm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = string("");
		auto index = 0x0;
		auto size = 0x0;
		if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0xF))))) == (0x0)) ? 1U : 0U)) != 0) {
			throw "Not implemented";
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
				T = string("B");
				index = (uint8_t) ((imm) >> (uint) (0x1));
				size = 0x1;
			} else {
				if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x3))))) == (0x2)) ? 1U : 0U)) != 0) {
					T = string("H");
					index = (uint8_t) ((imm) >> (uint) (0x2));
					size = 0x2;
				} else {
					if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x7))))) == (0x4)) ? 1U : 0U)) != 0) {
						T = string("S");
						index = (uint8_t) ((imm) >> (uint) (0x3));
						size = 0x4;
					} else {
						T = string("D");
						index = (uint8_t) ((imm) >> (uint) (0x4));
						size = 0x8;
					}
				}
			}
		}
		auto sv = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		switch(size) {
			case 0x1: {
				VBR[(int) (rd)] = (LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(index));
				break;
			}
			case 0x2: {
				VHR[(int) (rd)] = (LightRuntimeValue<uint16_t>) ((sv).Element<uint16_t>(index));
				break;
			}
			case 0x4: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) ((sv).Element<float>(index));
				break;
			}
			default: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) ((sv).Element<double>(index));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* DUP-element-vector */
bool LightRecompiler::DUP_element_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto imm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto Ts = string("");
		auto T = string("");
		auto index = 0x0;
		auto size = 0x0;
		if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0xF))))) == (0x0)) ? 1U : 0U)) != 0) {
			throw "Not implemented";
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
				Ts = string("B");
				T = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
				index = (uint8_t) ((imm) >> (uint) (0x1));
				size = 0x1;
			} else {
				if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x3))))) == (0x2)) ? 1U : 0U)) != 0) {
					Ts = string("H");
					T = (string) ((Q != 0) ? (string("8H")) : (string("4H")));
					index = (uint8_t) ((imm) >> (uint) (0x2));
					size = 0x2;
				} else {
					if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x7))))) == (0x4)) ? 1U : 0U)) != 0) {
						Ts = string("S");
						T = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
						index = (uint8_t) ((imm) >> (uint) (0x3));
						size = 0x4;
					} else {
						Ts = string("D");
						T = (string) ((Q != 0) ? (string("2D")) : throw "Not implemented");
						index = (uint8_t) ((imm) >> (uint) (0x4));
						size = 0x8;
					}
				}
			}
		}
		auto sv = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto tv = ((LightRuntimeValue<Vector128<float>>) (([=](auto temp_753) -> LightRuntimeValue<Vector128<float>> { switch(temp_753) { case 0x1: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(index)))).CreateVector())); case 0x2: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((sv).Element<uint16_t>(index)))).CreateVector())); case 0x4: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((sv).Element<float>(index)))).CreateVector())); default: return (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((sv).Element<double>(index)))).CreateVector()); } })(size))).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (tv) : ((LightRuntimeValue<Vector128<float>>) ((tv).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* DUP-general */
bool LightRecompiler::DUP_general(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto imm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto size = ((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0xF))))) == (0x0)) ? 1U : 0U) != 0) ? throw "Not implemented" : ((int64_t) (((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0xF))))) == (0x8)) ? 1U : 0U) != 0) ? (0x40) : (0x20)));
		auto r = (string) (((bool) (((size) == (0x40)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto T = ((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0xF))))) == (0x0)) ? 1U : 0U) != 0) ? throw "Not implemented" : ((string) (((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x1))))) == (0x1)) ? 1U : 0U) != 0) ? ((string) ((Q != 0) ? (string("16B")) : (string("8B")))) : ((string) (((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x3))))) == (0x2)) ? 1U : 0U) != 0) ? ((string) ((Q != 0) ? (string("8H")) : (string("4H")))) : ((string) (((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x7))))) == (0x4)) ? 1U : 0U) != 0) ? ((string) ((Q != 0) ? (string("4S")) : (string("2S")))) : ((string) ((Q != 0) ? (string("2D")) : throw "Not implemented"))))))));
		auto src = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x1))))) == (0x1)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (src)))).CreateVector())) : ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (src)))).CreateVector())).ZeroTop())))) : ((LightRuntimeValue<Vector128<float>>) (((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x3))))) == (0x2)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (src)))).CreateVector())) : ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (src)))).CreateVector())).ZeroTop())))) : ((LightRuntimeValue<Vector128<float>>) (((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x7))))) == (0x4)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (src)))).CreateVector())) : ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (src)))).CreateVector())).ZeroTop())))) : ((LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint64_t>) (src)).CreateVector())) : throw "Not implemented")))))));
		return true;
	}
unimplemented:
	return false;
}

/* EON-shifted-register */
bool LightRecompiler::EON_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_754) -> string { switch(temp_754) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) ^ ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (~((LightRuntimeValue<uint32_t>) (([=](auto temp_755) -> LightRuntimeValue<uint32_t> { switch(temp_755) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift)))))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) ^ ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (~((LightRuntimeValue<uint64_t>) (([=](auto temp_756) -> LightRuntimeValue<uint64_t> { switch(temp_756) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* EOR-immediate */
bool LightRecompiler::EOR_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto up = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (uint64_t) (MakeWMask(up, imms, immr, (int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x20) : (0x40)), 0x1));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) ^ ((LightRuntimeValue<uint32_t>) ((uint32_t) ((uint32_t) (imm)))))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) ^ ((LightRuntimeValue<uint32_t>) ((uint32_t) ((uint32_t) (imm)))))));
		} else {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) ^ ((LightRuntimeValue<uint64_t>) (imm))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) ^ ((LightRuntimeValue<uint64_t>) (imm))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* EOR-shifted-register */
bool LightRecompiler::EOR_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_757) -> string { switch(temp_757) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) ^ ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=](auto temp_758) -> LightRuntimeValue<uint32_t> { switch(temp_758) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift)))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) ^ ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (([=](auto temp_759) -> LightRuntimeValue<uint64_t> { switch(temp_759) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* EOR-vector */
bool LightRecompiler::EOR_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
		auto v = ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]))) ^ ((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)]))))))).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((LightRuntimeValue<Vector128<float>>) ((v).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* EXT */
bool LightRecompiler::EXT(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto index = (inst >> 11) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (Call<Vector128<float>, Vector128<float>, Vector128<float>, uint, uint>(VectorExtract, (LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]), (LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)]), Q, index));
		return true;
	}
unimplemented:
	return false;
}

/* EXTR */
bool LightRecompiler::EXTR(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto o = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto lsb = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))) << ((uint64_t) (((uint64_t) (int64_t) (0x20)) - ((uint64_t) (uint8_t) (lsb))))))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (lsb)))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())) << ((uint64_t) (((uint64_t) (int64_t) (0x40)) - ((uint64_t) (uint8_t) (lsb))))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (lsb))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FABD-scalar */
bool LightRecompiler::FABD_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_760) -> string { switch(temp_760) { case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))) - ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rm)]))))).Abs());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))) - ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rm)]))))).Abs());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FABS-scalar */
bool LightRecompiler::FABS_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_761) -> string { switch(temp_761) { case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Abs());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Abs());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FABS-vector */
bool LightRecompiler::FABS_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_762) -> string { switch(temp_762) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				auto a = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto b = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((float) ((float) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) ((a).Abs()));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) ((b).Abs()));
				break;
			}
			case 0x1: {
				auto a = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto b = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto c = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x2))).Store();
				auto d = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x3))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((float) ((float) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) ((a).Abs()));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) ((b).Abs()));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<float>) ((c).Abs()));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<float>) ((d).Abs()));
				break;
			}
			case 0x3: {
				auto a = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0))).Store();
				auto b = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<double>) ((double) ((double) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<double>) ((a).Abs()));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<double>) ((b).Abs()));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FADD-scalar */
bool LightRecompiler::FADD_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_763) -> string { switch(temp_763) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x3: {
				VHR[(int) (rd)] = (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (VHR[(int) (rn)]))) + ((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (VHR[(int) (rm)]))))));
				break;
			}
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))) + ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))) + ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FADD-vector */
bool LightRecompiler::FADD_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) (([=](auto temp_764) -> string { switch(temp_764) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))).ZeroTop());
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) + (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FADDP-scalar */
bool LightRecompiler::FADDP_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("S")) : (string("D")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0)))) + ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1)))));
		} else {
			VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0)))) + ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FADDP-vector */
bool LightRecompiler::FADDP_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_765) -> string { switch(temp_765) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				auto a = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto b = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto c = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x0))).Store();
				auto d = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x1))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((float) ((float) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) (a)) + ((LightRuntimeValue<float>) (LightRuntimeValue<float>) (b))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) (c)) + ((LightRuntimeValue<float>) (LightRuntimeValue<float>) (d))));
				break;
			}
			case 0x1: {
				auto a = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto b = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto c = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x2))).Store();
				auto d = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x3))).Store();
				auto e = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x0))).Store();
				auto f = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x1))).Store();
				auto g = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x2))).Store();
				auto h = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x3))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((float) ((float) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) (a)) + ((LightRuntimeValue<float>) (LightRuntimeValue<float>) (b))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) (c)) + ((LightRuntimeValue<float>) (LightRuntimeValue<float>) (d))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) (e)) + ((LightRuntimeValue<float>) (LightRuntimeValue<float>) (f))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) (g)) + ((LightRuntimeValue<float>) (LightRuntimeValue<float>) (h))));
				break;
			}
			case 0x3: {
				auto a = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0))).Store();
				auto b = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1))).Store();
				auto c = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(0x0))).Store();
				auto d = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(0x1))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((float) ((float) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) (a)) + ((LightRuntimeValue<double>) (LightRuntimeValue<double>) (b))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) (c)) + ((LightRuntimeValue<double>) (LightRuntimeValue<double>) (d))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCCMP */
bool LightRecompiler::FCCMP(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto nzcv = (inst >> 0) & 0xFU;
		auto r = (string) (([=](auto temp_766) -> string { switch(temp_766) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		auto condstr = (string) (([=](auto temp_767) -> string { switch(temp_767) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((LightRuntimeValue<bool>) (([=](auto temp_768) -> LightRuntimeValue<bool> { switch(temp_768) { case 0x0: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR)); case 0x2: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_NR)); case 0x3: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_VR)); case 0x4: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((uint8_t) ((cond) >> (uint) (0x1))))).Store();
		LightLabel temp_769 = DefineLabel(), temp_771 = DefineLabel(), temp_770 = DefineLabel();
		BranchIf((LightRuntimeValue<bool>) (((uint8_t) ((((uint8_t) ((uint8_t) ((((uint64_t) (cond)) & ((uint64_t) (0x1)))))) & ((uint8_t) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((LightRuntimeValue<bool>) (!(result))) : (result)), temp_769, temp_771);
		Label(temp_769);
		switch(type) {
			case 0x0: {
				auto __macro_fcmp_a = ((LightRuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto __macro_fcmp_b = ((LightRuntimeValue<float>) (VSR[(int) (rm)])).Store();
				NZCVR = (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a).IsNaN()))) | ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_b).IsNaN())))))), 0x3, (LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a) == (__macro_fcmp_b))), 0x6, (LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a) < (__macro_fcmp_b))), 0x8, 0x2))))))) << (0x1C))));
				break;
			}
			case 0x1: {
				auto __macro_fcmp_a = ((LightRuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto __macro_fcmp_b = ((LightRuntimeValue<double>) (VDR[(int) (rm)])).Store();
				NZCVR = (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a).IsNaN()))) | ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_b).IsNaN())))))), 0x3, (LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a) == (__macro_fcmp_b))), 0x6, (LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a) < (__macro_fcmp_b))), 0x8, 0x2))))))) << (0x1C))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		Branch(temp_770);
		Label(temp_771);
		NZCVR = (uint64_t) (((uint64_t) ((uint64_t) (nzcv))) << (uint) (0x1C));
		Branch(temp_770);
		Label(temp_770);
		return true;
	}
unimplemented:
	return false;
}

/* FCMxx-register-vector */
bool LightRecompiler::FCMxx_register_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto U = (inst >> 29) & 0x1U;
		auto E = (inst >> 23) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ac = (inst >> 11) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto top = (string) (([=](auto temp_772) -> string { switch(temp_772) { case 0x0: return string("EQ"); case 0x2: return string("GE"); case 0x3: return string("GE"); case 0x6: return string("GT"); case 0x7: return string("GT"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (ac)) << 0)) | ((uint8_t) (((uint8_t) (U)) << 1)))) | ((uint8_t) (((uint8_t) (E)) << 2))))));
		auto t = (string) (([=](auto temp_773) -> string { switch(temp_773) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				auto a1 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto a2 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto b1 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x0))).Store();
				auto b2 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x1))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (([=](auto temp_774) -> LightRuntimeValue<float> { switch(temp_774) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a1) == (b1))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a1) >= (b1))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x3: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a1).Abs())) >= ((LightRuntimeValue<float>) ((b1).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x6: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a1) > (b1))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x7: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a1).Abs())) > ((LightRuntimeValue<float>) ((b1).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (ac)) << 0)) | ((uint8_t) (((uint8_t) (U)) << 1)))) | ((uint8_t) (((uint8_t) (E)) << 2)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (([=](auto temp_775) -> LightRuntimeValue<float> { switch(temp_775) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a2) == (b2))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a2) >= (b2))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x3: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a2).Abs())) >= ((LightRuntimeValue<float>) ((b2).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x6: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a2) > (b2))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x7: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a2).Abs())) > ((LightRuntimeValue<float>) ((b2).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (ac)) << 0)) | ((uint8_t) (((uint8_t) (U)) << 1)))) | ((uint8_t) (((uint8_t) (E)) << 2)))))));
				break;
			}
			case 0x1: {
				auto a1 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto a2 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto a3 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x2))).Store();
				auto a4 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x3))).Store();
				auto b1 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x0))).Store();
				auto b2 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x1))).Store();
				auto b3 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x2))).Store();
				auto b4 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(0x3))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (([=](auto temp_776) -> LightRuntimeValue<float> { switch(temp_776) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a1) == (b1))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a1) >= (b1))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x3: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a1).Abs())) >= ((LightRuntimeValue<float>) ((b1).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x6: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a1) > (b1))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x7: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a1).Abs())) > ((LightRuntimeValue<float>) ((b1).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (ac)) << 0)) | ((uint8_t) (((uint8_t) (U)) << 1)))) | ((uint8_t) (((uint8_t) (E)) << 2)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (([=](auto temp_777) -> LightRuntimeValue<float> { switch(temp_777) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a2) == (b2))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a2) >= (b2))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x3: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a2).Abs())) >= ((LightRuntimeValue<float>) ((b2).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x6: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a2) > (b2))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x7: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a2).Abs())) > ((LightRuntimeValue<float>) ((b2).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (ac)) << 0)) | ((uint8_t) (((uint8_t) (U)) << 1)))) | ((uint8_t) (((uint8_t) (E)) << 2)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<float>) (([=](auto temp_778) -> LightRuntimeValue<float> { switch(temp_778) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a3) == (b3))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a3) >= (b3))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x3: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a3).Abs())) >= ((LightRuntimeValue<float>) ((b3).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x6: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a3) > (b3))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x7: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a3).Abs())) > ((LightRuntimeValue<float>) ((b3).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (ac)) << 0)) | ((uint8_t) (((uint8_t) (U)) << 1)))) | ((uint8_t) (((uint8_t) (E)) << 2)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<float>) (([=](auto temp_779) -> LightRuntimeValue<float> { switch(temp_779) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a4) == (b4))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a4) >= (b4))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x3: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a4).Abs())) >= ((LightRuntimeValue<float>) ((b4).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x6: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a4) > (b4))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x7: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) ((a4).Abs())) > ((LightRuntimeValue<float>) ((b4).Abs())))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (ac)) << 0)) | ((uint8_t) (((uint8_t) (U)) << 1)))) | ((uint8_t) (((uint8_t) (E)) << 2)))))));
				break;
			}
			case 0x3: {
				auto a1 = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0))).Store();
				auto a2 = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1))).Store();
				auto b1 = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(0x0))).Store();
				auto b2 = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(0x1))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<double>) (([=](auto temp_780) -> LightRuntimeValue<double> { switch(temp_780) { case 0x0: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a1) == (b1))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x2: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a1) >= (b1))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x3: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<double>) ((a1).Abs())) >= ((LightRuntimeValue<double>) ((b1).Abs())))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x6: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a1) > (b1))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x7: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<double>) ((a1).Abs())) > ((LightRuntimeValue<double>) ((b1).Abs())))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (ac)) << 0)) | ((uint8_t) (((uint8_t) (U)) << 1)))) | ((uint8_t) (((uint8_t) (E)) << 2)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<double>) (([=](auto temp_781) -> LightRuntimeValue<double> { switch(temp_781) { case 0x0: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a2) == (b2))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x2: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a2) >= (b2))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x3: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<double>) ((a2).Abs())) >= ((LightRuntimeValue<double>) ((b2).Abs())))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x6: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a2) > (b2))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x7: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<double>) ((a2).Abs())) > ((LightRuntimeValue<double>) ((b2).Abs())))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (ac)) << 0)) | ((uint8_t) (((uint8_t) (U)) << 1)))) | ((uint8_t) (((uint8_t) (E)) << 2)))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCMxx-zero-vector */
bool LightRecompiler::FCMxx_zero_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto U = (inst >> 29) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto op = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto top = (string) (([=](auto temp_782) -> string { switch(temp_782) { case 0x0: return string("GT"); case 0x1: return string("GE"); case 0x2: return string("EQ"); default: return string("LE"); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (U)) << 0)) | ((uint8_t) (((uint8_t) (op)) << 1))))));
		auto t = (string) (([=](auto temp_783) -> string { switch(temp_783) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				auto v1 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto v2 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (([=](auto temp_784) -> LightRuntimeValue<float> { switch(temp_784) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) > ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x1: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) >= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) == ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: return (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) <= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (U)) << 0)) | ((uint8_t) (((uint8_t) (op)) << 1)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (([=](auto temp_785) -> LightRuntimeValue<float> { switch(temp_785) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) > ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x1: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) >= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) == ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: return (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) <= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (U)) << 0)) | ((uint8_t) (((uint8_t) (op)) << 1)))))));
				break;
			}
			case 0x1: {
				auto v1 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto v2 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto v3 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x2))).Store();
				auto v4 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x3))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (([=](auto temp_786) -> LightRuntimeValue<float> { switch(temp_786) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) > ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x1: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) >= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) == ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: return (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) <= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (U)) << 0)) | ((uint8_t) (((uint8_t) (op)) << 1)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (([=](auto temp_787) -> LightRuntimeValue<float> { switch(temp_787) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) > ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x1: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) >= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) == ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: return (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) <= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (U)) << 0)) | ((uint8_t) (((uint8_t) (op)) << 1)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<float>) (([=](auto temp_788) -> LightRuntimeValue<float> { switch(temp_788) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v3) > ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x1: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v3) >= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v3) == ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: return (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v3) <= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (U)) << 0)) | ((uint8_t) (((uint8_t) (op)) << 1)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<float>) (([=](auto temp_789) -> LightRuntimeValue<float> { switch(temp_789) { case 0x0: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v4) > ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x1: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v4) >= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); case 0x2: return (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v4) == ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0))))))); default: return (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v4) <= ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (U)) << 0)) | ((uint8_t) (((uint8_t) (op)) << 1)))))));
				break;
			}
			case 0x3: {
				auto v1 = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0))).Store();
				auto v2 = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<double>) (([=](auto temp_790) -> LightRuntimeValue<double> { switch(temp_790) { case 0x0: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) > ((double) ((double) (0x0))))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x1: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) >= ((double) ((double) (0x0))))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x2: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) == ((double) ((double) (0x0))))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); default: return (LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) <= ((double) ((double) (0x0))))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (U)) << 0)) | ((uint8_t) (((uint8_t) (op)) << 1)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<double>) (([=](auto temp_791) -> LightRuntimeValue<double> { switch(temp_791) { case 0x0: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) > ((double) ((double) (0x0))))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x1: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) >= ((double) ((double) (0x0))))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); case 0x2: return (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) == ((double) ((double) (0x0))))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0))))))); default: return (LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) <= ((double) ((double) (0x0))))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (U)) << 0)) | ((uint8_t) (((uint8_t) (op)) << 1)))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCMLT-zero-vector */
bool LightRecompiler::FCMLT_zero_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_792) -> string { switch(temp_792) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				auto v1 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto v2 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) < ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) < ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))));
				break;
			}
			case 0x1: {
				auto v1 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x0))).Store();
				auto v2 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x1))).Store();
				auto v3 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x2))).Store();
				auto v4 = ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(0x3))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) < ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) < ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v3) < ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v4) < ((float) ((float) (0x0))))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (-0x1)))), (float) (Bitcast<int32_t, float>((int32_t) ((int32_t) (0x0)))))));
				break;
			}
			case 0x3: {
				auto v1 = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x0))).Store();
				auto v2 = ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(0x1))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v1) < ((double) ((double) (0x0))))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0)))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((v2) < ((double) ((double) (0x0))))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (-0x1)))), (double) (Bitcast<int64_t, double>((int64_t) ((int64_t) (0x0)))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCMP */
bool LightRecompiler::FCMP(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto opc = (inst >> 3) & 0x1U;
		auto r = (string) (([=](auto temp_793) -> string { switch(temp_793) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		auto zero = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("/0")) : (string("")));
		switch(type) {
			case 0x0: {
				auto __macro_fcmp_a = ((LightRuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto __macro_fcmp_b = ((LightRuntimeValue<float>) (((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0 ? ((float) ((float) (0x0))) : ((LightRuntimeValue<float>) (VSR[(int) (rm)])))).Store();
				NZCVR = (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a).IsNaN()))) | ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_b).IsNaN())))))), 0x3, (LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a) == (__macro_fcmp_b))), 0x6, (LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a) < (__macro_fcmp_b))), 0x8, 0x2))))))) << (0x1C))));
				break;
			}
			case 0x1: {
				auto __macro_fcmp_a = ((LightRuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto __macro_fcmp_b = ((LightRuntimeValue<double>) (((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0 ? ((double) ((double) (0x0))) : ((LightRuntimeValue<double>) (VDR[(int) (rm)])))).Store();
				NZCVR = (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a).IsNaN()))) | ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_b).IsNaN())))))), 0x3, (LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a) == (__macro_fcmp_b))), 0x6, (LightRuntimeValue<int64_t>) (Ternary<bool, int64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((__macro_fcmp_a) < (__macro_fcmp_b))), 0x8, 0x2))))))) << (0x1C))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCSEL */
bool LightRecompiler::FCSEL(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto cond = (inst >> 12) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_794) -> string { switch(temp_794) { case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		auto condstr = (string) (([=](auto temp_795) -> string { switch(temp_795) { case 0x0: return string("EQ"); case 0x1: return string("NE"); case 0x2: return string("CS"); case 0x3: return string("CC"); case 0x4: return string("MI"); case 0x5: return string("PL"); case 0x6: return string("VS"); case 0x7: return string("VC"); case 0x8: return string("HI"); case 0x9: return string("LS"); case 0xA: return string("GE"); case 0xB: return string("LT"); case 0xC: return string("GT"); case 0xD: return string("LE"); default: return string("AL"); } })(cond));
		auto result = ((LightRuntimeValue<bool>) (([=](auto temp_796) -> LightRuntimeValue<bool> { switch(temp_796) { case 0x0: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_ZR)); case 0x1: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR)); case 0x2: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_NR)); case 0x3: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_VR)); case 0x4: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (NZCV_CR))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); case 0x5: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR)))); case 0x6: return (LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<bool>) (NZCV_NR)) == ((LightRuntimeValue<bool>) (NZCV_VR))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (!((LightRuntimeValue<bool>) (NZCV_ZR)))))))); default: return 0x1; } })((uint8_t) ((cond) >> (uint) (0x1))))).Store();
		LightLabel temp_797 = DefineLabel(), temp_799 = DefineLabel(), temp_798 = DefineLabel();
		BranchIf((LightRuntimeValue<bool>) (((uint8_t) ((((uint8_t) ((uint8_t) ((((uint64_t) (cond)) & ((uint64_t) (0x1)))))) & ((uint8_t) ((bool) (((cond) != (0xF)) ? 1U : 0U)))))) != 0 ? ((LightRuntimeValue<bool>) (!(result))) : (result)), temp_797, temp_799);
		Label(temp_797);
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (VSR[(int) (rn)]);
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (VDR[(int) (rn)]);
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		Branch(temp_798);
		Label(temp_799);
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (VSR[(int) (rm)]);
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (VDR[(int) (rm)]);
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		Branch(temp_798);
		Label(temp_798);
		return true;
	}
unimplemented:
	return false;
}

/* FCVT */
bool LightRecompiler::FCVT(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto opc = (inst >> 15) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r1 = string("");
		auto r2 = string("");
		auto tf = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (opc)) << 0)) | ((uint8_t) (((uint8_t) (type)) << 2))));
		switch(tf) {
			case 0xC: {
				r1 = string("S");
				r2 = string("H");
				break;
			}
			case 0xD: {
				r1 = string("D");
				r2 = string("H");
				break;
			}
			case 0x3: {
				r1 = string("H");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("D");
				r2 = string("S");
				break;
			}
			case 0x7: {
				r1 = string("H");
				r2 = string("D");
				break;
			}
			case 0x4: {
				r1 = string("S");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(tf) {
			case 0xC: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<uint16_t>) (VHR[(int) (rn)])));
				break;
			}
			case 0xD: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<uint16_t>) (VHR[(int) (rn)])));
				break;
			}
			case 0x3: {
				VHR[(int) (rd)] = (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<float>) (VSR[(int) (rn)])));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<float>) (VSR[(int) (rn)])));
				break;
			}
			case 0x7: {
				VHR[(int) (rd)] = (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<double>) (VDR[(int) (rn)])));
				break;
			}
			case 0x4: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<double>) (VDR[(int) (rn)])));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTAS-scalar-integer */
bool LightRecompiler::FCVTAS_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])) >= (0x0))), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Ceil()), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Floor())))))).Bitcast<uint32_t>()));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])) >= (0x0))), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Ceil()), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Floor())))))).Bitcast<uint64_t>());
				break;
			}
			case 0x1: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])) >= (0x0))), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Ceil()), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Floor())))))).Bitcast<uint32_t>()));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])) >= (0x0))), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Ceil()), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Floor())))))).Bitcast<uint64_t>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTAU-scalar-integer */
bool LightRecompiler::FCVTAU_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])) >= (0x0))), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Ceil()), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Floor()))))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])) >= (0x0))), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Ceil()), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Floor())))));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])) >= (0x0))), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Ceil()), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Floor()))))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])) >= (0x0))), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Ceil()), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Floor())))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTL[2] */
bool LightRecompiler::FCVTL_2_(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto o2 = (string) ((Q != 0) ? (string("2")) : (string("")));
		auto ta = (string) ((size != 0) ? (string("2D")) : (string("4S")));
		auto tb = (string) (([=](auto temp_800) -> string { switch(temp_800) { case 0x0: return string("4H"); case 0x1: return string("8H"); case 0x2: return string("2S"); default: return string("4S"); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto n = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<float>) ((n).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<float>) ((n).Element<float>(0x1)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<float>) ((n).Element<float>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<float>) ((n).Element<float>(0x3)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTMS-scalar-integer */
bool LightRecompiler::FCVTMS_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Floor())))).Bitcast<uint32_t>()));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Floor())))).Bitcast<uint64_t>());
				break;
			}
			case 0x1: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Floor())))).Bitcast<uint32_t>()));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Floor())))).Bitcast<uint64_t>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTMU-scalar-integer */
bool LightRecompiler::FCVTMU_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Floor()))))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Floor())))));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Floor()))))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Floor())))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTN */
bool LightRecompiler::FCVTN(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto Ta = string("");
		auto Tb = string("");
		switch(size) {
			case 0x0: {
				Ta = string("4S");
				Tb = string("4H");
				break;
			}
			case 0x1: {
				Ta = string("2D");
				Tb = string("2S");
				break;
			}
		}
		auto sv = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<float>) ((sv).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<float>) ((sv).Element<float>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<float>) ((sv).Element<float>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<float>) ((sv).Element<float>(0x3)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<double>) ((sv).Element<double>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<double>) ((sv).Element<double>(0x1)))));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTN2 */
bool LightRecompiler::FCVTN2(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto Ta = string("");
		auto Tb = string("");
		switch(size) {
			case 0x0: {
				Ta = string("4S");
				Tb = string("8H");
				break;
			}
			case 0x1: {
				Ta = string("2D");
				Tb = string("4S");
				break;
			}
		}
		auto sv = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		switch(size) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<float>) ((sv).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<float>) ((sv).Element<float>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<float>) ((sv).Element<float>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<float>) ((sv).Element<float>(0x3)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<double>) ((sv).Element<double>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<double>) ((sv).Element<double>(0x1)))));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTPS-scalar-integer */
bool LightRecompiler::FCVTPS_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Ceil()))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Ceil())));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Ceil()))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Ceil())));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTPU-scalar-integer */
bool LightRecompiler::FCVTPU_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Ceil()))))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Ceil())))));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Ceil()))))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Ceil())))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTZS-scalar-fixedpoint */
bool LightRecompiler::FCVTZS_scalar_fixedpoint(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto scale = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto fbits = (uint64_t) (((uint64_t) (int64_t) (0x40)) - ((uint64_t) (uint8_t) (scale)));
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (([=](auto temp_801) -> string { switch(temp_801) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))))) {
			case 0x0: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Call<uint, float, int>(FloatToFixed32, (LightRuntimeValue<float>) (VSR[(int) (rn)]), (LightRuntimeValue<int>) (fbits))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (Call<ulong, float, int>(FloatToFixed64, (LightRuntimeValue<float>) (VSR[(int) (rn)]), (LightRuntimeValue<int>) (fbits)));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Call<uint, double, int>(FloatToFixed32, (LightRuntimeValue<double>) (VDR[(int) (rn)]), (LightRuntimeValue<int>) (fbits))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (Call<ulong, double, int>(FloatToFixed64, (LightRuntimeValue<double>) (VDR[(int) (rn)]), (LightRuntimeValue<int>) (fbits)));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTZS-scalar-integer */
bool LightRecompiler::FCVTZS_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<float>) (VSR[(int) (rn)])))));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<double>) (VDR[(int) (rn)])))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTZU-scalar-fixedpoint */
bool LightRecompiler::FCVTZU_scalar_fixedpoint(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto scale = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto fbits = (uint64_t) (((uint64_t) (int64_t) (0x40)) - ((uint64_t) (uint8_t) (scale)));
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (([=](auto temp_802) -> string { switch(temp_802) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))))) {
			case 0x0: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Call<uint, float, int>(FloatToFixed32, (LightRuntimeValue<float>) (VSR[(int) (rn)]), (LightRuntimeValue<int>) (fbits))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (Call<ulong, float, int>(FloatToFixed64, (LightRuntimeValue<float>) (VSR[(int) (rn)]), (LightRuntimeValue<int>) (fbits)));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Call<uint, double, int>(FloatToFixed32, (LightRuntimeValue<double>) (VDR[(int) (rn)]), (LightRuntimeValue<int>) (fbits))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (Call<ulong, double, int>(FloatToFixed64, (LightRuntimeValue<double>) (VDR[(int) (rn)]), (LightRuntimeValue<int>) (fbits)));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FCVTZU-scalar-integer */
bool LightRecompiler::FCVTZU_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0x7: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x0: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0x4: {
				r1 = string("X");
				r2 = string("S");
				break;
			}
			case 0x1: {
				r1 = string("W");
				r2 = string("D");
				break;
			}
			case 0x5: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))));
				break;
			}
			case 0x4: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<float>) (VSR[(int) (rn)])));
				break;
			}
			case 0x1: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))));
				break;
			}
			case 0x5: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<double>) (VDR[(int) (rn)])));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FDIV-scalar */
bool LightRecompiler::FDIV_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_803) -> string { switch(temp_803) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x3: {
				throw "Not implemented";
				break;
			}
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))) / ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))) / ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FDIV-vector */
bool LightRecompiler::FDIV_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) (([=](auto temp_804) -> string { switch(temp_804) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) / ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))).ZeroTop());
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) / ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) / (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMADD */
bool LightRecompiler::FMADD(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_805) -> string { switch(temp_805) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x3: return string("H"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))) * ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rm)])))))) + ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (ra)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))) * ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rm)])))))) + ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (ra)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMAX-scalar */
bool LightRecompiler::FMAX_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_806) -> string { switch(temp_806) { case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				auto a = ((LightRuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto b = ((LightRuntimeValue<float>) (VSR[(int) (rm)])).Store();
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a) > (b))), a, b));
				break;
			}
			case 0x1: {
				auto a = ((LightRuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto b = ((LightRuntimeValue<double>) (VDR[(int) (rm)])).Store();
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a) > (b))), a, b));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMAXNM-scalar */
bool LightRecompiler::FMAXNM_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_807) -> string { switch(temp_807) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				auto a = ((LightRuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto b = ((LightRuntimeValue<float>) (VSR[(int) (rm)])).Store();
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a) > (b))), a, b));
				break;
			}
			case 0x1: {
				auto a = ((LightRuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto b = ((LightRuntimeValue<double>) (VDR[(int) (rm)])).Store();
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a) > (b))), a, b));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMIN-scalar */
bool LightRecompiler::FMIN_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_808) -> string { switch(temp_808) { case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				auto a = ((LightRuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto b = ((LightRuntimeValue<float>) (VSR[(int) (rm)])).Store();
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a) < (b))), a, b));
				break;
			}
			case 0x1: {
				auto a = ((LightRuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto b = ((LightRuntimeValue<double>) (VDR[(int) (rm)])).Store();
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a) < (b))), a, b));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMINNM-scalar */
bool LightRecompiler::FMINNM_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_809) -> string { switch(temp_809) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				auto a = ((LightRuntimeValue<float>) (VSR[(int) (rn)])).Store();
				auto b = ((LightRuntimeValue<float>) (VSR[(int) (rm)])).Store();
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a) < (b))), a, b));
				break;
			}
			case 0x1: {
				auto a = ((LightRuntimeValue<double>) (VDR[(int) (rn)])).Store();
				auto b = ((LightRuntimeValue<double>) (VDR[(int) (rm)])).Store();
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((a) < (b))), a, b));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMLA-by-element-vector-spdp */
bool LightRecompiler::FMLA_by_element_vector_spdp(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto sz = (inst >> 22) & 0x1U;
		auto L = (inst >> 21) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto H = (inst >> 11) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_810) -> string { switch(temp_810) { case 0x0: return string("2S"); case 0x2: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (sz)) << 0)) | ((uint8_t) (((uint8_t) (Q)) << 1))))));
		auto Ts = (string) ((sz != 0) ? (string("D")) : (string("S")));
		auto index = (uint32_t) (([=](auto temp_811) -> uint32_t { switch(temp_811) { case 0x2: return (uint32_t) ((uint32_t) (H)); case 0x3: throw "Not implemented"; default: return (uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (L)) << 0)) | ((uint8_t) (((uint8_t) (H)) << 1)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (L)) << 0)) | ((uint8_t) (((uint8_t) (sz)) << 1))))));
		if((sz) != 0) {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rd)])) + (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(index)))).CreateVector())))))));
		} else {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rd)])) + ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(index)))).CreateVector())))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMLA-vector */
bool LightRecompiler::FMLA_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto sz = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_812) -> string { switch(temp_812) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (sz)) << 1))))));
		if((sz) != 0) {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rd)])) + (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))));
		} else {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rd)])) + ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMLS-by-element-vector-spdp */
bool LightRecompiler::FMLS_by_element_vector_spdp(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto sz = (inst >> 22) & 0x1U;
		auto L = (inst >> 21) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto H = (inst >> 11) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_813) -> string { switch(temp_813) { case 0x0: return string("2S"); case 0x2: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (sz)) << 0)) | ((uint8_t) (((uint8_t) (Q)) << 1))))));
		auto Ts = (string) ((sz != 0) ? (string("D")) : (string("S")));
		auto index = (uint32_t) (([=](auto temp_814) -> uint32_t { switch(temp_814) { case 0x2: return (uint32_t) ((uint32_t) (H)); case 0x3: throw "Not implemented"; default: return (uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (L)) << 0)) | ((uint8_t) (((uint8_t) (H)) << 1)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (L)) << 0)) | ((uint8_t) (((uint8_t) (sz)) << 1))))));
		if((sz) != 0) {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rd)])) - (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(index)))).CreateVector())))))));
		} else {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rd)])) - ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(index)))).CreateVector())))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMLS-vector */
bool LightRecompiler::FMLS_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto sz = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_815) -> string { switch(temp_815) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (sz)) << 1))))));
		if((sz) != 0) {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rd)])) - (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))));
		} else {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rd)])) - ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMOV-general */
bool LightRecompiler::FMOV_general(uint inst, ulong pc) {
	{
		auto sf = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto mode = (inst >> 19) & 0x1U;
		auto ropc = (inst >> 16) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto opc = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (ropc)) << 0)) | ((uint8_t) (((uint8_t) ((uint8_t) ((uint8_t) (0x3)))) << 1))));
		auto tf = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (opc)) << 0)) | ((uint8_t) (((uint8_t) ((uint8_t) ((uint8_t) (mode)))) << 3)))) | ((uint8_t) (((uint8_t) (type)) << 5)))) | ((uint8_t) (((uint8_t) (sf)) << 7))));
		auto r1 = string("");
		auto r2 = string("");
		switch(tf) {
			case 0x66: {
				r1 = string("W");
				r2 = string("H");
				break;
			}
			case 0xE6: {
				r1 = string("X");
				r2 = string("H");
				break;
			}
			case 0x67: {
				r1 = string("H");
				r2 = string("W");
				break;
			}
			case 0x7: {
				r1 = string("S");
				r2 = string("W");
				break;
			}
			case 0x6: {
				r1 = string("W");
				r2 = string("S");
				break;
			}
			case 0xE7: {
				r1 = string("H");
				r2 = string("X");
				break;
			}
			case 0xA7: {
				r1 = string("D");
				r2 = string("X");
				break;
			}
			case 0xCF: {
				r1 = string("V");
				r2 = string("X");
				break;
			}
			case 0xCE: {
				r1 = string("X");
				r2 = string("V");
				break;
			}
			case 0xA6: {
				r1 = string("X");
				r2 = string("D");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		auto index1 = (string) (((bool) (((r1) == (string("V"))) ? 1U : 0U) != 0) ? (string(".D[1]")) : (string("")));
		auto index2 = (string) (((bool) (((r2) == (string("V"))) ? 1U : 0U) != 0) ? (string(".D[1]")) : (string("")));
		switch(tf) {
			case 0x66: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) (VHR[(int) (rn)]))));
				break;
			}
			case 0xE6: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint16_t>) (VHR[(int) (rn)])));
				break;
			}
			case 0x67: {
				VHR[(int) (rd)] = (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))));
				break;
			}
			case 0x7: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))).Bitcast<float>());
				break;
			}
			case 0x6: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Bitcast<uint32_t>()));
				break;
			}
			case 0xE7: {
				VHR[(int) (rd)] = (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())));
				break;
			}
			case 0xA7: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())).Bitcast<double>());
				break;
			}
			case 0xA6: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Bitcast<uint64_t>());
				break;
			}
			case 0xCE: {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<double>) (VDR[(int) ((uint8_t) ((((uint64_t) ((uint8_t) ((rn) << (uint) (0x1)))) | ((uint64_t) (0x1)))))])).Bitcast<uint64_t>());
				break;
			}
			case 0xCF: {
				VDR[(int) ((uint8_t) ((((uint64_t) ((uint8_t) ((rd) << (uint) (0x1)))) | ((uint64_t) (0x1)))))] = (LightRuntimeValue<double>) (((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())).Bitcast<double>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMOV-scalar-immediate */
bool LightRecompiler::FMOV_scalar_immediate(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto imm = (inst >> 13) & 0xFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_816) -> string { switch(temp_816) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		auto sv = (float) (Bitcast<uint32_t, float>((uint32_t) ((uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (((uint32_t) ((uint32_t) ((uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 0)) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 1)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 2)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 3)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 4)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 5)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 6)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 7)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 8)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 9)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 10)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 11)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 12)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 13)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 14)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 15)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 16)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 17)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) (0x0)))) << 18)))))) << 0)) | ((uint32_t) (((uint32_t) ((uint8_t) ((uint8_t) ((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0xF)))))))) << 19)))) | ((uint32_t) (((uint32_t) ((uint8_t) ((uint8_t) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x4)))) & ((uint64_t) (0x3)))))))) << 23)))) | ((uint32_t) (((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 0)) | ((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 1)))) | ((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 2)))) | ((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 3)))) | ((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 4)))))) << 25)))) | ((uint32_t) (((uint32_t) ((bool) (((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1))))) != 0 ? 0U : 1U))) << 30)))) | ((uint32_t) (((uint32_t) ((bool) ((bool) ((uint8_t) ((imm) >> (uint) (0x7)))))) << 31))))));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = sv;
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (double) (Bitcast<uint64_t, double>((uint64_t) ((uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (((uint64_t) ((uint64_t) ((uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 0)) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 1)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 2)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 3)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 4)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 5)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 6)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 7)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 8)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 9)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 10)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 11)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 12)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 13)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 14)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 15)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 16)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 17)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 18)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 19)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 20)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 21)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 22)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 23)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 24)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 25)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 26)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 27)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 28)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 29)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 30)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 31)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 32)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 33)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 34)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 35)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 36)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 37)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 38)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 39)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 40)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 41)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 42)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 43)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 44)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 45)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 46)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) (0x0)))) << 47)))))) << 0)) | ((uint64_t) (((uint64_t) ((uint8_t) ((uint8_t) ((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0xF)))))))) << 48)))) | ((uint64_t) (((uint64_t) ((uint8_t) ((uint8_t) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x4)))) & ((uint64_t) (0x3)))))))) << 52)))) | ((uint64_t) (((uint64_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 0)) | ((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 1)))) | ((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 2)))) | ((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 3)))) | ((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 4)))) | ((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 5)))) | ((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 6)))) | ((uint8_t) (((uint8_t) ((bool) ((bool) ((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1)))))))) << 7)))))) << 54)))) | ((uint64_t) (((uint64_t) ((bool) (((uint8_t) ((((uint64_t) ((uint8_t) ((imm) >> (uint) (0x6)))) & ((uint64_t) (0x1))))) != 0 ? 0U : 1U))) << 62)))) | ((uint64_t) (((uint64_t) ((bool) ((bool) ((uint8_t) ((imm) >> (uint) (0x7)))))) << 63))))));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMOV-vector-immediate-single */
bool LightRecompiler::FMOV_vector_immediate_single(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
		auto sv = (float) (Bitcast<uint32_t, float>((uint32_t) ((((uint32_t) ((uint32_t) ((uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (uint32_t) (((uint32_t) (((uint32_t) ((uint32_t) ((uint32_t) (0x0)))) << 0)) | ((uint32_t) (((uint32_t) (h)) << 19)))) | ((uint32_t) (((uint32_t) (g)) << 20)))) | ((uint32_t) (((uint32_t) (f)) << 21)))) | ((uint32_t) (((uint32_t) (e)) << 22)))) | ((uint32_t) (((uint32_t) (d)) << 23)))) | ((uint32_t) (((uint32_t) (c)) << 24)))) | ((uint32_t) (((uint32_t) (b)) << 25)))) | ((uint32_t) (((uint32_t) (b)) << 26)))) | ((uint32_t) (((uint32_t) (b)) << 27)))) | ((uint32_t) (((uint32_t) (b)) << 28)))) | ((uint32_t) (((uint32_t) (b)) << 29)))) | ((uint32_t) (((uint32_t) (b)) << 30)))) | ((uint32_t) (((uint32_t) (a)) << 31)))))) ^ ((uint32_t) ((uint32_t) (((uint32_t) ((uint32_t) (0x1))) << (uint) (0x1E))))))));
		auto avec = ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) (sv)).CreateVector())).Store();
		if((Q) != 0) {
			VR[(int) (rd)] = avec;
		} else {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((avec).ZeroTop());
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMOV-vector-immediate-double */
bool LightRecompiler::FMOV_vector_immediate_double(uint inst, ulong pc) {
	{
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto sv = (double) (Bitcast<uint64_t, double>((uint64_t) ((((uint64_t) ((uint64_t) ((uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (((uint64_t) ((uint64_t) ((uint64_t) (0x0)))) << 0)) | ((uint64_t) (((uint64_t) (h)) << 48)))) | ((uint64_t) (((uint64_t) (g)) << 49)))) | ((uint64_t) (((uint64_t) (f)) << 50)))) | ((uint64_t) (((uint64_t) (e)) << 51)))) | ((uint64_t) (((uint64_t) (d)) << 52)))) | ((uint64_t) (((uint64_t) (c)) << 53)))) | ((uint64_t) (((uint64_t) (b)) << 54)))) | ((uint64_t) (((uint64_t) (b)) << 55)))) | ((uint64_t) (((uint64_t) (b)) << 56)))) | ((uint64_t) (((uint64_t) (b)) << 57)))) | ((uint64_t) (((uint64_t) (b)) << 58)))) | ((uint64_t) (((uint64_t) (b)) << 59)))) | ((uint64_t) (((uint64_t) (b)) << 60)))) | ((uint64_t) (((uint64_t) (b)) << 61)))) | ((uint64_t) (((uint64_t) (b)) << 62)))) | ((uint64_t) (((uint64_t) (a)) << 63)))))) ^ ((uint64_t) ((uint64_t) (((uint64_t) ((uint64_t) (0x1))) << (uint) (0x3E))))))));
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<double>) (sv)).CreateVector());
		return true;
	}
unimplemented:
	return false;
}

/* FMSUB */
bool LightRecompiler::FMSUB(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_817) -> string { switch(temp_817) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x3: return string("H"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (ra)]))) - ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))) * ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rm)])))))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (ra)]))) - ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))) * ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rm)])))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMUL-by-element-scalar-spdp */
bool LightRecompiler::FMUL_by_element_scalar_spdp(uint inst, ulong pc) {
	{
		auto sz = (inst >> 22) & 0x1U;
		auto L = (inst >> 21) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto H = (inst >> 11) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto Ts = (string) ((sz != 0) ? (string("D")) : (string("S")));
		auto index = (uint32_t) (([=](auto temp_818) -> uint32_t { switch(temp_818) { case 0x2: return (uint32_t) ((uint32_t) (H)); case 0x3: throw "Not implemented"; default: return (uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (L)) << 0)) | ((uint8_t) (((uint8_t) (H)) << 1)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (L)) << 0)) | ((uint8_t) (((uint8_t) (sz)) << 1))))));
		if((sz) != 0) {
			VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))) * ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(index)))));
		} else {
			VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))) * ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(index)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMUL-by-element-vector-spdp */
bool LightRecompiler::FMUL_by_element_vector_spdp(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto sz = (inst >> 22) & 0x1U;
		auto L = (inst >> 21) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto H = (inst >> 11) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_819) -> string { switch(temp_819) { case 0x0: return string("2S"); case 0x2: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (sz)) << 0)) | ((uint8_t) (((uint8_t) (Q)) << 1))))));
		auto Ts = (string) ((sz != 0) ? (string("D")) : (string("S")));
		auto index = (uint32_t) (([=](auto temp_820) -> uint32_t { switch(temp_820) { case 0x2: return (uint32_t) ((uint32_t) (H)); case 0x3: throw "Not implemented"; default: return (uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (L)) << 0)) | ((uint8_t) (((uint8_t) (H)) << 1)))))); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (L)) << 0)) | ((uint8_t) (((uint8_t) (sz)) << 1))))));
		if((sz) != 0) {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<double>(index)))).CreateVector()))));
		} else {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<float>(index)))).CreateVector())));
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMUL-scalar */
bool LightRecompiler::FMUL_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_821) -> string { switch(temp_821) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))) * ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))) * ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FMUL-vector */
bool LightRecompiler::FMUL_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) (([=](auto temp_822) -> string { switch(temp_822) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))).ZeroTop());
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FNEG-scalar */
bool LightRecompiler::FNEG_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_823) -> string { switch(temp_823) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) (VSR[(int) (rn)])));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (-((LightRuntimeValue<double>) (VDR[(int) (rn)])));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FNEG-vector */
bool LightRecompiler::FNEG_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_824) -> string { switch(temp_824) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto sv = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((sv).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((sv).Element<float>(0x1)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((sv).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((sv).Element<float>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((sv).Element<float>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((sv).Element<float>(0x3)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<double>) (-((LightRuntimeValue<double>) ((sv).Element<double>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<double>) (-((LightRuntimeValue<double>) ((sv).Element<double>(0x1)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FNMADD */
bool LightRecompiler::FNMADD(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_825) -> string { switch(temp_825) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (-((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))) * ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rm)])))))))) - ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (ra)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (-((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))) * ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rm)])))))))) - ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (ra)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FNMSUB */
bool LightRecompiler::FNMSUB(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_826) -> string { switch(temp_826) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))) * ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rm)])))))) - ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (ra)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))) * ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rm)])))))) - ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (ra)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FNMUL-scalar */
bool LightRecompiler::FNMUL_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_827) -> string { switch(temp_827) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))) * ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rm)]))))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (-((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))) * ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rm)]))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTA-scalar */
bool LightRecompiler::FRINTA_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_828) -> string { switch(temp_828) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])) < (0x0))), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfDown()), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfUp())));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])) < (0x0))), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfDown()), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfUp())));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTI-scalar */
bool LightRecompiler::FRINTI_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_829) -> string { switch(temp_829) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Round());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Round());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTM-scalar */
bool LightRecompiler::FRINTM_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_830) -> string { switch(temp_830) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfDown());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfDown());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTP-scalar */
bool LightRecompiler::FRINTP_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_831) -> string { switch(temp_831) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfUp());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfUp());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTX-scalar */
bool LightRecompiler::FRINTX_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_832) -> string { switch(temp_832) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Round());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Round());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRINTZ-scalar */
bool LightRecompiler::FRINTZ_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_833) -> string { switch(temp_833) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (Ternary<bool, float>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])) < (0x0))), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfUp()), (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).RoundHalfDown())));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (Ternary<bool, double>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])) < (0x0))), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfUp()), (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).RoundHalfDown())));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FRSQRTE-vector */
bool LightRecompiler::FRSQRTE_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_834) -> string { switch(temp_834) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (([=](auto temp_835) -> LightRuntimeValue<Vector128<float>> { switch(temp_835) { case 0x0: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (Call<Vector128<float>, Vector128<float>, int, int>(VectorFrsqrte, (LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]), 0x20, 0x2))); case 0x1: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (Call<Vector128<float>, Vector128<float>, int, int>(VectorFrsqrte, (LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]), 0x20, 0x4))); case 0x3: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (Call<Vector128<float>, Vector128<float>, int, int>(VectorFrsqrte, (LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]), 0x40, 0x2))); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		return true;
	}
unimplemented:
	return false;
}

/* FRSQRTS-vector */
bool LightRecompiler::FRSQRTS_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_836) -> string { switch(temp_836) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((float) ((float) (0x3)))).CreateVector())) - ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))) / ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((float) ((float) (0x2)))).CreateVector())))).ZeroTop());
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((float) ((float) (0x3)))).CreateVector())) - ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))) / ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((float) ((float) (0x2)))).CreateVector())));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<double>) ((double) ((double) (0x3)))).CreateVector())) - (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))))) / (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<double>) ((double) ((double) (0x2)))).CreateVector()))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FSQRT-scalar */
bool LightRecompiler::FSQRT_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_837) -> string { switch(temp_837) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<double>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))).Sqrt());
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))).Sqrt());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FSUB-scalar */
bool LightRecompiler::FSUB_scalar(uint inst, ulong pc) {
	{
		auto type = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_838) -> string { switch(temp_838) { case 0x3: return string("H"); case 0x0: return string("S"); case 0x1: return string("D"); default: throw "Not implemented"; } })(type));
		switch(type) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rn)]))) - ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) (VSR[(int) (rm)]))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rn)]))) - ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) (VDR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* FSUB-vector */
bool LightRecompiler::FSUB_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = (string) (([=](auto temp_839) -> string { switch(temp_839) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) - ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))).ZeroTop());
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) - ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) - (LightRuntimeValue<Vector128<double>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)]))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* INS-general */
bool LightRecompiler::INS_general(uint inst, ulong pc) {
	{
		auto imm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = string("");
		auto index = (uint32_t) ((uint32_t) (0x0));
		auto r = string("W");
		if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
			ts = string("B");
			index = (uint8_t) ((imm) >> (uint) (0x1));
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x2))))) == (0x2)) ? 1U : 0U)) != 0) {
				ts = string("H");
				index = (uint8_t) ((imm) >> (uint) (0x2));
			} else {
				if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x4))))) == (0x4)) ? 1U : 0U)) != 0) {
					ts = string("S");
					index = (uint8_t) ((imm) >> (uint) (0x3));
				} else {
					ts = string("D");
					index = (uint8_t) ((imm) >> (uint) (0x4));
					r = string("X");
				}
			}
		}
		if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(index, (LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))));
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x2))))) == (0x2)) ? 1U : 0U)) != 0) {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(index, (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))));
			} else {
				if(((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x4))))) == (0x4)) ? 1U : 0U)) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(index, (LightRuntimeValue<float>) (((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))).Bitcast<float>()));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(index, (LightRuntimeValue<double>) (((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())).Bitcast<double>()));
				}
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* INS-vector */
bool LightRecompiler::INS_vector(uint inst, ulong pc) {
	{
		auto imm5 = (inst >> 16) & 0x1FU;
		auto imm4 = (inst >> 11) & 0xFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto ts = string("");
		auto index1 = (uint32_t) ((uint32_t) (0x0));
		auto index2 = (uint32_t) ((uint32_t) (0x0));
		if(((bool) ((((uint8_t) ((((uint64_t) (imm5)) & ((uint64_t) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
			ts = string("B");
			index1 = (uint8_t) ((imm5) >> (uint) (0x1));
			index2 = imm4;
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (imm5)) & ((uint64_t) (0x2))))) == (0x2)) ? 1U : 0U)) != 0) {
				ts = string("H");
				index1 = (uint8_t) ((imm5) >> (uint) (0x2));
				index2 = (uint8_t) ((imm4) >> (uint) (0x1));
			} else {
				if(((bool) ((((uint8_t) ((((uint64_t) (imm5)) & ((uint64_t) (0x4))))) == (0x4)) ? 1U : 0U)) != 0) {
					ts = string("S");
					index1 = (uint8_t) ((imm5) >> (uint) (0x3));
					index2 = (uint8_t) ((imm4) >> (uint) (0x2));
				} else {
					ts = string("D");
					index1 = (uint8_t) ((imm5) >> (uint) (0x4));
					index2 = (uint8_t) ((imm4) >> (uint) (0x3));
				}
			}
		}
		if(((bool) ((((uint8_t) ((((uint64_t) (imm5)) & ((uint64_t) (0x1))))) == (0x1)) ? 1U : 0U)) != 0) {
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(index1, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint8_t>(index2)));
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (imm5)) & ((uint64_t) (0x2))))) == (0x2)) ? 1U : 0U)) != 0) {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(index1, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint16_t>(index2)));
			} else {
				if(((bool) ((((uint8_t) ((((uint64_t) (imm5)) & ((uint64_t) (0x4))))) == (0x4)) ? 1U : 0U)) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(index1, (LightRuntimeValue<float>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<float>(index2)));
				} else {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(index1, (LightRuntimeValue<double>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<double>(index2)));
				}
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD1-multi-no-offset-one-register */
bool LightRecompiler::LD1_multi_no_offset_one_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_840) -> string { switch(temp_840) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x6: return string("1D"); default: return string("2D"); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x9))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xB))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xD))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xF))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			default: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD1-multi-no-offset-two-registers */
bool LightRecompiler::LD1_multi_no_offset_two_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_841) -> string { switch(temp_841) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x6: return string("1D"); default: return string("2D"); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x9))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xB))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xD))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xF))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			default: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
		}
		auto offset = (int64_t) ((Q != 0) ? (0x10) : (0x8));
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x9))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xB))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xD))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xF))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			default: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD1-multi-no-offset-three-registers */
bool LightRecompiler::LD1_multi_no_offset_three_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_842) -> string { switch(temp_842) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x6: return string("1D"); default: return string("2D"); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x9))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xB))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xD))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xF))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			default: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
		}
		auto offset = (int64_t) ((Q != 0) ? (0x10) : (0x8));
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x9))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xB))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xD))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xF))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			default: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
		}
		offset = (int64_t) ((Q != 0) ? (0x20) : (0x10));
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x9))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xB))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xD))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xF))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			default: {
				if((Q) != 0) {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD1-multi-no-offset-four-registers */
bool LightRecompiler::LD1_multi_no_offset_four_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt4 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x3))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_843) -> string { switch(temp_843) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x6: return string("1D"); default: return string("2D"); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x9))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xB))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xD))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xF))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
			default: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (0x0)))))))).value()));
				}
				break;
			}
		}
		auto offset = (int64_t) ((Q != 0) ? (0x10) : (0x8));
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x9))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xB))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xD))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xF))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			default: {
				if((Q) != 0) {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
		}
		offset = (int64_t) ((Q != 0) ? (0x20) : (0x10));
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x9))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xB))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xD))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xF))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			default: {
				if((Q) != 0) {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
		}
		offset = (int64_t) ((Q != 0) ? (0x30) : (0x18));
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x9))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xB))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xD))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xF))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x1))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x3))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x5))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x7))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xA))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xE))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x2))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x6))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0xC))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x4))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
			default: {
				if((Q) != 0) {
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x8))) + ((int64_t) (int64_t) (offset)))))))).value()));
				} else {
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (((int64_t) (int64_t) ((int64_t) (0x0))) + ((int64_t) (int64_t) (offset)))))))).value()));
				}
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD1-single-no-offset */
bool LightRecompiler::LD1_single_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto opc = (inst >> 14) & 0x3U;
		auto S = (inst >> 12) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		if(!((bool) (((opc) != (0x3)) ? 1U : 0U)))
			goto unimplemented;
		auto t = (string) (((bool) (((opc) == (0x0)) ? 1U : 0U) != 0) ? (string("B")) : ((string) (((bool) ((((bool) ((bool) (((opc) == (0x1)) ? 1U : 0U))) & ((bool) ((bool) ((((uint8_t) ((((uint64_t) (size)) & ((uint64_t) (0x1))))) == (0x0)) ? 1U : 0U))))) != 0) ? (string("H")) : ((string) (((bool) (((opc) == (0x2)) ? 1U : 0U) != 0) ? ((string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("S")) : ((string) (((bool) ((((bool) ((bool) (((size) == (0x1)) ? 1U : 0U))) & ((bool) ((bool) (((S) == (0x0)) ? 1U : 0U))))) != 0) ? (string("D")) : throw "Not implemented")))) : throw "Not implemented")))));
		auto index = (uint32_t) (([=](auto temp_844) -> uint32_t { switch(temp_844) { case 0x0: return (uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (size)) << 0)) | ((uint8_t) (((uint8_t) (S)) << 2)))) | ((uint8_t) (((uint8_t) (Q)) << 3)))))); case 0x1: return (uint32_t) (((uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (size)) << 0)) | ((uint8_t) (((uint8_t) (S)) << 2)))) | ((uint8_t) (((uint8_t) (Q)) << 3))))))) >> (uint) (0x1)); case 0x2: return (uint32_t) (((bool) ((((uint8_t) ((((uint64_t) (size)) & ((uint64_t) (0x1))))) == (0x0)) ? 1U : 0U) != 0) ? ((uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (S)) << 0)) | ((uint8_t) (((uint8_t) (Q)) << 1))))))) : (Q)); default: throw "Not implemented"; } })(opc));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		switch(opc) {
			case 0x0: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(index, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value()));
				break;
			}
			case 0x1: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(index, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value()));
				break;
			}
			case 0x2: {
				if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(index, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) (address)).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(index, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) (address)).value()));
				}
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD1R-single-no-offset */
bool LightRecompiler::LD1R_single_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_845) -> string { switch(temp_845) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x6: return string("1D"); default: return string("2D"); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto sv = ((LightRuntimeValue<Vector128<float>>) (([=](auto temp_846) -> LightRuntimeValue<Vector128<float>> { switch(temp_846) { case 0x0: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value()))).CreateVector())); case 0x1: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value()))).CreateVector())); case 0x2: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimePointer<float>) (address)).value()))).CreateVector())); default: return (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimePointer<double>) (address)).value()))).CreateVector()); } })(size))).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (sv) : ((LightRuntimeValue<Vector128<float>>) ((sv).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* LD1R-single-postindex-immediate */
bool LightRecompiler::LD1R_single_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto t = (string) (([=](auto temp_847) -> string { switch(temp_847) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x6: return string("1D"); default: return string("2D"); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto imm = (int64_t) (([=](auto temp_848) -> int64_t { switch(temp_848) { case 0x0: return 0x1; case 0x1: return 0x2; case 0x2: return 0x4; default: return 0x8; } })(size));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto sv = ((LightRuntimeValue<Vector128<float>>) (([=](auto temp_849) -> LightRuntimeValue<Vector128<float>> { switch(temp_849) { case 0x0: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value()))).CreateVector())); case 0x1: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value()))).CreateVector())); case 0x2: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimePointer<float>) (address)).value()))).CreateVector())); default: return (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimePointer<double>) (address)).value()))).CreateVector()); } })(size))).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (sv) : ((LightRuntimeValue<Vector128<float>>) ((sv).ZeroTop())));
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LD1R-single-postindex-register */
bool LightRecompiler::LD1R_single_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto t = (string) (([=](auto temp_850) -> string { switch(temp_850) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x6: return string("1D"); default: return string("2D"); } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto sv = ((LightRuntimeValue<Vector128<float>>) (([=](auto temp_851) -> LightRuntimeValue<Vector128<float>> { switch(temp_851) { case 0x0: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value()))).CreateVector())); case 0x1: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value()))).CreateVector())); case 0x2: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((LightRuntimeValue<float>) (((LightRuntimePointer<float>) (address)).value()))).CreateVector())); default: return (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<double>) ((LightRuntimeValue<double>) (((LightRuntimePointer<double>) (address)).value()))).CreateVector()); } })(size))).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (sv) : ((LightRuntimeValue<Vector128<float>>) ((sv).ZeroTop())));
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* LD2-multi-no-offset */
bool LightRecompiler::LD2_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_852) -> string { switch(temp_852) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD2-multi-postindex-immediate */
bool LightRecompiler::LD2_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto imm = (uint8_t) ((uint8_t) ((int64_t) ((Q != 0) ? (0x20) : (0x10))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_853) -> string { switch(temp_853) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LD2-multi-postindex-register */
bool LightRecompiler::LD2_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_854) -> string { switch(temp_854) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* LD3-multi-no-offset */
bool LightRecompiler::LD3_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_855) -> string { switch(temp_855) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD3-multi-postindex-immediate */
bool LightRecompiler::LD3_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto imm = (uint8_t) ((uint8_t) ((int64_t) ((Q != 0) ? (0x30) : (0x18))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_856) -> string { switch(temp_856) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LD3-multi-postindex-register */
bool LightRecompiler::LD3_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_857) -> string { switch(temp_857) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* LD4-multi-no-offset */
bool LightRecompiler::LD4_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt4 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x3))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_858) -> string { switch(temp_858) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt4)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x31)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x33)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x35)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x37)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x39)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LD4-multi-postindex-immediate */
bool LightRecompiler::LD4_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt4 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x3))))) % ((uint64_t) (int64_t) (0x20)));
		auto imm = (uint8_t) ((uint8_t) ((int64_t) ((Q != 0) ? (0x30) : (0x18))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_859) -> string { switch(temp_859) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt4)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x31)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x33)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x35)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x37)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x39)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LD4-multi-postindex-register */
bool LightRecompiler::LD4_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt4 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x3))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_860) -> string { switch(temp_860) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt3)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		VR[(int) (rt4)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x31)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x33)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x35)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x37)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x39)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3F)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value()));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value()));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x2, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x3, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value()));
				} else {
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value()));
					VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
					VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value()));
					VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
					VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value()));
				}
				break;
			}
			default: {
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x0, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value()));
				VR[(int) (rt)] = VR[(int) (rt)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value()));
				VR[(int) (rt2)] = VR[(int) (rt2)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value()));
				VR[(int) (rt3)] = VR[(int) (rt3)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value()));
				VR[(int) (rt4)] = VR[(int) (rt4)]().Insert(0x1, (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value()));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* LDAR */
bool LightRecompiler::LDAR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) (address)).value()));
		} else {
			auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) (address)).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDARB */
bool LightRecompiler::LDARB(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDARH */
bool LightRecompiler::LDARH(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDAXB */
bool LightRecompiler::LDAXB(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Exclusive32R = ((LightRuntimePointer<uint32_t>) (address)).value()));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (Exclusive64R = ((LightRuntimePointer<uint64_t>) (address)).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDAXRB */
bool LightRecompiler::LDAXRB(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint8_t>) (Exclusive8R = ((LightRuntimePointer<uint8_t>) (address)).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDAXRH */
bool LightRecompiler::LDAXRH(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint16_t>) (Exclusive16R = ((LightRuntimePointer<uint16_t>) (address)).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDP-immediate-postindex */
bool LightRecompiler::LDP_immediate_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) ((int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt1] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) (address)).value()));
			XR[(int) rt2] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value()));
		} else {
			XR[(int) rt1] = (LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) (address)).value());
			XR[(int) rt2] = (LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value());
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDP-immediate-signed-offset */
bool LightRecompiler::LDP_immediate_signed_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) ((int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt1] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) (address)).value()));
			XR[(int) rt2] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value()));
		} else {
			XR[(int) rt1] = (LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) (address)).value());
			XR[(int) rt2] = (LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDP-simd-postindex */
bool LightRecompiler::LDP_simd_postindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_861) -> string { switch(temp_861) { case 0x0: return string("S"); case 0x1: return string("D"); default: return string("Q"); } })(opc));
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) ((int64_t) (([=](auto temp_862) -> int64_t { switch(temp_862) { case 0x0: return 0x2; case 0x1: return 0x3; default: return 0x4; } })(opc))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		switch(opc) {
			case 0x0: {
				VSR[(int) (rt1)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) (address)).value());
				VSR[(int) (rt2)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value());
				break;
			}
			case 0x1: {
				VDR[(int) (rt1)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) (address)).value());
				VDR[(int) (rt2)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value());
				break;
			}
			default: {
				VR[(int) (rt1)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) (address)).value());
				VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x10))))).value());
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDP-simd-preindex */
bool LightRecompiler::LDP_simd_preindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_863) -> string { switch(temp_863) { case 0x0: return string("S"); case 0x1: return string("D"); default: return string("Q"); } })(opc));
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) ((int64_t) (([=](auto temp_864) -> int64_t { switch(temp_864) { case 0x0: return 0x2; case 0x1: return 0x3; default: return 0x4; } })(opc))));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		switch(opc) {
			case 0x0: {
				VSR[(int) (rt1)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) (address)).value());
				VSR[(int) (rt2)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value());
				break;
			}
			case 0x1: {
				VDR[(int) (rt1)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) (address)).value());
				VDR[(int) (rt2)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value());
				break;
			}
			default: {
				VR[(int) (rt1)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) (address)).value());
				VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x10))))).value());
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDP-simd-signed-offset */
bool LightRecompiler::LDP_simd_signed_offset(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_865) -> string { switch(temp_865) { case 0x0: return string("S"); case 0x1: return string("D"); default: return string("Q"); } })(opc));
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) ((int64_t) (([=](auto temp_866) -> int64_t { switch(temp_866) { case 0x0: return 0x2; case 0x1: return 0x3; default: return 0x4; } })(opc))));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		switch(opc) {
			case 0x0: {
				VSR[(int) (rt1)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) (address)).value());
				VSR[(int) (rt2)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value());
				break;
			}
			case 0x1: {
				VDR[(int) (rt1)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) (address)).value());
				VDR[(int) (rt2)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value());
				break;
			}
			default: {
				VR[(int) (rt1)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) (address)).value());
				VR[(int) (rt2)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x10))))).value());
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDPSW-immediate-signed-offset */
bool LightRecompiler::LDPSW_immediate_signed_offset(uint inst, ulong pc) {
	{
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) (0x2));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		XR[(int) rt1] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) (address)).value()), 32))));
		XR[(int) rt2] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value()), 32))));
		return true;
	}
unimplemented:
	return false;
}

/* LDR-immediate-preindex */
bool LightRecompiler::LDR_immediate_preindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) (address)).value()));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) (address)).value());
		}
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDR-immediate-postindex */
bool LightRecompiler::LDR_immediate_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value()));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value());
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDR-immediate-unsigned-offset */
bool LightRecompiler::LDR_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (uint16_t) ((rawimm) << (uint) ((int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) (imm))))).value()));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) (imm))))).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDR-literal */
bool LightRecompiler::LDR_literal(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rawimm = (inst >> 5) & 0x7FFFFU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto offset = (int64_t) (SignExt<int64_t>((uint32_t) ((uint32_t) ((uint32_t) ((rawimm) << (uint) (0x2)))), 21));
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (pc))) + ((uint64_t) (int64_t) (offset)));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) (addr)).value()));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) (addr)).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDR-simd-immediate-postindex */
bool LightRecompiler::LDR_simd_immediate_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto simm = (int64_t) (SignExt<int64_t>(imm, 9));
		auto r = (string) (([=](auto temp_867) -> string { switch(temp_867) { case 0x0: return string("B"); case 0x2: return string("H"); case 0x4: return string("S"); case 0x6: return string("D"); case 0x1: return string("Q"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (opc)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (opc)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VBR[(int) (rt)] = (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value());
				break;
			}
			case 0x2: {
				VHR[(int) (rt)] = (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value());
				break;
			}
			case 0x4: {
				VSR[(int) (rt)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) (address)).value());
				break;
			}
			case 0x6: {
				VDR[(int) (rt)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) (address)).value());
				break;
			}
			case 0x1: {
				VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) (address)).value());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDR-simd-immediate-preindex */
bool LightRecompiler::LDR_simd_immediate_preindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto simm = (int64_t) (SignExt<int64_t>(imm, 9));
		auto r = (string) (([=](auto temp_868) -> string { switch(temp_868) { case 0x0: return string("B"); case 0x2: return string("H"); case 0x4: return string("S"); case 0x6: return string("D"); case 0x1: return string("Q"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (opc)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (opc)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VBR[(int) (rt)] = (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value());
				break;
			}
			case 0x2: {
				VHR[(int) (rt)] = (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value());
				break;
			}
			case 0x4: {
				VSR[(int) (rt)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) (address)).value());
				break;
			}
			case 0x6: {
				VDR[(int) (rt)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) (address)).value());
				break;
			}
			case 0x1: {
				VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) (address)).value());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDR-simd-immediate-unsigned-offset */
bool LightRecompiler::LDR_simd_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto ropc = (inst >> 23) & 0x1U;
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto opc = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) ((bool) ((bool) (0x1)))) << 0)) | ((uint8_t) (((uint8_t) (ropc)) << 1))));
		auto m = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (opc)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r = (string) (([=](auto temp_869) -> string { switch(temp_869) { case 0x1: return string("B"); case 0x5: return string("H"); case 0x9: return string("S"); case 0xD: return string("D"); default: return string("Q"); } })(m));
		auto imm = (uint32_t) (((uint32_t) ((uint32_t) (rawimm))) << (uint) ((int64_t) (([=](auto temp_870) -> int64_t { switch(temp_870) { case 0x1: return 0x0; case 0x5: return 0x1; case 0x9: return 0x2; case 0xD: return 0x3; default: return 0x4; } })(m))));
		switch(m) {
			case 0x1: {
				VBR[(int) (rt)] = (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (imm))))).value());
				break;
			}
			case 0x5: {
				VHR[(int) (rt)] = (LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (imm))))).value());
				break;
			}
			case 0x9: {
				VSR[(int) (rt)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (imm))))).value());
				break;
			}
			case 0xD: {
				VDR[(int) (rt)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (imm))))).value());
				break;
			}
			default: {
				VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (imm))))).value());
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDR-simd-literal */
bool LightRecompiler::LDR_simd_literal(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto imm = (inst >> 5) & 0x7FFFFU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_871) -> string { switch(temp_871) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(size));
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (pc))) + ((uint64_t) (int64_t) ((int64_t) (SignExt<int64_t>((uint32_t) ((uint32_t) (((uint32_t) (((uint32_t) ((uint8_t) ((uint8_t) (0x0)))) << 0)) | ((uint32_t) (((uint32_t) (imm)) << 2)))), 21)))));
		switch(size) {
			case 0x0: {
				VSR[(int) (rt)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) (addr)).value());
				break;
			}
			case 0x1: {
				VDR[(int) (rt)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) (addr)).value());
				break;
			}
			case 0x2: {
				VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) (addr)).value());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDR-simd-register */
bool LightRecompiler::LDR_simd_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto scale = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) ((((bool) ((bool) (((size) == (0x0)) ? 1U : 0U))) & ((bool) ((bool) (((opc) == (0x1)) ? 1U : 0U))))) != 0) ? (string("Q")) : ((string) (([=](auto temp_872) -> string { switch(temp_872) { case 0x0: return string("B"); case 0x1: return string("H"); case 0x2: return string("S"); case 0x3: return string("D"); default: throw "Not implemented"; } })(size))));
		auto r2 = (string) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto extend = (string) (([=](auto temp_873) -> string { switch(temp_873) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto amount = (uint64_t) (((uint64_t) (bool) (scale)) * ((uint64_t) (int64_t) ((int64_t) (((bool) ((((bool) ((bool) (((size) == (0x0)) ? 1U : 0U))) & ((bool) ((bool) (((opc) == (0x1)) ? 1U : 0U))))) != 0) ? (0x4) : ((int64_t) (([=](auto temp_874) -> int64_t { switch(temp_874) { case 0x0: return 0x1; case 0x1: return 0x1; case 0x2: return 0x2; case 0x3: return 0x3; default: throw "Not implemented"; } })(size)))))));
		auto offset = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (([=](auto temp_875) -> LightRuntimeValue<uint64_t> { switch(temp_875) { case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))); case 0x3: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())); case 0x6: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))); case 0x7: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())); default: throw "Not implemented"; } })(option))) << (amount))).Store();
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset)))).Store();
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (opc)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VBR[(int) (rt)] = (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value());
				break;
			}
			case 0x4: {
				VSR[(int) (rt)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) (address)).value());
				break;
			}
			case 0x6: {
				VDR[(int) (rt)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) (address)).value());
				break;
			}
			case 0x1: {
				VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) (address)).value());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDR-register */
bool LightRecompiler::LDR_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto scale = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto amount = (int64_t) (((bool) (((scale) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : ((int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto extend = (string) (([=](auto temp_876) -> string { switch(temp_876) { case 0x2: return string("UXTW"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: return string("LSL"); } })(option));
		auto offset = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((LightRuntimeValue<uint64_t>) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1))))) != 0 ? ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value()));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDRB-immediate-postindex */
bool LightRecompiler::LDRB_immediate_postindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value()))));
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDRB-immediate-preindex */
bool LightRecompiler::LDRB_immediate_preindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)))).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value()))));
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDRB-immediate-unsigned-offset */
bool LightRecompiler::LDRB_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) (imm))))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDRB-register */
bool LightRecompiler::LDRB_register(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_877) -> string { switch(temp_877) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((LightRuntimeValue<uint64_t>) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1))))) != 0 ? ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value()));
		return true;
	}
unimplemented:
	return false;
}

/* LDRH-immediate-postindex */
bool LightRecompiler::LDRH_immediate_postindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value())));
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDRH-immediate-preindex */
bool LightRecompiler::LDRH_immediate_preindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)))).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value())));
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDRH-immediate-unsigned-offset */
bool LightRecompiler::LDRH_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (uint16_t) ((rawimm) << (uint) (0x1));
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) (imm))))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDRH-register */
bool LightRecompiler::LDRH_register(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_878) -> string { switch(temp_878) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((LightRuntimeValue<uint64_t>) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1))))) != 0 ? ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value()));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSB-immediate-postindex */
bool LightRecompiler::LDRSB_immediate_postindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value()), 8)))));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value()), 8))));
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSB-immediate-preindex */
bool LightRecompiler::LDRSB_immediate_preindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)))).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value()), 8)))));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value()), 8))));
		}
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDRSB-immediate-unsigned-offset */
bool LightRecompiler::LDRSB_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) (imm))))).value()), 8)))));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) (imm))))).value()), 8))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDRSB-register */
bool LightRecompiler::LDRSB_register(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x0)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_879) -> string { switch(temp_879) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((LightRuntimeValue<uint64_t>) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1))))) != 0 ? ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value()), 8)))));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value()), 8))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDRSH-immediate-postindex */
bool LightRecompiler::LDRSH_immediate_postindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value()), 16)))));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value()), 16))));
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSH-immediate-preindex */
bool LightRecompiler::LDRSH_immediate_preindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)))).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value()), 16)))));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) (address)).value()), 16))));
		}
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDRSH-immediate-unsigned-offset */
bool LightRecompiler::LDRSH_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (uint16_t) ((rawimm) << (uint) (0x1));
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) (imm))))).value()), 16)))));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) (imm))))).value()), 16))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDRSH-register */
bool LightRecompiler::LDRSH_register(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x0)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_880) -> string { switch(temp_880) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((LightRuntimeValue<uint64_t>) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1))))) != 0 ? ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value()), 16)))));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value()), 16))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDRSW-immediate-postindex */
bool LightRecompiler::LDRSW_immediate_postindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) (address)).value()), 32))));
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSW-immediate-preindex */
bool LightRecompiler::LDRSW_immediate_preindex(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)))).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) (address)).value()), 32))));
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* LDRSW-immediate-unsigned-offset */
bool LightRecompiler::LDRSW_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (uint16_t) ((rawimm) << (uint) (0x2));
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) (imm))))).value()), 32))));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSW-literal */
bool LightRecompiler::LDRSW_literal(uint inst, ulong pc) {
	{
		auto imm = (inst >> 5) & 0x7FFFFU;
		auto rt = (inst >> 0) & 0x1FU;
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (pc))) + ((uint64_t) (int64_t) ((int64_t) (SignExt<int64_t>((uint32_t) ((uint32_t) (((uint32_t) (((uint32_t) ((uint8_t) ((uint8_t) (0x0)))) << 0)) | ((uint32_t) (((uint32_t) (imm)) << 2)))), 21)))));
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) (addr)).value()), 32))));
		return true;
	}
unimplemented:
	return false;
}

/* LDRSW-register */
bool LightRecompiler::LDRSW_register(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto scale = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto amount = (int64_t) (((bool) (((scale) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : (0x2));
		auto extend = (string) (([=](auto temp_881) -> string { switch(temp_881) { case 0x2: return string("UXTW"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: return string("LSL"); } })(option));
		auto offset = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((LightRuntimeValue<uint64_t>) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1))))) != 0 ? ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value()), 32))));
		return true;
	}
unimplemented:
	return false;
}

/* LDUR */
bool LightRecompiler::LDUR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm))))).value()));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm))))).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDURB */
bool LightRecompiler::LDURB(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm))))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDURH */
bool LightRecompiler::LDURH(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm))))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDURSB */
bool LightRecompiler::LDURSB(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm))))).value()), 8)))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm))))).value()), 8))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDURSH */
bool LightRecompiler::LDURSH(uint inst, ulong pc) {
	{
		auto opc = (inst >> 22) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		if(((bool) (((opc) == (0x1)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm))))).value()), 16)))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint16_t>) (((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm))))).value()), 16))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDURSW */
bool LightRecompiler::LDURSW(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) (((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm))))).value()), 32))));
		return true;
	}
unimplemented:
	return false;
}

/* LDUR-simd */
bool LightRecompiler::LDUR_simd(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto rawimm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_882) -> string { switch(temp_882) { case 0x0: return string("B"); case 0x2: return string("H"); case 0x4: return string("S"); case 0x6: return string("D"); case 0x1: return string("Q"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (opc)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto imm = (int64_t) (SignExt<int64_t>(rawimm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (imm)))).Store();
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (opc)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VBR[(int) (rt)] = (LightRuntimeValue<uint8_t>) (((LightRuntimePointer<uint8_t>) (address)).value());
				break;
			}
			case 0x4: {
				VSR[(int) (rt)] = (LightRuntimeValue<float>) (((LightRuntimePointer<float>) (address)).value());
				break;
			}
			case 0x6: {
				VDR[(int) (rt)] = (LightRuntimeValue<double>) (((LightRuntimePointer<double>) (address)).value());
				break;
			}
			case 0x1: {
				VR[(int) (rt)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimePointer<Vector128<float>>) (address)).value());
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDXR */
bool LightRecompiler::LDXR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Exclusive32R = ((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value()));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (Exclusive64R = ((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LDXRB */
bool LightRecompiler::LDXRB(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint8_t>) (Exclusive8R = ((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDXRH */
bool LightRecompiler::LDXRH(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint16_t>) (Exclusive16R = ((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value())));
		return true;
	}
unimplemented:
	return false;
}

/* LDXP */
bool LightRecompiler::LDXP(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Exclusive32R = ((LightRuntimePointer<uint32_t>) (address)).value()));
			XR[(int) rt2] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Exclusive32R = ((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value()));
		} else {
			XR[(int) rt] = (LightRuntimeValue<uint64_t>) (Exclusive64R = ((LightRuntimePointer<uint64_t>) (address)).value());
			XR[(int) rt2] = (LightRuntimeValue<uint64_t>) (Exclusive64R = ((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value());
		}
		return true;
	}
unimplemented:
	return false;
}

/* LSL-register */
bool LightRecompiler::LSL_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))) << ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())))) % ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x20))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())) << ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))) % ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x40)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* LSRV */
bool LightRecompiler::LSRV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))) >> ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())))) % ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x20))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())) >> ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))) % ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x40)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MADD */
bool LightRecompiler::MADD(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) * ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((ra) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) ra]()))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) * ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((ra) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) ra]()))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MOVI-scalar-64bit */
bool LightRecompiler::MOVI_scalar_64bit(uint inst, ulong pc) {
	{
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm8a = (uint8_t) ((uint8_t) ((int64_t) ((a != 0) ? (0xFF) : (0x0))));
		auto imm8b = (uint8_t) ((uint8_t) ((int64_t) ((b != 0) ? (0xFF) : (0x0))));
		auto imm8c = (uint8_t) ((uint8_t) ((int64_t) ((c != 0) ? (0xFF) : (0x0))));
		auto imm8d = (uint8_t) ((uint8_t) ((int64_t) ((d != 0) ? (0xFF) : (0x0))));
		auto imm8e = (uint8_t) ((uint8_t) ((int64_t) ((e != 0) ? (0xFF) : (0x0))));
		auto imm8f = (uint8_t) ((uint8_t) ((int64_t) ((f != 0) ? (0xFF) : (0x0))));
		auto imm8g = (uint8_t) ((uint8_t) ((int64_t) ((g != 0) ? (0xFF) : (0x0))));
		auto imm8h = (uint8_t) ((uint8_t) ((int64_t) ((h != 0) ? (0xFF) : (0x0))));
		auto imm = (uint64_t) ((uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (((uint64_t) (imm8h)) << 0)) | ((uint64_t) (((uint64_t) (imm8g)) << 8)))) | ((uint64_t) (((uint64_t) (imm8f)) << 16)))) | ((uint64_t) (((uint64_t) (imm8e)) << 24)))) | ((uint64_t) (((uint64_t) (imm8d)) << 32)))) | ((uint64_t) (((uint64_t) (imm8c)) << 40)))) | ((uint64_t) (((uint64_t) (imm8b)) << 48)))) | ((uint64_t) (((uint64_t) (imm8a)) << 56))));
		VDR[(int) (rd)] = (double) (Bitcast<uint64_t, double>(imm));
		return true;
	}
unimplemented:
	return false;
}

/* MOVI-vector-8bit */
bool LightRecompiler::MOVI_vector_8bit(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
		auto imm = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (h)) << 0)) | ((uint8_t) (((uint8_t) (g)) << 1)))) | ((uint8_t) (((uint8_t) (f)) << 2)))) | ((uint8_t) (((uint8_t) (e)) << 3)))) | ((uint8_t) (((uint8_t) (d)) << 4)))) | ((uint8_t) (((uint8_t) (c)) << 5)))) | ((uint8_t) (((uint8_t) (b)) << 6)))) | ((uint8_t) (((uint8_t) (a)) << 7))));
		auto avec = ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (imm)))).CreateVector())).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (avec) : ((LightRuntimeValue<Vector128<float>>) ((avec).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* MOVI-vector-16bit */
bool LightRecompiler::MOVI_vector_16bit(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto cmode = (inst >> 13) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) ((Q != 0) ? (string("8H")) : (string("4H")));
		auto imm = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (h)) << 0)) | ((uint8_t) (((uint8_t) (g)) << 1)))) | ((uint8_t) (((uint8_t) (f)) << 2)))) | ((uint8_t) (((uint8_t) (e)) << 3)))) | ((uint8_t) (((uint8_t) (d)) << 4)))) | ((uint8_t) (((uint8_t) (c)) << 5)))) | ((uint8_t) (((uint8_t) (b)) << 6)))) | ((uint8_t) (((uint8_t) (a)) << 7))));
		auto avec = ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint16_t>) ((uint16_t) ((cmode != 0) ? ((uint16_t) ((uint16_t) ((uint16_t) (((uint16_t) ((uint16_t) (imm))) << (uint) (0x8))))) : ((uint16_t) ((uint16_t) (imm)))))).CreateVector())).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (avec) : ((LightRuntimeValue<Vector128<float>>) ((avec).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* MOVI-vector-32bit */
bool LightRecompiler::MOVI_vector_32bit(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto cmode = (inst >> 13) & 0x3U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
		auto amount = (int64_t) (([=](auto temp_883) -> int64_t { switch(temp_883) { case 0x0: return 0x0; case 0x1: return 0x8; case 0x2: return 0x10; case 0x3: return 0x18; default: throw "Not implemented"; } })(cmode));
		auto imm = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (h)) << 0)) | ((uint8_t) (((uint8_t) (g)) << 1)))) | ((uint8_t) (((uint8_t) (f)) << 2)))) | ((uint8_t) (((uint8_t) (e)) << 3)))) | ((uint8_t) (((uint8_t) (d)) << 4)))) | ((uint8_t) (((uint8_t) (c)) << 5)))) | ((uint8_t) (((uint8_t) (b)) << 6)))) | ((uint8_t) (((uint8_t) (a)) << 7))));
		auto avec = ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<float>) ((float) (Bitcast<uint32_t, float>((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (amount)))))).CreateVector())).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (avec) : ((LightRuntimeValue<Vector128<float>>) ((avec).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* MOVI-Vx.2D */
bool LightRecompiler::MOVI_Vx_2D(uint inst, ulong pc) {
	{
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto imm = (uint64_t) ((uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (uint64_t) (((uint64_t) (((uint64_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (h)) << 0)) | ((uint8_t) (((uint8_t) (h)) << 1)))) | ((uint8_t) (((uint8_t) (h)) << 2)))) | ((uint8_t) (((uint8_t) (h)) << 3)))) | ((uint8_t) (((uint8_t) (h)) << 4)))) | ((uint8_t) (((uint8_t) (h)) << 5)))) | ((uint8_t) (((uint8_t) (h)) << 6)))) | ((uint8_t) (((uint8_t) (h)) << 7)))))) << 0)) | ((uint64_t) (((uint64_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (g)) << 0)) | ((uint8_t) (((uint8_t) (g)) << 1)))) | ((uint8_t) (((uint8_t) (g)) << 2)))) | ((uint8_t) (((uint8_t) (g)) << 3)))) | ((uint8_t) (((uint8_t) (g)) << 4)))) | ((uint8_t) (((uint8_t) (g)) << 5)))) | ((uint8_t) (((uint8_t) (g)) << 6)))) | ((uint8_t) (((uint8_t) (g)) << 7)))))) << 8)))) | ((uint64_t) (((uint64_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (f)) << 0)) | ((uint8_t) (((uint8_t) (f)) << 1)))) | ((uint8_t) (((uint8_t) (f)) << 2)))) | ((uint8_t) (((uint8_t) (f)) << 3)))) | ((uint8_t) (((uint8_t) (f)) << 4)))) | ((uint8_t) (((uint8_t) (f)) << 5)))) | ((uint8_t) (((uint8_t) (f)) << 6)))) | ((uint8_t) (((uint8_t) (f)) << 7)))))) << 16)))) | ((uint64_t) (((uint64_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (e)) << 0)) | ((uint8_t) (((uint8_t) (e)) << 1)))) | ((uint8_t) (((uint8_t) (e)) << 2)))) | ((uint8_t) (((uint8_t) (e)) << 3)))) | ((uint8_t) (((uint8_t) (e)) << 4)))) | ((uint8_t) (((uint8_t) (e)) << 5)))) | ((uint8_t) (((uint8_t) (e)) << 6)))) | ((uint8_t) (((uint8_t) (e)) << 7)))))) << 24)))) | ((uint64_t) (((uint64_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (d)) << 0)) | ((uint8_t) (((uint8_t) (d)) << 1)))) | ((uint8_t) (((uint8_t) (d)) << 2)))) | ((uint8_t) (((uint8_t) (d)) << 3)))) | ((uint8_t) (((uint8_t) (d)) << 4)))) | ((uint8_t) (((uint8_t) (d)) << 5)))) | ((uint8_t) (((uint8_t) (d)) << 6)))) | ((uint8_t) (((uint8_t) (d)) << 7)))))) << 32)))) | ((uint64_t) (((uint64_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (c)) << 0)) | ((uint8_t) (((uint8_t) (c)) << 1)))) | ((uint8_t) (((uint8_t) (c)) << 2)))) | ((uint8_t) (((uint8_t) (c)) << 3)))) | ((uint8_t) (((uint8_t) (c)) << 4)))) | ((uint8_t) (((uint8_t) (c)) << 5)))) | ((uint8_t) (((uint8_t) (c)) << 6)))) | ((uint8_t) (((uint8_t) (c)) << 7)))))) << 40)))) | ((uint64_t) (((uint64_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (b)) << 0)) | ((uint8_t) (((uint8_t) (b)) << 1)))) | ((uint8_t) (((uint8_t) (b)) << 2)))) | ((uint8_t) (((uint8_t) (b)) << 3)))) | ((uint8_t) (((uint8_t) (b)) << 4)))) | ((uint8_t) (((uint8_t) (b)) << 5)))) | ((uint8_t) (((uint8_t) (b)) << 6)))) | ((uint8_t) (((uint8_t) (b)) << 7)))))) << 48)))) | ((uint64_t) (((uint64_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (a)) << 0)) | ((uint8_t) (((uint8_t) (a)) << 1)))) | ((uint8_t) (((uint8_t) (a)) << 2)))) | ((uint8_t) (((uint8_t) (a)) << 3)))) | ((uint8_t) (((uint8_t) (a)) << 4)))) | ((uint8_t) (((uint8_t) (a)) << 5)))) | ((uint8_t) (((uint8_t) (a)) << 6)))) | ((uint8_t) (((uint8_t) (a)) << 7)))))) << 56))));
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint64_t>) (imm)).CreateVector());
		return true;
	}
unimplemented:
	return false;
}

/* MOVK */
bool LightRecompiler::MOVK(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto hw = (inst >> 21) & 0x3U;
		auto imm = (inst >> 5) & 0xFFFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (uint8_t) ((hw) << (uint) (0x4));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rd) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rd]())))) & ((LightRuntimeValue<uint32_t>) ((uint32_t) ((((uint32_t) ((uint32_t) ((uint32_t) (-0x1)))) ^ ((uint32_t) ((uint32_t) (((uint32_t) ((uint32_t) (0xFFFF))) << (uint) (shift)))))))))))) | ((LightRuntimeValue<uint32_t>) ((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (shift)))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rd]()))) & ((LightRuntimeValue<uint64_t>) ((uint64_t) ((((uint64_t) ((uint64_t) ((uint64_t) (-0x1)))) ^ ((uint64_t) ((uint64_t) (((uint64_t) ((uint64_t) (0xFFFF))) << (uint) (shift)))))))))))) | ((LightRuntimeValue<uint64_t>) ((uint64_t) (((uint64_t) ((uint64_t) (imm))) << (uint) (shift))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MOVN */
bool LightRecompiler::MOVN(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto hw = (inst >> 21) & 0x3U;
		auto imm = (inst >> 5) & 0xFFFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (uint8_t) ((hw) << (uint) (0x4));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((uint32_t) (~((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (shift)))));
		} else {
			XR[(int) rd] = (uint64_t) (~((uint64_t) (((uint64_t) ((uint64_t) (imm))) << (uint) (shift))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MOVZ */
bool LightRecompiler::MOVZ(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto hw = (inst >> 21) & 0x3U;
		auto imm = (inst >> 5) & 0xFFFFU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (uint8_t) ((hw) << (uint) (0x4));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (shift)));
		} else {
			XR[(int) rd] = (uint64_t) (((uint64_t) ((uint64_t) (imm))) << (uint) (shift));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MRS */
bool LightRecompiler::MRS(uint inst, ulong pc) {
	{
		auto op0 = (inst >> 19) & 0x1U;
		auto op1 = (inst >> 16) & 0x7U;
		auto cn = (inst >> 12) & 0xFU;
		auto cm = (inst >> 8) & 0xFU;
		auto op2 = (inst >> 5) & 0x7U;
		auto rt = (inst >> 0) & 0x1FU;
		XR[(int) rt] = (LightRuntimeValue<uint64_t>) (Call<ulong, ulong, uint, uint, uint, uint, uint>(SR, (ulong) this, op0, op1, cn, cm, op2));
		return true;
	}
unimplemented:
	return false;
}

/* MSR-register */
bool LightRecompiler::MSR_register(uint inst, ulong pc) {
	{
		auto op0 = (inst >> 19) & 0x1U;
		auto op1 = (inst >> 16) & 0x7U;
		auto cn = (inst >> 12) & 0xFU;
		auto cm = (inst >> 8) & 0xFU;
		auto op2 = (inst >> 5) & 0x7U;
		auto rt = (inst >> 0) & 0x1FU;
		Call<void, ulong, uint, uint, uint, uint, uint, ulong>(SR, (uint64_t) this, op0, op1, cn, cm, op2, (LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()));
		return true;
	}
unimplemented:
	return false;
}

/* MSUB */
bool LightRecompiler::MSUB(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((ra) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) ra]())))) - ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) * ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())))))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((ra) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) ra]()))) - ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) * ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* MUL-by-element */
bool LightRecompiler::MUL_by_element(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto L = (inst >> 21) & 0x1U;
		auto M = (inst >> 20) & 0x1U;
		auto rv = (inst >> 16) & 0xFU;
		auto H = (inst >> 11) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto rm = (uint8_t) (((bool) (((size) == (0x2)) ? 1U : 0U) != 0) ? ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (rv)) << 0)) | ((uint8_t) (((uint8_t) (M)) << 4))))) : (rv));
		auto t = (string) (([=](auto temp_884) -> string { switch(temp_884) { case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto ts = (string) (([=](auto temp_885) -> string { switch(temp_885) { case 0x1: return string("H"); case 0x2: return string("S"); default: throw "Not implemented"; } })(size));
		auto index = (uint8_t) (([=](auto temp_886) -> uint8_t { switch(temp_886) { case 0x1: return (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (M)) << 0)) | ((uint8_t) (((uint8_t) (L)) << 1)))) | ((uint8_t) (((uint8_t) (H)) << 2)))); case 0x2: return (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (L)) << 0)) | ((uint8_t) (((uint8_t) (H)) << 1)))); default: throw "Not implemented"; } })(size));
		auto v = ((LightRuntimeValue<Vector128<float>>) (([=](auto temp_887) -> LightRuntimeValue<Vector128<float>> { switch(temp_887) { case 0x1: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<uint16_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<uint16_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint16_t>(index)))))); case 0x2: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<uint32_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint32_t>(index)))))); default: throw "Not implemented"; } })(size))).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((LightRuntimeValue<Vector128<float>>) ((v).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* MUL-vector */
bool LightRecompiler::MUL_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_888) -> string { switch(temp_888) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto v = ((LightRuntimeValue<Vector128<float>>) (([=](auto temp_889) -> LightRuntimeValue<Vector128<float>> { switch(temp_889) { case 0x0: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); case 0x1: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<uint16_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<uint16_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); case 0x2: return (LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<uint32_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])) * ((LightRuntimeValue<Vector128<uint32_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])))))); default: throw "Not implemented"; } })(size))).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (v) : ((LightRuntimeValue<Vector128<float>>) ((v).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* MVNI-vector-16bit */
bool LightRecompiler::MVNI_vector_16bit(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto cmode = (inst >> 13) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) ((Q != 0) ? (string("8H")) : (string("4H")));
		auto imm = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (h)) << 0)) | ((uint8_t) (((uint8_t) (g)) << 1)))) | ((uint8_t) (((uint8_t) (f)) << 2)))) | ((uint8_t) (((uint8_t) (e)) << 3)))) | ((uint8_t) (((uint8_t) (d)) << 4)))) | ((uint8_t) (((uint8_t) (c)) << 5)))) | ((uint8_t) (((uint8_t) (b)) << 6)))) | ((uint8_t) (((uint8_t) (a)) << 7))));
		auto amount = (int64_t) ((cmode != 0) ? (0x8) : (0x0));
		auto avec = ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint16_t>) ((uint16_t) ((uint16_t) ((uint16_t) (~((uint16_t) (((uint16_t) ((uint16_t) (imm))) << (uint) (amount)))))))).CreateVector())).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (avec) : ((LightRuntimeValue<Vector128<float>>) ((avec).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* MVNI-vector-32bit-LSL */
bool LightRecompiler::MVNI_vector_32bit_LSL(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto cmode = (inst >> 13) & 0x3U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
		auto amount = (int64_t) (([=](auto temp_890) -> int64_t { switch(temp_890) { case 0x0: return 0x0; case 0x1: return 0x8; case 0x2: return 0x10; case 0x3: return 0x18; default: throw "Not implemented"; } })(cmode));
		auto imm = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (h)) << 0)) | ((uint8_t) (((uint8_t) (g)) << 1)))) | ((uint8_t) (((uint8_t) (f)) << 2)))) | ((uint8_t) (((uint8_t) (e)) << 3)))) | ((uint8_t) (((uint8_t) (d)) << 4)))) | ((uint8_t) (((uint8_t) (c)) << 5)))) | ((uint8_t) (((uint8_t) (b)) << 6)))) | ((uint8_t) (((uint8_t) (a)) << 7))));
		auto avec = ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint32_t>) ((uint32_t) (~((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (amount)))))).CreateVector())).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (avec) : ((LightRuntimeValue<Vector128<float>>) ((avec).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* MVNI-vector-32bit-MSL */
bool LightRecompiler::MVNI_vector_32bit_MSL(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto a = (inst >> 18) & 0x1U;
		auto b = (inst >> 17) & 0x1U;
		auto c = (inst >> 16) & 0x1U;
		auto cmode = (inst >> 12) & 0x1U;
		auto d = (inst >> 9) & 0x1U;
		auto e = (inst >> 8) & 0x1U;
		auto f = (inst >> 7) & 0x1U;
		auto g = (inst >> 6) & 0x1U;
		auto h = (inst >> 5) & 0x1U;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
		auto amount = (int64_t) ((cmode != 0) ? (0x10) : (0x8));
		auto imm = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (h)) << 0)) | ((uint8_t) (((uint8_t) (g)) << 1)))) | ((uint8_t) (((uint8_t) (f)) << 2)))) | ((uint8_t) (((uint8_t) (e)) << 3)))) | ((uint8_t) (((uint8_t) (d)) << 4)))) | ((uint8_t) (((uint8_t) (c)) << 5)))) | ((uint8_t) (((uint8_t) (b)) << 6)))) | ((uint8_t) (((uint8_t) (a)) << 7))));
		auto avec = ((LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint32_t>) ((uint32_t) (~((uint32_t) ((((uint32_t) ((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (amount)))) | ((uint32_t) ((uint32_t) ((uint32_t) ((int64_t) ((cmode != 0) ? (0xFFFF) : (0xFF)))))))))))).CreateVector())).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (avec) : ((LightRuntimeValue<Vector128<float>>) ((avec).ZeroTop())));
		return true;
	}
unimplemented:
	return false;
}

/* NEG-vector */
bool LightRecompiler::NEG_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_891) -> string { switch(temp_891) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto n = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x7)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x7)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x8)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0x9)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0xA)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0xB)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0xC)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0xD)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0xE)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (LightRuntimeValue<int8_t>) (-((LightRuntimeValue<int8_t>) ((n).Element<int8_t>(0xF)))));
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x3)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<int16_t>) (-((LightRuntimeValue<int16_t>) ((n).Element<int16_t>(0x7)))));
				break;
			}
			case 0x4: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((n).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((n).Element<float>(0x1)))));
				break;
			}
			case 0x5: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((n).Element<float>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((n).Element<float>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((n).Element<float>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<float>) (-((LightRuntimeValue<float>) ((n).Element<float>(0x3)))));
				break;
			}
			case 0x7: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<double>) (-((LightRuntimeValue<double>) ((n).Element<double>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<double>) (-((LightRuntimeValue<double>) ((n).Element<double>(0x1)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* NOP */
bool LightRecompiler::NOP(uint inst, ulong pc) {
	{
		return true;
	}
unimplemented:
	return false;
}

/* ORN-shifted-register */
bool LightRecompiler::ORN_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_892) -> string { switch(temp_892) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (~((LightRuntimeValue<uint32_t>) (([=](auto temp_893) -> LightRuntimeValue<uint32_t> { switch(temp_893) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift)))))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (~((LightRuntimeValue<uint64_t>) (([=](auto temp_894) -> LightRuntimeValue<uint64_t> { switch(temp_894) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* ORR-immediate */
bool LightRecompiler::ORR_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto up = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (uint64_t) (MakeWMask(up, imms, immr, (int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x20) : (0x40)), 0x1));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) | ((LightRuntimeValue<uint32_t>) ((uint32_t) ((uint32_t) (imm)))))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) | ((LightRuntimeValue<uint32_t>) ((uint32_t) ((uint32_t) (imm)))))));
		} else {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) | ((LightRuntimeValue<uint64_t>) (imm))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) | ((LightRuntimeValue<uint64_t>) (imm))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* ORR-shifted-register */
bool LightRecompiler::ORR_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_895) -> string { switch(temp_895) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=](auto temp_896) -> LightRuntimeValue<uint32_t> { switch(temp_896) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift)))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (([=](auto temp_897) -> LightRuntimeValue<uint64_t> { switch(temp_897) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* ORR-simd-register */
bool LightRecompiler::ORR_simd_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (((bool) (((Q) == (0x0)) ? 1U : 0U) != 0) ? (string("8B")) : (string("16B")));
		if(((bool) (((rm) == (rn)) ? 1U : 0U)) != 0) {
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]);
		} else {
			auto tv = ((LightRuntimeValue<Vector128<float>>) ((LightRuntimeValue<Vector128<float>>) ((((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]))) | ((LightRuntimeValue<Vector128<uint8_t>>) ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)]))))))).Store();
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((Q) != 0 ? (tv) : ((LightRuntimeValue<Vector128<float>>) ((tv).ZeroTop())));
		}
		return true;
	}
unimplemented:
	return false;
}

/* PMULL[2] */
bool LightRecompiler::PMULL_2_(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto h = (string) ((Q != 0) ? (string("2")) : (string("")));
		auto Ta = (string) (([=](auto temp_898) -> string { switch(temp_898) { case 0x0: return string("8H"); case 0x3: return string("1Q"); default: throw "Not implemented"; } })(size));
		auto Tb = (string) (([=](auto temp_899) -> string { switch(temp_899) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x6: return string("1D"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		if(((bool) (((size) == (0x3)) ? 1U : 0U)) != 0) {
			auto result = ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q)))) ^ ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))))))))).Store();
			LightLabel temp_900 = DefineLabel(), temp_901 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x0)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_900, temp_901);
			Label(temp_900);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x0))))));
			Branch(temp_901);
			Label(temp_901);
			LightLabel temp_902 = DefineLabel(), temp_903 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x1)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_902, temp_903);
			Label(temp_902);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x1))))));
			Branch(temp_903);
			Label(temp_903);
			LightLabel temp_904 = DefineLabel(), temp_905 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x2)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_904, temp_905);
			Label(temp_904);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x2))))));
			Branch(temp_905);
			Label(temp_905);
			LightLabel temp_906 = DefineLabel(), temp_907 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x3)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_906, temp_907);
			Label(temp_906);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x3))))));
			Branch(temp_907);
			Label(temp_907);
			LightLabel temp_908 = DefineLabel(), temp_909 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x4)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_908, temp_909);
			Label(temp_908);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x4))))));
			Branch(temp_909);
			Label(temp_909);
			LightLabel temp_910 = DefineLabel(), temp_911 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x5)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_910, temp_911);
			Label(temp_910);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x5))))));
			Branch(temp_911);
			Label(temp_911);
			LightLabel temp_912 = DefineLabel(), temp_913 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x6)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_912, temp_913);
			Label(temp_912);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x6))))));
			Branch(temp_913);
			Label(temp_913);
			LightLabel temp_914 = DefineLabel(), temp_915 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x7)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_914, temp_915);
			Label(temp_914);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x7))))));
			Branch(temp_915);
			Label(temp_915);
			LightLabel temp_916 = DefineLabel(), temp_917 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x8)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_916, temp_917);
			Label(temp_916);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x8))))));
			Branch(temp_917);
			Label(temp_917);
			LightLabel temp_918 = DefineLabel(), temp_919 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x9)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_918, temp_919);
			Label(temp_918);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x9))))));
			Branch(temp_919);
			Label(temp_919);
			LightLabel temp_920 = DefineLabel(), temp_921 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0xA)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_920, temp_921);
			Label(temp_920);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0xA))))));
			Branch(temp_921);
			Label(temp_921);
			LightLabel temp_922 = DefineLabel(), temp_923 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0xB)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_922, temp_923);
			Label(temp_922);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0xB))))));
			Branch(temp_923);
			Label(temp_923);
			LightLabel temp_924 = DefineLabel(), temp_925 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0xC)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_924, temp_925);
			Label(temp_924);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0xC))))));
			Branch(temp_925);
			Label(temp_925);
			LightLabel temp_926 = DefineLabel(), temp_927 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0xD)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_926, temp_927);
			Label(temp_926);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0xD))))));
			Branch(temp_927);
			Label(temp_927);
			LightLabel temp_928 = DefineLabel(), temp_929 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0xE)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_928, temp_929);
			Label(temp_928);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0xE))))));
			Branch(temp_929);
			Label(temp_929);
			LightLabel temp_930 = DefineLabel(), temp_931 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0xF)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_930, temp_931);
			Label(temp_930);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0xF))))));
			Branch(temp_931);
			Label(temp_931);
			LightLabel temp_932 = DefineLabel(), temp_933 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x10)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_932, temp_933);
			Label(temp_932);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x10))))));
			Branch(temp_933);
			Label(temp_933);
			LightLabel temp_934 = DefineLabel(), temp_935 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x11)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_934, temp_935);
			Label(temp_934);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x11))))));
			Branch(temp_935);
			Label(temp_935);
			LightLabel temp_936 = DefineLabel(), temp_937 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x12)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_936, temp_937);
			Label(temp_936);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x12))))));
			Branch(temp_937);
			Label(temp_937);
			LightLabel temp_938 = DefineLabel(), temp_939 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x13)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_938, temp_939);
			Label(temp_938);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x13))))));
			Branch(temp_939);
			Label(temp_939);
			LightLabel temp_940 = DefineLabel(), temp_941 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x14)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_940, temp_941);
			Label(temp_940);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x14))))));
			Branch(temp_941);
			Label(temp_941);
			LightLabel temp_942 = DefineLabel(), temp_943 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x15)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_942, temp_943);
			Label(temp_942);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x15))))));
			Branch(temp_943);
			Label(temp_943);
			LightLabel temp_944 = DefineLabel(), temp_945 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x16)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_944, temp_945);
			Label(temp_944);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x16))))));
			Branch(temp_945);
			Label(temp_945);
			LightLabel temp_946 = DefineLabel(), temp_947 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x17)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_946, temp_947);
			Label(temp_946);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x17))))));
			Branch(temp_947);
			Label(temp_947);
			LightLabel temp_948 = DefineLabel(), temp_949 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x18)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_948, temp_949);
			Label(temp_948);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x18))))));
			Branch(temp_949);
			Label(temp_949);
			LightLabel temp_950 = DefineLabel(), temp_951 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x19)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_950, temp_951);
			Label(temp_950);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x19))))));
			Branch(temp_951);
			Label(temp_951);
			LightLabel temp_952 = DefineLabel(), temp_953 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x1A)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_952, temp_953);
			Label(temp_952);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x1A))))));
			Branch(temp_953);
			Label(temp_953);
			LightLabel temp_954 = DefineLabel(), temp_955 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x1B)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_954, temp_955);
			Label(temp_954);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x1B))))));
			Branch(temp_955);
			Label(temp_955);
			LightLabel temp_956 = DefineLabel(), temp_957 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x1C)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_956, temp_957);
			Label(temp_956);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x1C))))));
			Branch(temp_957);
			Label(temp_957);
			LightLabel temp_958 = DefineLabel(), temp_959 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x1D)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_958, temp_959);
			Label(temp_958);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x1D))))));
			Branch(temp_959);
			Label(temp_959);
			LightLabel temp_960 = DefineLabel(), temp_961 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x1E)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_960, temp_961);
			Label(temp_960);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x1E))))));
			Branch(temp_961);
			Label(temp_961);
			LightLabel temp_962 = DefineLabel(), temp_963 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x1F)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_962, temp_963);
			Label(temp_962);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x1F))))));
			Branch(temp_963);
			Label(temp_963);
			LightLabel temp_964 = DefineLabel(), temp_965 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x20)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_964, temp_965);
			Label(temp_964);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x20))))));
			Branch(temp_965);
			Label(temp_965);
			LightLabel temp_966 = DefineLabel(), temp_967 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x21)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_966, temp_967);
			Label(temp_966);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x21))))));
			Branch(temp_967);
			Label(temp_967);
			LightLabel temp_968 = DefineLabel(), temp_969 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x22)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_968, temp_969);
			Label(temp_968);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x22))))));
			Branch(temp_969);
			Label(temp_969);
			LightLabel temp_970 = DefineLabel(), temp_971 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x23)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_970, temp_971);
			Label(temp_970);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x23))))));
			Branch(temp_971);
			Label(temp_971);
			LightLabel temp_972 = DefineLabel(), temp_973 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x24)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_972, temp_973);
			Label(temp_972);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x24))))));
			Branch(temp_973);
			Label(temp_973);
			LightLabel temp_974 = DefineLabel(), temp_975 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x25)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_974, temp_975);
			Label(temp_974);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x25))))));
			Branch(temp_975);
			Label(temp_975);
			LightLabel temp_976 = DefineLabel(), temp_977 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x26)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_976, temp_977);
			Label(temp_976);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x26))))));
			Branch(temp_977);
			Label(temp_977);
			LightLabel temp_978 = DefineLabel(), temp_979 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x27)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_978, temp_979);
			Label(temp_978);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x27))))));
			Branch(temp_979);
			Label(temp_979);
			LightLabel temp_980 = DefineLabel(), temp_981 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x28)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_980, temp_981);
			Label(temp_980);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x28))))));
			Branch(temp_981);
			Label(temp_981);
			LightLabel temp_982 = DefineLabel(), temp_983 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x29)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_982, temp_983);
			Label(temp_982);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x29))))));
			Branch(temp_983);
			Label(temp_983);
			LightLabel temp_984 = DefineLabel(), temp_985 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x2A)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_984, temp_985);
			Label(temp_984);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x2A))))));
			Branch(temp_985);
			Label(temp_985);
			LightLabel temp_986 = DefineLabel(), temp_987 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x2B)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_986, temp_987);
			Label(temp_986);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x2B))))));
			Branch(temp_987);
			Label(temp_987);
			LightLabel temp_988 = DefineLabel(), temp_989 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x2C)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_988, temp_989);
			Label(temp_988);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x2C))))));
			Branch(temp_989);
			Label(temp_989);
			LightLabel temp_990 = DefineLabel(), temp_991 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x2D)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_990, temp_991);
			Label(temp_990);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x2D))))));
			Branch(temp_991);
			Label(temp_991);
			LightLabel temp_992 = DefineLabel(), temp_993 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x2E)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_992, temp_993);
			Label(temp_992);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x2E))))));
			Branch(temp_993);
			Label(temp_993);
			LightLabel temp_994 = DefineLabel(), temp_995 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x2F)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_994, temp_995);
			Label(temp_994);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x2F))))));
			Branch(temp_995);
			Label(temp_995);
			LightLabel temp_996 = DefineLabel(), temp_997 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x30)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_996, temp_997);
			Label(temp_996);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x30))))));
			Branch(temp_997);
			Label(temp_997);
			LightLabel temp_998 = DefineLabel(), temp_999 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x31)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_998, temp_999);
			Label(temp_998);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x31))))));
			Branch(temp_999);
			Label(temp_999);
			LightLabel temp_1000 = DefineLabel(), temp_1001 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x32)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1000, temp_1001);
			Label(temp_1000);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x32))))));
			Branch(temp_1001);
			Label(temp_1001);
			LightLabel temp_1002 = DefineLabel(), temp_1003 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x33)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1002, temp_1003);
			Label(temp_1002);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x33))))));
			Branch(temp_1003);
			Label(temp_1003);
			LightLabel temp_1004 = DefineLabel(), temp_1005 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x34)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1004, temp_1005);
			Label(temp_1004);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x34))))));
			Branch(temp_1005);
			Label(temp_1005);
			LightLabel temp_1006 = DefineLabel(), temp_1007 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x35)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1006, temp_1007);
			Label(temp_1006);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x35))))));
			Branch(temp_1007);
			Label(temp_1007);
			LightLabel temp_1008 = DefineLabel(), temp_1009 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x36)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1008, temp_1009);
			Label(temp_1008);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x36))))));
			Branch(temp_1009);
			Label(temp_1009);
			LightLabel temp_1010 = DefineLabel(), temp_1011 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x37)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1010, temp_1011);
			Label(temp_1010);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x37))))));
			Branch(temp_1011);
			Label(temp_1011);
			LightLabel temp_1012 = DefineLabel(), temp_1013 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x38)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1012, temp_1013);
			Label(temp_1012);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x38))))));
			Branch(temp_1013);
			Label(temp_1013);
			LightLabel temp_1014 = DefineLabel(), temp_1015 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x39)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1014, temp_1015);
			Label(temp_1014);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x39))))));
			Branch(temp_1015);
			Label(temp_1015);
			LightLabel temp_1016 = DefineLabel(), temp_1017 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x3A)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1016, temp_1017);
			Label(temp_1016);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x3A))))));
			Branch(temp_1017);
			Label(temp_1017);
			LightLabel temp_1018 = DefineLabel(), temp_1019 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x3B)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1018, temp_1019);
			Label(temp_1018);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x3B))))));
			Branch(temp_1019);
			Label(temp_1019);
			LightLabel temp_1020 = DefineLabel(), temp_1021 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x3C)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1020, temp_1021);
			Label(temp_1020);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x3C))))));
			Branch(temp_1021);
			Label(temp_1021);
			LightLabel temp_1022 = DefineLabel(), temp_1023 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x3D)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1022, temp_1023);
			Label(temp_1022);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x3D))))));
			Branch(temp_1023);
			Label(temp_1023);
			LightLabel temp_1024 = DefineLabel(), temp_1025 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x3E)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1024, temp_1025);
			Label(temp_1024);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x3E))))));
			Branch(temp_1025);
			Label(temp_1025);
			LightLabel temp_1026 = DefineLabel(), temp_1027 = DefineLabel();
			BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(Q))) >> (0x3F)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1026, temp_1027);
			Label(temp_1026);
			result = (LightRuntimeValue<__uint128_t>) ((((LightRuntimeValue<__uint128_t>) (result)) ^ ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Element<uint64_t>(Q))))) << (0x3F))))));
			Branch(temp_1027);
			Label(temp_1027);
			VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) ((result).Bitcast<Vector128<float>>());
		} else {
			throw "Not implemented";
		}
		return true;
	}
unimplemented:
	return false;
}

/* PRFM-immediate */
bool LightRecompiler::PRFM_immediate(uint inst, ulong pc) {
	{
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto imm5 = (inst >> 0) & 0x1FU;
		auto pimm = (uint64_t) (((uint64_t) (uint16_t) (imm)) * ((uint64_t) (int64_t) (0x8)));
		return true;
	}
unimplemented:
	return false;
}

/* PRFM-literal */
bool LightRecompiler::PRFM_literal(uint inst, ulong pc) {
	{
		auto imm = (inst >> 5) & 0x7FFFFU;
		auto rt = (inst >> 0) & 0x1FU;
		return true;
	}
unimplemented:
	return false;
}

/* PRFM-register */
bool LightRecompiler::PRFM_register(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto opt = (inst >> 13) & 0x7U;
		auto S = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		return true;
	}
unimplemented:
	return false;
}

/* PRFUM */
bool LightRecompiler::PRFUM(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		return true;
	}
unimplemented:
	return false;
}

/* RBIT */
bool LightRecompiler::RBIT(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Call<uint32_t, uint32_t>(ReverseBits, (LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (Call<uint64_t, uint64_t>(ReverseBits, (LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())));
		}
		return true;
	}
unimplemented:
	return false;
}

/* RET */
bool LightRecompiler::RET(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		BranchRegister(rn);
		return true;
	}
unimplemented:
	return false;
}

/* REV */
bool LightRecompiler::REV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto opc = (inst >> 10) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (opc)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				auto x = ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))).Store();
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (x)) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x18)))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((x) >> (0x8)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x10))))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((x) >> (0x10)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x8))))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((x) >> (0x18)))) & ((LightRuntimeValue<uint64_t>) (0xFF)))))))));
				break;
			}
			case 0x3: {
				auto x = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((((((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (x)) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x38)))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x8)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x30))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x10)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x28))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x18)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x20))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x20)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x18))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x28)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x10))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x30)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x8))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x38)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* REV16 */
bool LightRecompiler::REV16(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto x = ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (x)) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x8)))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((x) >> (0x8)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((x) >> (0x10)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x18))))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((x) >> (0x18)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x10)))))));
		} else {
			auto x = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((((((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (x)) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x8)))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x8)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x10)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x18))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x18)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x10))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x20)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x28))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x28)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x20))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x30)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x38))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((x) >> (0x38)))) & ((LightRuntimeValue<uint64_t>) (0xFF))))) << (0x30))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* RORV */
bool LightRecompiler::RORV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))) << ((LightRuntimeValue<uint>) (32 - ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())))) % ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x20))))))) | (((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))) >> ((LightRuntimeValue<uint>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())))) % ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x20))))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())) << ((LightRuntimeValue<uint>) (64 - ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))) % ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x40))))))) | (((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())) >> ((LightRuntimeValue<uint>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))) % ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x40)))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SBCS */
bool LightRecompiler::SBCS(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=]() -> LightRuntimeValue<uint32_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (~((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<bool>) (NZCV_CR)))).Store();
					auto bits = (int32_t) (32);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint32_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (~((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<bool>) (NZCV_CR)))).Store();
					auto bits = (int32_t) (64);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* SBFM */
bool LightRecompiler::SBFM(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto N = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto src = ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))).Store();
			auto wmask = (uint32_t) ((uint32_t) ((uint64_t) (MakeWMask(N, imms, immr, 0x20, 0x0))));
			auto tmask = (uint32_t) ((uint32_t) ((uint64_t) (MakeTMask(N, imms, immr, 0x20, 0x0))));
			auto bot = ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((src) << ((LightRuntimeValue<uint>) (32 - (immr)))) | ((src) >> ((LightRuntimeValue<uint>) (immr)))))) & ((LightRuntimeValue<uint32_t>) (wmask))))).Store();
			auto top = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((uint32_t) ((uint32_t) (0x0)))) - ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((src) >> (imms)))) & ((LightRuntimeValue<uint64_t>) (0x1)))))))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) (top)) & ((LightRuntimeValue<uint32_t>) ((uint32_t) (~(tmask)))))))) | ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) (bot)) & ((LightRuntimeValue<uint32_t>) (tmask)))))))));
		} else {
			auto src = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
			auto wmask = (uint64_t) (MakeWMask(N, imms, immr, 0x40, 0x0));
			auto tmask = (uint64_t) (MakeTMask(N, imms, immr, 0x40, 0x0));
			auto bot = ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((src) << ((LightRuntimeValue<uint>) (64 - (immr)))) | ((src) >> ((LightRuntimeValue<uint>) (immr)))))) & ((LightRuntimeValue<uint64_t>) (wmask))))).Store();
			auto top = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (0x0)))) - ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((src) >> (imms)))) & ((LightRuntimeValue<uint64_t>) (0x1)))))))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (top)) & ((LightRuntimeValue<uint64_t>) ((uint64_t) (~(tmask)))))))) | ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (bot)) & ((LightRuntimeValue<uint64_t>) (tmask))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SCVTF-scalar-integer */
bool LightRecompiler::SCVTF_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("H");
				r2 = string("W");
				break;
			}
			case 0x0: {
				r1 = string("S");
				r2 = string("W");
				break;
			}
			case 0x1: {
				r1 = string("D");
				r2 = string("W");
				break;
			}
			case 0x7: {
				r1 = string("H");
				r2 = string("X");
				break;
			}
			case 0x4: {
				r1 = string("S");
				r2 = string("X");
				break;
			}
			case 0x5: {
				r1 = string("D");
				r2 = string("X");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))))));
				break;
			}
			case 0x4: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())))));
				break;
			}
			case 0x5: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* SCVTF-scalar */
bool LightRecompiler::SCVTF_scalar(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("S")) : (string("D")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			VSR[(int) (rd)] = (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Bitcast<int32_t>())));
		} else {
			VDR[(int) (rd)] = (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Bitcast<int64_t>())));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SCVTF-vector */
bool LightRecompiler::SCVTF_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_1028) -> string { switch(temp_1028) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto n = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<int32_t>) ((n).Element<int32_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<int32_t>) ((n).Element<int32_t>(0x1)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<int32_t>) ((n).Element<int32_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<int32_t>) ((n).Element<int32_t>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<int32_t>) ((n).Element<int32_t>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<int32_t>) ((n).Element<int32_t>(0x3)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<int64_t>) ((n).Element<int64_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<int64_t>) ((n).Element<int64_t>(0x1)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* SDIV */
bool LightRecompiler::SDIV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto operand2 = ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((operand2) == (0x0))), (uint32_t) ((uint32_t) (0x0)), (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<float>) (((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))))))) / ((LightRuntimeValue<float>) (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (operand2))))))))))));
		} else {
			auto operand2 = ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((operand2) == (0x0))), (uint64_t) ((uint64_t) (0x0)), (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<double>) (((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))))))) / ((LightRuntimeValue<double>) (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (operand2)))))))))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SHL-vector */
bool LightRecompiler::SHL_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto immh = (inst >> 19) & 0xFU;
		auto immb = (inst >> 16) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = string("");
		auto size = 0x0;
		auto shift = 0x0;
		if(!((bool) (((immh) != (0x0)) ? 1U : 0U)))
			goto unimplemented;
		if(((bool) (((immh) == (0x1)) ? 1U : 0U)) != 0) {
			T = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
			size = 0x1;
			shift = (uint64_t) (((uint64_t) (uint32_t) ((uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (immb)) << 0)) | ((uint8_t) (((uint8_t) (immh)) << 3)))))))) - ((uint64_t) (int64_t) (0x8)));
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (immh)) & ((uint64_t) (0xE))))) == (0x2)) ? 1U : 0U)) != 0) {
				T = (string) ((Q != 0) ? (string("8H")) : (string("4H")));
				size = 0x2;
				shift = (uint64_t) (((uint64_t) (uint32_t) ((uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (immb)) << 0)) | ((uint8_t) (((uint8_t) (immh)) << 3)))))))) - ((uint64_t) (int64_t) (0x10)));
			} else {
				if(((bool) ((((uint8_t) ((((uint64_t) (immh)) & ((uint64_t) (0xC))))) == (0x4)) ? 1U : 0U)) != 0) {
					T = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
					size = 0x4;
					shift = (uint64_t) (((uint64_t) (uint32_t) ((uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (immb)) << 0)) | ((uint8_t) (((uint8_t) (immh)) << 3)))))))) - ((uint64_t) (int64_t) (0x20)));
				} else {
					T = (string) ((Q != 0) ? (string("2D")) : throw "Not implemented");
					size = 0x8;
					shift = (uint64_t) (((uint64_t) (uint32_t) ((uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (immb)) << 0)) | ((uint8_t) (((uint8_t) (immh)) << 3)))))))) - ((uint64_t) (int64_t) (0x20)));
				}
			}
		}
		auto sv = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch(size) {
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0x2))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0x3))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0x4))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0x5))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0x6))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0x7))) << (shift)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0x8))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0x9))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0xA))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0xB))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0xC))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0xD))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0xE))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((sv).Element<uint8_t>(0xF))) << (shift)));
				}
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((sv).Element<uint16_t>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((sv).Element<uint16_t>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((sv).Element<uint16_t>(0x2))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((sv).Element<uint16_t>(0x3))) << (shift)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((sv).Element<uint16_t>(0x4))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((sv).Element<uint16_t>(0x5))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((sv).Element<uint16_t>(0x6))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((sv).Element<uint16_t>(0x7))) << (shift)));
				}
				break;
			}
			case 0x4: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((sv).Element<uint32_t>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((sv).Element<uint32_t>(0x1))) << (shift)));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((sv).Element<uint32_t>(0x2))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((sv).Element<uint32_t>(0x3))) << (shift)));
				}
				break;
			}
			default: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((sv).Element<uint64_t>(0x0))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((sv).Element<uint64_t>(0x1))) << (shift)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* SMADDL */
bool LightRecompiler::SMADDL(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((ra) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) ra]()))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())), 32)))) * ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))))))));
		return true;
	}
unimplemented:
	return false;
}

/* SMULH */
bool LightRecompiler::SMULH(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<__int128_t>) (((LightRuntimeValue<__int128_t>) (((LightRuntimeValue<__int128_t>) (LightRuntimeValue<__int128_t>) ((LightRuntimeValue<__int128_t>) ((LightRuntimeValue<__int128_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))))))) * ((LightRuntimeValue<__int128_t>) (LightRuntimeValue<__int128_t>) ((LightRuntimeValue<__int128_t>) ((LightRuntimeValue<__int128_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))))))))) >> (0x40))))));
		return true;
	}
unimplemented:
	return false;
}

/* SSHLL */
bool LightRecompiler::SSHLL(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto immh = (inst >> 19) & 0xFU;
		auto immb = (inst >> 16) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto variant = (string) ((Q != 0) ? (string("2")) : (string("")));
		auto ta = string("");
		auto tb = string("");
		auto shift = (uint64_t) ((uint64_t) (0x0));
		if(((bool) (((immh) == (0x1)) ? 1U : 0U)) != 0) {
			ta = string("8H");
			tb = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
			shift = (uint64_t) (((uint64_t) (uint8_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (immb)) << 0)) | ((uint8_t) (((uint8_t) (immh)) << 3)))))) - ((uint64_t) (int64_t) (0x8)));
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (immh)) & ((uint64_t) (0xE))))) == (0x2)) ? 1U : 0U)) != 0) {
				ta = string("4S");
				tb = (string) ((Q != 0) ? (string("8H")) : (string("4H")));
				shift = (uint64_t) (((uint64_t) (uint8_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (immb)) << 0)) | ((uint8_t) (((uint8_t) (immh)) << 3)))))) - ((uint64_t) (int64_t) (0x10)));
			} else {
				if(((bool) ((((uint8_t) ((((uint64_t) (immh)) & ((uint64_t) (0xC))))) == (0x4)) ? 1U : 0U)) != 0) {
					ta = string("2D");
					tb = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
					shift = (uint64_t) (((uint64_t) (uint8_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (immb)) << 0)) | ((uint8_t) (((uint8_t) (immh)) << 3)))))) - ((uint64_t) (int64_t) (0x20)));
				} else {
					throw "Not implemented";
				}
			}
		}
		auto iv = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		if(((bool) (((immh) == (0x1)) ? 1U : 0U)) != 0) {
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<int16_t>) (((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int8_t>) ((iv).Element<int8_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x0)) + ((int64_t) (int64_t) (0x8)))) : (0x0))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<int16_t>) (((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int8_t>) ((iv).Element<int8_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x1)) + ((int64_t) (int64_t) (0x8)))) : (0x1))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<int16_t>) (((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int8_t>) ((iv).Element<int8_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x2)) + ((int64_t) (int64_t) (0x8)))) : (0x2))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<int16_t>) (((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int8_t>) ((iv).Element<int8_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x3)) + ((int64_t) (int64_t) (0x8)))) : (0x3))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<int16_t>) (((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int8_t>) ((iv).Element<int8_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x4)) + ((int64_t) (int64_t) (0x8)))) : (0x4))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<int16_t>) (((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int8_t>) ((iv).Element<int8_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x5)) + ((int64_t) (int64_t) (0x8)))) : (0x5))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<int16_t>) (((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int8_t>) ((iv).Element<int8_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x6)) + ((int64_t) (int64_t) (0x8)))) : (0x6))))))))) << (shift)));
			VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<int16_t>) (((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int16_t>) ((LightRuntimeValue<int8_t>) ((iv).Element<int8_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x7)) + ((int64_t) (int64_t) (0x8)))) : (0x7))))))))) << (shift)));
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (immh)) & ((uint64_t) (0xE))))) == (0x2)) ? 1U : 0U)) != 0) {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int16_t>) ((iv).Element<int16_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x0)) + ((int64_t) (int64_t) (0x4)))) : (0x0))))))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int16_t>) ((iv).Element<int16_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x1)) + ((int64_t) (int64_t) (0x4)))) : (0x1))))))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int16_t>) ((iv).Element<int16_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x2)) + ((int64_t) (int64_t) (0x4)))) : (0x2))))))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int16_t>) ((iv).Element<int16_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x3)) + ((int64_t) (int64_t) (0x4)))) : (0x3))))))))) << (shift)));
			} else {
				if(((bool) ((((uint8_t) ((((uint64_t) (immh)) & ((uint64_t) (0xC))))) == (0x4)) ? 1U : 0U)) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int32_t>) ((iv).Element<int32_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x0)) + ((int64_t) (int64_t) (0x2)))) : (0x0))))))))) << (shift)));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int32_t>) ((iv).Element<int32_t>((uint32_t) ((uint32_t) ((int64_t) ((Q != 0) ? ((int64_t) (((int64_t) (int64_t) (0x1)) + ((int64_t) (int64_t) (0x2)))) : (0x1))))))))) << (shift)));
				} else {
					throw "Not implemented";
				}
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-no-offset-one-register */
bool LightRecompiler::ST1_multi_no_offset_one_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto T = (string) (([=](auto temp_1029) -> string { switch(temp_1029) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-postindex-immediate-one-register */
bool LightRecompiler::ST1_multi_postindex_immediate_one_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (uint8_t) ((uint8_t) ((int64_t) ((Q != 0) ? (0x20) : (0x10))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1030) -> string { switch(temp_1030) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-postindex-register-one-register */
bool LightRecompiler::ST1_multi_postindex_register_one_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1031) -> string { switch(temp_1031) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-no-offset-two-registers */
bool LightRecompiler::ST1_multi_no_offset_two_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_1032) -> string { switch(temp_1032) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-postindex-immediate-two-registers */
bool LightRecompiler::ST1_multi_postindex_immediate_two_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (uint8_t) ((uint8_t) ((int64_t) ((Q != 0) ? (0x20) : (0x10))));
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1033) -> string { switch(temp_1033) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-postindex-register-two-registers */
bool LightRecompiler::ST1_multi_postindex_register_two_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1034) -> string { switch(temp_1034) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto oaddress = (address).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (oaddress)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (oaddress)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-no-offset-three-registers */
bool LightRecompiler::ST1_multi_no_offset_three_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_1035) -> string { switch(temp_1035) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-postindex-immediate-three-registers */
bool LightRecompiler::ST1_multi_postindex_immediate_three_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (uint8_t) ((uint8_t) ((int64_t) ((Q != 0) ? (0x30) : (0x18))));
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1036) -> string { switch(temp_1036) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-postindex-register-three-registers */
bool LightRecompiler::ST1_multi_postindex_register_three_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1037) -> string { switch(temp_1037) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto oaddress = (address).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (oaddress)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (oaddress)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-no-offset-four-registers */
bool LightRecompiler::ST1_multi_no_offset_four_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt4 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x3))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_1038) -> string { switch(temp_1038) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt4)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-postindex-immediate-four-registers */
bool LightRecompiler::ST1_multi_postindex_immediate_four_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (uint8_t) ((uint8_t) ((int64_t) ((Q != 0) ? (0x40) : (0x20))));
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt4 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x3))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1039) -> string { switch(temp_1039) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt4)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		return true;
	}
unimplemented:
	return false;
}

/* ST1-multi-postindex-register-four-registers */
bool LightRecompiler::ST1_multi_postindex_register_four_registers(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt4 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x3))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1040) -> string { switch(temp_1040) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto oaddress = (address).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		address = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((Q != 0) ? (0x10) : (0x8)))));
		v = (LightRuntimeValue<Vector128<float>>) (VR[(int) (rt4)]);
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((v).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((v).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (oaddress)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (oaddress)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* ST1-single-no-offset */
bool LightRecompiler::ST1_single_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto opc = (inst >> 14) & 0x3U;
		auto S = (inst >> 12) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		if(!((bool) (((opc) != (0x3)) ? 1U : 0U)))
			goto unimplemented;
		auto t = (string) (((bool) (((opc) == (0x0)) ? 1U : 0U) != 0) ? (string("B")) : ((string) (((bool) ((((bool) ((bool) (((opc) == (0x1)) ? 1U : 0U))) & ((bool) ((bool) ((((uint8_t) ((((uint64_t) (size)) & ((uint64_t) (0x1))))) == (0x0)) ? 1U : 0U))))) != 0) ? (string("H")) : ((string) (((bool) (((opc) == (0x2)) ? 1U : 0U) != 0) ? ((string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("S")) : ((string) (((bool) ((((bool) ((bool) (((size) == (0x1)) ? 1U : 0U))) & ((bool) ((bool) (((S) == (0x0)) ? 1U : 0U))))) != 0) ? (string("D")) : throw "Not implemented")))) : throw "Not implemented")))));
		auto index = (uint32_t) (([=](auto temp_1041) -> uint32_t { switch(temp_1041) { case 0x0: return (uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (size)) << 0)) | ((uint8_t) (((uint8_t) (S)) << 2)))) | ((uint8_t) (((uint8_t) (Q)) << 3)))))); case 0x1: return (uint32_t) (((uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) (size)) << 0)) | ((uint8_t) (((uint8_t) (S)) << 2)))) | ((uint8_t) (((uint8_t) (Q)) << 3))))))) >> (uint) (0x1)); case 0x2: return (uint32_t) (((bool) ((((uint8_t) ((((uint64_t) (size)) & ((uint64_t) (0x1))))) == (0x0)) ? 1U : 0U) != 0) ? ((uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (S)) << 0)) | ((uint8_t) (((uint8_t) (Q)) << 1))))))) : (Q)); default: throw "Not implemented"; } })(opc));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		switch(opc) {
			case 0x0: {
				((LightRuntimePointer<uint8_t>) (address)).value((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(index)));
				break;
			}
			case 0x1: {
				((LightRuntimePointer<uint16_t>) (address)).value((LightRuntimeValue<uint16_t>) ((v).Element<uint16_t>(index)));
				break;
			}
			case 0x2: {
				if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
					((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) ((v).Element<float>(index)));
				} else {
					((LightRuntimePointer<double>) (address)).value((LightRuntimeValue<double>) ((v).Element<double>(index)));
				}
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST2-multi-no-offset */
bool LightRecompiler::ST2_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_1042) -> string { switch(temp_1042) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x1)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST2-multi-postindex-immediate */
bool LightRecompiler::ST2_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto imm = (uint8_t) ((uint8_t) ((int64_t) ((Q != 0) ? (0x20) : (0x10))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1043) -> string { switch(temp_1043) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* ST2-multi-postindex-register */
bool LightRecompiler::ST2_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1044) -> string { switch(temp_1044) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* ST3-multi-no-offset */
bool LightRecompiler::ST3_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_1045) -> string { switch(temp_1045) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x1)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST3-multi-postindex-immediate */
bool LightRecompiler::ST3_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto imm = (uint8_t) ((uint8_t) ((int64_t) ((Q != 0) ? (0x30) : (0x18))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1046) -> string { switch(temp_1046) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* ST3-multi-postindex-register */
bool LightRecompiler::ST3_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1047) -> string { switch(temp_1047) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* ST4-multi-no-offset */
bool LightRecompiler::ST4_multi_no_offset(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt4 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x3))))) % ((uint64_t) (int64_t) (0x20)));
		auto T = (string) (([=](auto temp_1048) -> string { switch(temp_1048) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		auto d = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt4)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x31)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x33)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x35)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x37)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x39)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<double>) ((d).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<double>) ((d).Element<double>(0x1)));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* ST4-multi-postindex-immediate */
bool LightRecompiler::ST4_multi_postindex_immediate(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt4 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x3))))) % ((uint64_t) (int64_t) (0x20)));
		auto imm = (uint8_t) ((uint8_t) ((int64_t) ((Q != 0) ? (0x40) : (0x2B))));
		if(!((bool) (((rm) == (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1049) -> string { switch(temp_1049) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		auto d = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt4)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x31)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x33)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x35)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x37)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x39)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<double>) ((d).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<double>) ((d).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint8_t>) (imm)));
		return true;
	}
unimplemented:
	return false;
}

/* ST4-multi-postindex-register */
bool LightRecompiler::ST4_multi_postindex_register(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto size = (inst >> 10) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rt2 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x1))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt3 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x2))))) % ((uint64_t) (int64_t) (0x20)));
		auto rt4 = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (((uint64_t) (uint8_t) (rt)) + ((uint64_t) (int64_t) (0x3))))) % ((uint64_t) (int64_t) (0x20)));
		if(!((bool) (((rm) != (0x1F)) ? 1U : 0U)))
			goto unimplemented;
		auto T = (string) (([=](auto temp_1050) -> string { switch(temp_1050) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)])).Store();
		auto c = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt3)])).Store();
		auto d = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt4)])).Store();
		switch(size) {
			case 0x0: {
				if((Q) != 0) {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x21)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x23)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x8)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x25)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x27)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x9)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x29)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xA)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xB)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x31)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x33)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xC)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x35)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x37)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xD)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x39)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xE)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0xF)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0xF)));
				} else {
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x0)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x5)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x7)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x1)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x9)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xB)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x2)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xD)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xF)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x3)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x11)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x13)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x4)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x15)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x17)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x5)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x19)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1B)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x6)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint8_t>) ((a).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1D)))))).value((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint8_t>) ((c).Element<uint8_t>(0x7)));
					((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1F)))))).value((LightRuntimeValue<uint8_t>) ((d).Element<uint8_t>(0x7)));
				}
				break;
			}
			case 0x1: {
				if((Q) != 0) {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x22)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x26)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x4)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x5)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x32)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x36)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x6)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x7)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x7)));
				} else {
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x6)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x0)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xA)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xE)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x1)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x12)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x16)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x2)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1A)))))).value((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<uint16_t>) ((c).Element<uint16_t>(0x3)));
					((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1E)))))).value((LightRuntimeValue<uint16_t>) ((d).Element<uint16_t>(0x3)));
				}
				break;
			}
			case 0x2: {
				if((Q) != 0) {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x24)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x2C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x2)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x34)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x3)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x3C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x3)));
				} else {
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x4)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0xC)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x0)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<float>) ((a).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x14)))))).value((LightRuntimeValue<float>) ((b).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<float>) ((c).Element<float>(0x1)));
					((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x1C)))))).value((LightRuntimeValue<float>) ((d).Element<float>(0x1)));
				}
				break;
			}
			default: {
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x0)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x8)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x10)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x18)))))).value((LightRuntimeValue<double>) ((d).Element<double>(0x0)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x20)))))).value((LightRuntimeValue<double>) ((a).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x28)))))).value((LightRuntimeValue<double>) ((b).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x30)))))).value((LightRuntimeValue<double>) ((c).Element<double>(0x1)));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) ((int64_t) (0x38)))))).value((LightRuntimeValue<double>) ((d).Element<double>(0x1)));
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))));
		return true;
	}
unimplemented:
	return false;
}

/* STLR */
bool LightRecompiler::STLR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value((LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())));
		} else {
			((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))).value((LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()));
		}
		return true;
	}
unimplemented:
	return false;
}

/* STLRB */
bool LightRecompiler::STLRB(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		((LightRuntimePointer<uint8_t>) (address)).value((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())))));
		return true;
	}
unimplemented:
	return false;
}

/* STLRH */
bool LightRecompiler::STLRH(uint inst, ulong pc) {
	{
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		((LightRuntimePointer<uint16_t>) (address)).value((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())))));
		return true;
	}
unimplemented:
	return false;
}

/* STLXR */
bool LightRecompiler::STLXR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((LightRuntimePointer<uint32_t>) (address)).value((LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())));
		} else {
			((LightRuntimePointer<uint64_t>) (address)).value((LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()));
		}
		XR[(int) rs] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (0x0);
		return true;
	}
unimplemented:
	return false;
}

/* STLXRB */
bool LightRecompiler::STLXRB(uint inst, ulong pc) {
	{
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		((LightRuntimePointer<uint8_t>) (address)).value((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())))));
		XR[(int) rs] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) (0x0);
		return true;
	}
unimplemented:
	return false;
}

/* STP-postindex */
bool LightRecompiler::STP_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) ((int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]())).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((LightRuntimePointer<uint32_t>) (address)).value((LightRuntimeValue<uint32_t>) ((rt1) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt1]())));
			((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value((LightRuntimeValue<uint32_t>) ((rt2) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt2]())));
		} else {
			((LightRuntimePointer<uint64_t>) (address)).value((LightRuntimeValue<uint64_t>) ((rt1) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt1]()));
			((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value((LightRuntimeValue<uint64_t>) ((rt2) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt2]()));
		}
		if(rd == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		else
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STP-preindex */
bool LightRecompiler::STP_preindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) ((int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((LightRuntimePointer<uint32_t>) (address)).value((LightRuntimeValue<uint32_t>) ((rt1) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt1]())));
			((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value((LightRuntimeValue<uint32_t>) ((rt2) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt2]())));
		} else {
			((LightRuntimePointer<uint64_t>) (address)).value((LightRuntimeValue<uint64_t>) ((rt1) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt1]()));
			((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value((LightRuntimeValue<uint64_t>) ((rt2) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt2]()));
		}
		if(rd == 31)
			SPR = address;
		else
			XR[(int) rd] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STP-signed-offset */
bool LightRecompiler::STP_signed_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) ((int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((LightRuntimePointer<uint32_t>) (address)).value((LightRuntimeValue<uint32_t>) ((rt1) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt1]())));
			((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value((LightRuntimeValue<uint32_t>) ((rt2) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt2]())));
		} else {
			((LightRuntimePointer<uint64_t>) (address)).value((LightRuntimeValue<uint64_t>) ((rt1) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt1]()));
			((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value((LightRuntimeValue<uint64_t>) ((rt2) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt2]()));
		}
		return true;
	}
unimplemented:
	return false;
}

/* STP-simd-postindex */
bool LightRecompiler::STP_simd_postindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_1051) -> string { switch(temp_1051) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(opc));
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) ((int64_t) (([=](auto temp_1052) -> int64_t { switch(temp_1052) { case 0x0: return 0x2; case 0x1: return 0x3; case 0x2: return 0x4; default: throw "Not implemented"; } })(opc))));
		auto address = ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]())).Store();
		switch(opc) {
			case 0x0: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VSR[(int) (rt1)]));
				((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value((LightRuntimeValue<float>) (VSR[(int) (rt2)]));
				break;
			}
			case 0x1: {
				((LightRuntimePointer<double>) (address)).value((LightRuntimeValue<double>) (VDR[(int) (rt1)]));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value((LightRuntimeValue<double>) (VDR[(int) (rt2)]));
				break;
			}
			case 0x2: {
				((LightRuntimePointer<Vector128<float>>) (address)).value((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt1)]));
				((LightRuntimePointer<Vector128<float>>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x10))))).value((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rd == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		else
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STP-simd-preindex */
bool LightRecompiler::STP_simd_preindex(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_1053) -> string { switch(temp_1053) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(opc));
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) ((int64_t) (([=](auto temp_1054) -> int64_t { switch(temp_1054) { case 0x0: return 0x2; case 0x1: return 0x3; case 0x2: return 0x4; default: throw "Not implemented"; } })(opc))));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		switch(opc) {
			case 0x0: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VSR[(int) (rt1)]));
				((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value((LightRuntimeValue<float>) (VSR[(int) (rt2)]));
				break;
			}
			case 0x1: {
				((LightRuntimePointer<double>) (address)).value((LightRuntimeValue<double>) (VDR[(int) (rt1)]));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value((LightRuntimeValue<double>) (VDR[(int) (rt2)]));
				break;
			}
			case 0x2: {
				((LightRuntimePointer<Vector128<float>>) (address)).value((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt1)]));
				((LightRuntimePointer<Vector128<float>>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x10))))).value((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rd == 31)
			SPR = address;
		else
			XR[(int) rd] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STP-simd-signed-offset */
bool LightRecompiler::STP_simd_signed_offset(uint inst, ulong pc) {
	{
		auto opc = (inst >> 30) & 0x3U;
		auto imm = (inst >> 15) & 0x7FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rt1 = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_1055) -> string { switch(temp_1055) { case 0x0: return string("S"); case 0x1: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(opc));
		auto simm = (int64_t) (((int64_t) (SignExt<int64_t>(imm, 7))) << (uint) ((int64_t) (([=](auto temp_1056) -> int64_t { switch(temp_1056) { case 0x0: return 0x2; case 0x1: return 0x3; case 0x2: return 0x4; default: throw "Not implemented"; } })(opc))));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		switch(opc) {
			case 0x0: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VSR[(int) (rt1)]));
				((LightRuntimePointer<float>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4))))).value((LightRuntimeValue<float>) (VSR[(int) (rt2)]));
				break;
			}
			case 0x1: {
				((LightRuntimePointer<double>) (address)).value((LightRuntimeValue<double>) (VDR[(int) (rt1)]));
				((LightRuntimePointer<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8))))).value((LightRuntimeValue<double>) (VDR[(int) (rt2)]));
				break;
			}
			case 0x2: {
				((LightRuntimePointer<Vector128<float>>) (address)).value((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt1)]));
				((LightRuntimePointer<Vector128<float>>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x10))))).value((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt2)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* STR-immediate-postindex */
bool LightRecompiler::STR_immediate_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (int64_t) (SignExt<int64_t>(imm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]())).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((LightRuntimePointer<uint32_t>) (address)).value((LightRuntimeValue<uint32_t>) ((rs) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rs]())));
		} else {
			((LightRuntimePointer<uint64_t>) (address)).value((LightRuntimeValue<uint64_t>) ((rs) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rs]()));
		}
		if(rd == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		else
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STR-immediate-preindex */
bool LightRecompiler::STR_immediate_preindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto simm = (int64_t) (SignExt<int64_t>(imm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((LightRuntimePointer<uint32_t>) (address)).value((LightRuntimeValue<uint32_t>) ((rs) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rs]())));
		} else {
			((LightRuntimePointer<uint64_t>) (address)).value((LightRuntimeValue<uint64_t>) ((rs) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rs]()));
		}
		if(rd == 31)
			SPR = address;
		else
			XR[(int) rd] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STR-immediate-unsigned-offset */
bool LightRecompiler::STR_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto pimm = (uint64_t) (((uint64_t) ((uint64_t) (imm))) << (uint) ((int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (pimm))))).value((LightRuntimeValue<uint32_t>) ((rs) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rs]())));
		} else {
			((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (pimm))))).value((LightRuntimeValue<uint64_t>) ((rs) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rs]()));
		}
		return true;
	}
unimplemented:
	return false;
}

/* STR-register */
bool LightRecompiler::STR_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto scale = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto amount = (int64_t) (((bool) (((scale) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : ((int64_t) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (0x2) : (0x3))));
		auto extend = (string) (([=](auto temp_1057) -> string { switch(temp_1057) { case 0x2: return string("UXTW"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: return string("LSL"); } })(option));
		auto offset = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((LightRuntimeValue<uint64_t>) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1))))) != 0 ? ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value((LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())));
		} else {
			((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value((LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()));
		}
		return true;
	}
unimplemented:
	return false;
}

/* STR-simd-postindex */
bool LightRecompiler::STR_simd_postindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rop = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) ((bool) ((bool) (0x0)))) << 0)) | ((uint8_t) (((uint8_t) (opc)) << 1)))) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r = (string) (([=](auto temp_1058) -> string { switch(temp_1058) { case 0x0: return string("B"); case 0x4: return string("H"); case 0x8: return string("S"); case 0xC: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(rop));
		auto simm = (int64_t) (SignExt<int64_t>(imm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		switch(rop) {
			case 0x0: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VBR[(int) (rt)]));
				break;
			}
			case 0x4: {
				((LightRuntimePointer<uint16_t>) (address)).value((LightRuntimeValue<uint16_t>) (VHR[(int) (rt)]));
				break;
			}
			case 0x8: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VSR[(int) (rt)]));
				break;
			}
			case 0xC: {
				((LightRuntimePointer<double>) (address)).value((LightRuntimeValue<double>) (VDR[(int) (rt)]));
				break;
			}
			case 0x2: {
				((LightRuntimePointer<Vector128<float>>) (address)).value((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rn == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		else
			XR[(int) rn] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STR-simd-preindex */
bool LightRecompiler::STR_simd_preindex(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rop = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) ((bool) ((bool) (0x0)))) << 0)) | ((uint8_t) (((uint8_t) (opc)) << 1)))) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r = (string) (([=](auto temp_1059) -> string { switch(temp_1059) { case 0x0: return string("B"); case 0x4: return string("H"); case 0x8: return string("S"); case 0xC: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(rop));
		auto scale = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (size)) << 0)) | ((uint8_t) (((uint8_t) (opc)) << 2))));
		auto simm = (int64_t) (SignExt<int64_t>(imm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		switch(rop) {
			case 0x0: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VBR[(int) (rt)]));
				break;
			}
			case 0x4: {
				((LightRuntimePointer<uint16_t>) (address)).value((LightRuntimeValue<uint16_t>) (VHR[(int) (rt)]));
				break;
			}
			case 0x8: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VSR[(int) (rt)]));
				break;
			}
			case 0xC: {
				((LightRuntimePointer<double>) (address)).value((LightRuntimeValue<double>) (VDR[(int) (rt)]));
				break;
			}
			case 0x2: {
				((LightRuntimePointer<Vector128<float>>) (address)).value((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		if(rn == 31)
			SPR = address;
		else
			XR[(int) rn] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STR-simd-unsigned-offset */
bool LightRecompiler::STR_simd_unsigned_offset(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rop = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) ((bool) ((bool) (0x0)))) << 0)) | ((uint8_t) (((uint8_t) (opc)) << 1)))) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r = (string) (([=](auto temp_1060) -> string { switch(temp_1060) { case 0x0: return string("B"); case 0x4: return string("H"); case 0x8: return string("S"); case 0xC: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(rop));
		auto scale = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (size)) << 0)) | ((uint8_t) (((uint8_t) (opc)) << 2))));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) ((uint16_t) ((imm) << (uint) (scale)))))).Store();
		switch(rop) {
			case 0x0: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VBR[(int) (rt)]));
				break;
			}
			case 0x4: {
				((LightRuntimePointer<uint16_t>) (address)).value((LightRuntimeValue<uint16_t>) (VHR[(int) (rt)]));
				break;
			}
			case 0x8: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VSR[(int) (rt)]));
				break;
			}
			case 0xC: {
				((LightRuntimePointer<double>) (address)).value((LightRuntimeValue<double>) (VDR[(int) (rt)]));
				break;
			}
			case 0x2: {
				((LightRuntimePointer<Vector128<float>>) (address)).value((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* STR-simd-register */
bool LightRecompiler::STR_simd_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto scale = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rop = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) ((bool) ((bool) (0x0)))) << 0)) | ((uint8_t) (((uint8_t) (opc)) << 1)))) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r1 = (string) (([=](auto temp_1061) -> string { switch(temp_1061) { case 0x0: return string("B"); case 0x4: return string("H"); case 0x8: return string("S"); case 0xC: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(rop));
		auto r2 = (string) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto amount = (int64_t) (((bool) (((scale) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : ((int64_t) (([=](auto temp_1062) -> int64_t { switch(temp_1062) { case 0x1: return 0x1; case 0x2: return 0x2; case 0x3: return 0x3; default: return (int64_t) (((bool) (((opc) == (0x1)) ? 1U : 0U) != 0) ? (0x4) : (0x0)); } })(size))));
		auto extend = (string) (([=](auto temp_1063) -> string { switch(temp_1063) { case 0x2: return string("UXTW"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: return string("LSL"); } })(option));
		auto offset = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((LightRuntimeValue<uint64_t>) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1))))) != 0 ? ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset)))).Store();
		switch(rop) {
			case 0x0: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VBR[(int) (rt)]));
				break;
			}
			case 0x4: {
				((LightRuntimePointer<uint16_t>) (address)).value((LightRuntimeValue<uint16_t>) (VHR[(int) (rt)]));
				break;
			}
			case 0x8: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VSR[(int) (rt)]));
				break;
			}
			case 0xC: {
				((LightRuntimePointer<double>) (address)).value((LightRuntimeValue<double>) (VDR[(int) (rt)]));
				break;
			}
			case 0x2: {
				((LightRuntimePointer<Vector128<float>>) (address)).value((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* STRB-immediate-postindex */
bool LightRecompiler::STRB_immediate_postindex(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto simm = (int64_t) (SignExt<int64_t>(imm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]())).Store();
		((LightRuntimePointer<uint8_t>) (address)).value((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint32_t>) ((rs) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rs]())))));
		if(rd == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		else
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STRB-immediate-preindex */
bool LightRecompiler::STRB_immediate_preindex(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto simm = (int64_t) (SignExt<int64_t>(imm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		((LightRuntimePointer<uint8_t>) (address)).value((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint32_t>) ((rs) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rs]())))));
		if(rd == 31)
			SPR = address;
		else
			XR[(int) rd] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STRB-immediate-unsigned-offset */
bool LightRecompiler::STRB_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) (imm))))).value((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()))));
		return true;
	}
unimplemented:
	return false;
}

/* STRB-register */
bool LightRecompiler::STRB_register(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_1064) -> string { switch(temp_1064) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((LightRuntimeValue<uint64_t>) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1))))) != 0 ? ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())))));
		return true;
	}
unimplemented:
	return false;
}

/* STRH-immediate-postindex */
bool LightRecompiler::STRH_immediate_postindex(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto simm = (int64_t) (SignExt<int64_t>(imm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]())).Store();
		((LightRuntimePointer<uint16_t>) (address)).value((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint32_t>) ((rs) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rs]())))));
		if(rd == 31)
			SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		else
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)));
		return true;
	}
unimplemented:
	return false;
}

/* STRH-immediate-preindex */
bool LightRecompiler::STRH_immediate_preindex(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rd = (inst >> 5) & 0x1FU;
		auto rs = (inst >> 0) & 0x1FU;
		auto simm = (int64_t) (SignExt<int64_t>(imm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rd) == 31 ? SPR() : XR[(int) rd]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		((LightRuntimePointer<uint16_t>) (address)).value((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint32_t>) ((rs) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rs]())))));
		if(rd == 31)
			SPR = address;
		else
			XR[(int) rd] = address;
		return true;
	}
unimplemented:
	return false;
}

/* STRH-immediate-unsigned-offset */
bool LightRecompiler::STRH_immediate_unsigned_offset(uint inst, ulong pc) {
	{
		auto rawimm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto imm = (uint16_t) ((rawimm) << (uint) (0x1));
		((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint16_t>) (imm))))).value((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()))));
		return true;
	}
unimplemented:
	return false;
}

/* STRH-register */
bool LightRecompiler::STRH_register(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto amount = (inst >> 12) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1)))) != 0) ? (string("X")) : (string("W")));
		auto str = (string) (([=](auto temp_1065) -> string { switch(temp_1065) { case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x6: return string("SXTW"); case 0x7: return string("SXTX"); default: throw "Not implemented"; } })(option));
		auto offset = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((bool) (((option) == (0x6)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]())), 32))))) : ((LightRuntimeValue<uint64_t>) (((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x1))))) != 0 ? ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) : ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))))) << (amount))).Store();
		((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (offset))))).value((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())))));
		return true;
	}
unimplemented:
	return false;
}

/* STUR */
bool LightRecompiler::STUR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto offset = (int64_t) (SignExt<int64_t>(imm, 9));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (offset))))).value((LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())));
		} else {
			((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (offset))))).value((LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()));
		}
		return true;
	}
unimplemented:
	return false;
}

/* STUR-simd */
bool LightRecompiler::STUR_simd(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x3U;
		auto opc = (inst >> 23) & 0x1U;
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto rop = (uint8_t) ((uint8_t) (((uint8_t) (uint8_t) (((uint8_t) (((uint8_t) ((bool) ((bool) (0x0)))) << 0)) | ((uint8_t) (((uint8_t) (opc)) << 1)))) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r = (string) (([=](auto temp_1066) -> string { switch(temp_1066) { case 0x0: return string("B"); case 0x4: return string("H"); case 0x8: return string("S"); case 0xC: return string("D"); case 0x2: return string("Q"); default: throw "Not implemented"; } })(rop));
		auto simm = (int64_t) (SignExt<int64_t>(imm, 9));
		auto address = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (simm)))).Store();
		switch(rop) {
			case 0x0: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VBR[(int) (rt)]));
				break;
			}
			case 0x4: {
				((LightRuntimePointer<uint16_t>) (address)).value((LightRuntimeValue<uint16_t>) (VHR[(int) (rt)]));
				break;
			}
			case 0x8: {
				((LightRuntimePointer<float>) (address)).value((LightRuntimeValue<float>) (VSR[(int) (rt)]));
				break;
			}
			case 0xC: {
				((LightRuntimePointer<double>) (address)).value((LightRuntimeValue<double>) (VDR[(int) (rt)]));
				break;
			}
			case 0x2: {
				((LightRuntimePointer<Vector128<float>>) (address)).value((LightRuntimeValue<Vector128<float>>) (VR[(int) (rt)]));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* STURB */
bool LightRecompiler::STURB(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto offset = (int64_t) (SignExt<int64_t>(imm, 9));
		((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (offset))))).value((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()))));
		return true;
	}
unimplemented:
	return false;
}

/* STURH */
bool LightRecompiler::STURH(uint inst, ulong pc) {
	{
		auto imm = (inst >> 12) & 0x1FFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto offset = (int64_t) (SignExt<int64_t>(imm, 9));
		((LightRuntimePointer<uint16_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (offset))))).value((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()))));
		return true;
	}
unimplemented:
	return false;
}

/* STXRB */
bool LightRecompiler::STXRB(uint inst, ulong pc) {
	{
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		XR[(int) rs] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<bool>) (CompareAndSwap((LightRuntimePointer<uint8_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())), (LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())))), Exclusive8R())));
		return true;
	}
unimplemented:
	return false;
}

/* STXR */
bool LightRecompiler::STXR(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		XR[(int) rs] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<bool>) (((bool) (((size) == (0x0)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<bool>) (CompareAndSwap((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())), (LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())), Exclusive32R()))) : ((LightRuntimeValue<bool>) (CompareAndSwap((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())), (LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()), Exclusive64R())))));
		return true;
	}
unimplemented:
	return false;
}

/* STXP */
bool LightRecompiler::STXP(uint inst, ulong pc) {
	{
		auto size = (inst >> 30) & 0x1U;
		auto rs = (inst >> 16) & 0x1FU;
		auto rt2 = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto address = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())).Store();
		XR[(int) rs] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<bool>) (((bool) (((size) == (0x0)) ? 1U : 0U)) != 0 ? ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (CompareAndSwap((LightRuntimePointer<uint32_t>) (address), (LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())), Exclusive32R())))) | ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (CompareAndSwap((LightRuntimePointer<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x4)))), (LightRuntimeValue<uint32_t>) ((rt) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rt]())), Exclusive32R()))))))) : ((LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (CompareAndSwap((LightRuntimePointer<uint64_t>) (address), (LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()), Exclusive64R())))) | ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (CompareAndSwap((LightRuntimePointer<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (address)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<int64_t>) (0x8)))), (LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]()), Exclusive64R())))))))));
		return true;
	}
unimplemented:
	return false;
}

/* SUB-immediate */
bool LightRecompiler::SUB_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto sh = (inst >> 22) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shift = (int64_t) (((bool) (((sh) == (0x0)) ? 1U : 0U) != 0) ? (0x0) : (0xC));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (shift))))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (shift))))));
		} else {
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) (((uint64_t) ((uint64_t) (imm))) << (uint) (shift)))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) (((uint64_t) ((uint64_t) (imm))) << (uint) (shift)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SUB-extended-register */
bool LightRecompiler::SUB_extended_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto imm = (inst >> 10) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((bool) ((((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x3))))) == (0x3)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto extend = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? ((string) (([=](auto temp_1067) -> string { switch(temp_1067) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("LSL"); case 0x3: return string("UXTX"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))) : ((string) (([=](auto temp_1068) -> string { switch(temp_1068) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto m = ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))).Store();
			if(rd == 31)
				SPR = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (([=](auto temp_1069) -> LightRuntimeValue<uint32_t> { switch(temp_1069) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x4: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); default: return m; } })(option))) << (imm))))));
			else
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (([=](auto temp_1070) -> LightRuntimeValue<uint32_t> { switch(temp_1070) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x4: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); default: return m; } })(option))) << (imm))))));
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x3))))) == (0x3)) ? 1U : 0U)) != 0) {
				if(rd == 31)
					SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm)))));
				else
					XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm)))));
			} else {
				auto m = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))).Store();
				if(rd == 31)
					SPR = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (([=](auto temp_1071) -> LightRuntimeValue<uint64_t> { switch(temp_1071) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFFFFFF))))); case 0x4: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); case 0x6: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>(m, 64))))); default: return m; } })(option))) << (imm)))));
				else
					XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]()))) - ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (([=](auto temp_1072) -> LightRuntimeValue<uint64_t> { switch(temp_1072) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFFFFFF))))); case 0x4: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); case 0x6: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>(m, 64))))); default: return m; } })(option))) << (imm)))));
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* SUB-shifted-register */
bool LightRecompiler::SUB_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_1073) -> string { switch(temp_1073) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) - ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=](auto temp_1074) -> LightRuntimeValue<uint32_t> { switch(temp_1074) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) - ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (([=](auto temp_1075) -> LightRuntimeValue<uint64_t> { switch(temp_1075) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* SUBS-extended-register */
bool LightRecompiler::SUBS_extended_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto option = (inst >> 13) & 0x7U;
		auto imm = (inst >> 10) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r1 = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto r2 = (string) (((bool) ((((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x3))))) == (0x3)) ? 1U : 0U) != 0) ? (string("X")) : (string("W")));
		auto extend = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? ((string) (([=](auto temp_1076) -> string { switch(temp_1076) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("LSL"); case 0x3: return string("UXTX"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))) : ((string) (([=](auto temp_1077) -> string { switch(temp_1077) { case 0x0: return string("UXTB"); case 0x1: return string("UXTH"); case 0x2: return string("UXTW"); case 0x3: return string("LSL"); case 0x4: return string("SXTB"); case 0x5: return string("SXTH"); case 0x6: return string("SXTW"); default: return string("SXTX"); } })(option))));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto m = ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=]() -> LightRuntimeValue<uint32_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (~((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (([=](auto temp_1078) -> LightRuntimeValue<uint32_t> { switch(temp_1078) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x4: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (SignExtRuntime<int32_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); default: return m; } })(option))) << (imm))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint32_t) ((uint32_t) (0x1));
					auto bits = (int32_t) (32);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint32_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (option)) & ((uint64_t) (0x3))))) == (0x3)) ? 1U : 0U)) != 0) {
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
						auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
						auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (~((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << (imm))))))).Store();
						auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint64_t) ((uint64_t) (0x1));
						auto bits = (int32_t) (64);
						auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
						auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
						auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
						NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
						NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
						NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
						NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
						return (usum).Store();
					})());
			} else {
				auto m = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))).Store();
				XR[(int) rd] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
						auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? SPR() : XR[(int) rn]())))).Store();
						auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (~((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (([=](auto temp_1079) -> LightRuntimeValue<uint64_t> { switch(temp_1079) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFF))))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFF))))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (m)) & ((LightRuntimeValue<uint64_t>) (0xFFFFFFFF))))); case 0x4: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (m)), 8))))); case 0x5: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (m)), 16))))); case 0x6: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (SignExtRuntime<int64_t>(m, 64))))); default: return m; } })(option))) << (imm))))))).Store();
						auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint64_t) ((uint64_t) (0x1));
						auto bits = (int32_t) (64);
						auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
						auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
						auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
						NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
						NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
						NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
						NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
						return (usum).Store();
					})());
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* SUBS-shifted-register */
bool LightRecompiler::SUBS_shifted_register(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto imm = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto mode32 = (bool) (((size) == (0x0)) ? 1U : 0U);
		auto r = (string) ((mode32 != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_1080) -> string { switch(temp_1080) { case 0x0: return string("LSL"); case 0x1: return string("LSR"); case 0x2: return string("ASR"); default: return string("ROR"); } })(shift));
		if((mode32) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=]() -> LightRuntimeValue<uint32_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (~((LightRuntimeValue<uint32_t>) (([=](auto temp_1081) -> LightRuntimeValue<uint32_t> { switch(temp_1081) { case 0x0: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) << (imm))); case 0x1: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> (imm))); case 0x2: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))) >> (imm))))); default: return (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) << ((LightRuntimeValue<uint>) (32 - (imm)))) | (((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint32_t) ((uint32_t) (0x1));
					auto bits = (int32_t) (32);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint32_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (~((LightRuntimeValue<uint64_t>) (([=](auto temp_1082) -> LightRuntimeValue<uint64_t> { switch(temp_1082) { case 0x0: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) << (imm))); case 0x1: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> (imm))); case 0x2: return (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())))) >> (imm))))); default: return (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) << ((LightRuntimeValue<uint>) (64 - (imm)))) | (((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())) >> ((LightRuntimeValue<uint>) (imm)))); } })(shift))))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint64_t) ((uint64_t) (0x1));
					auto bits = (int32_t) (64);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* SUBS-immediate */
bool LightRecompiler::SUBS_immediate(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto shift = (inst >> 22) & 0x1U;
		auto imm = (inst >> 10) & 0xFFFU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto shiftstr = (string) (([=](auto temp_1083) -> string { switch(temp_1083) { case 0x0: return string("LSL #0"); case 0x1: return string("LSL #12"); default: throw "Not implemented"; } })(shift));
		auto rimm = (uint32_t) ((shift != 0) ? ((uint32_t) (((uint32_t) ((uint32_t) (imm))) << (uint) (0xC))) : (imm));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=]() -> LightRuntimeValue<uint32_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint32_t) ((uint32_t) ((uint32_t) (~((uint32_t) ((uint32_t) (rimm))))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint32_t) ((uint32_t) (0x1));
					auto bits = (int32_t) (32);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) ((LightRuntimeValue<int32_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int32_t>) (LightRuntimeValue<int32_t>) ((int32_t) ((int32_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint32_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint32_t) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint32_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint32_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})()));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (([=]() -> LightRuntimeValue<uint64_t> {
					auto __macro_add_with_carry_set_nzcv_common_operand1 = ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())))).Store();
					auto __macro_add_with_carry_set_nzcv_common_operand2 = (uint64_t) ((uint64_t) ((uint64_t) (~((uint64_t) ((uint64_t) (rimm))))));
					auto __macro_add_with_carry_set_nzcv_common_carryIn = (uint64_t) ((uint64_t) (0x1));
					auto bits = (int32_t) (64);
					auto bits1 = (int64_t) (((int64_t) (int32_t) (bits)) - ((int64_t) (int64_t) (0x1)));
					auto usum = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_operand2))))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (__macro_add_with_carry_set_nzcv_common_carryIn)))).Store();
					auto ssum = ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) ((LightRuntimeValue<int64_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<int64_t>) (LightRuntimeValue<int64_t>) ((int64_t) ((int64_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))).Store();
					NZCV_NR = (LightRuntimeValue<uint64_t>) ((usum) >> (bits1));
					NZCV_ZR = (LightRuntimeValue<bool>) ((usum) == (0x0));
					NZCV_CR = (LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) (__macro_add_with_carry_set_nzcv_common_operand1)))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_operand2))))))) + ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((__uint128_t) ((__uint128_t) (__macro_add_with_carry_set_nzcv_common_carryIn)))))) >> (bits)))))) & ((LightRuntimeValue<uint64_t>) (0x1))));
					NZCV_VR = (LightRuntimeValue<bool>) ((((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))) == ((uint64_t) ((__macro_add_with_carry_set_nzcv_common_operand2) >> (uint) (bits1)))))) & ((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) (((LightRuntimeValue<uint64_t>) ((usum) >> (bits1))) != ((LightRuntimeValue<uint64_t>) ((__macro_add_with_carry_set_nzcv_common_operand1) >> (bits1))))))));
					return (usum).Store();
				})());
		}
		return true;
	}
unimplemented:
	return false;
}

/* SVC */
bool LightRecompiler::SVC(uint inst, ulong pc) {
	{
		auto imm = (inst >> 5) & 0xFFFFU;
		CallSvc(imm);
		return true;
	}
unimplemented:
	return false;
}

/* SYS */
bool LightRecompiler::SYS(uint inst, ulong pc) {
	{
		auto op1 = (inst >> 16) & 0x7U;
		auto cn = (inst >> 12) & 0xFU;
		auto cm = (inst >> 8) & 0xFU;
		auto op2 = (inst >> 5) & 0x7U;
		auto rt = (inst >> 0) & 0x1FU;
		return true;
	}
unimplemented:
	return false;
}

/* TBZ */
bool LightRecompiler::TBZ(uint inst, ulong pc) {
	{
		auto upper = (inst >> 31) & 0x1U;
		auto bottom = (inst >> 19) & 0x1FU;
		auto offset = (inst >> 5) & 0x3FFFU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((upper) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (uint32_t) ((((uint32_t) ((uint32_t) (((uint32_t) ((uint32_t) (upper))) << (uint) (0x5)))) | ((uint32_t) ((uint32_t) ((uint32_t) (bottom))))));
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (pc))) + ((uint64_t) (int64_t) ((int64_t) (SignExt<int64_t>((uint16_t) (((uint16_t) ((uint16_t) (offset))) << (uint) (0x2)), 16)))));
		LightLabel temp_1084 = DefineLabel(), temp_1086 = DefineLabel(), temp_1085 = DefineLabel();
		BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]())) >> (imm)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1084, temp_1086);
		Label(temp_1084);
		Branch(pc + 4);
		Branch(temp_1085);
		Label(temp_1086);
		Branch(addr);
		Branch(temp_1085);
		Label(temp_1085);
		return true;
	}
unimplemented:
	return false;
}

/* TBNZ */
bool LightRecompiler::TBNZ(uint inst, ulong pc) {
	{
		auto upper = (inst >> 31) & 0x1U;
		auto bottom = (inst >> 19) & 0x1FU;
		auto offset = (inst >> 5) & 0x3FFFU;
		auto rt = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((upper) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		auto imm = (uint32_t) ((((uint32_t) ((uint32_t) (((uint32_t) ((uint32_t) (upper))) << (uint) (0x5)))) | ((uint32_t) ((uint32_t) ((uint32_t) (bottom))))));
		auto addr = (uint64_t) (((uint64_t) (uint64_t) ((uint64_t) (pc))) + ((uint64_t) (int64_t) ((int64_t) (SignExt<int64_t>((uint16_t) (((uint16_t) ((uint16_t) (offset))) << (uint) (0x2)), 16)))));
		LightLabel temp_1087 = DefineLabel(), temp_1089 = DefineLabel(), temp_1088 = DefineLabel();
		BranchIf((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((rt) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rt]())) >> (imm)))) & ((LightRuntimeValue<uint64_t>) (0x1)))), temp_1087, temp_1089);
		Label(temp_1087);
		Branch(addr);
		Branch(temp_1088);
		Label(temp_1089);
		Branch(pc + 4);
		Branch(temp_1088);
		Label(temp_1088);
		return true;
	}
unimplemented:
	return false;
}

/* UADDLV */
bool LightRecompiler::UADDLV(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (([=](auto temp_1090) -> string { switch(temp_1090) { case 0x0: return string("H"); case 0x1: return string("S"); case 0x2: return string("D"); default: throw "Not implemented"; } })(size));
		auto t = (string) (([=](auto temp_1091) -> string { switch(temp_1091) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x5: return string("4S"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto esize = (int64_t) ((0x8) << (uint) (size));
		auto count = (int64_t) (((int64_t) (int64_t) ((int64_t) ((Q != 0) ? (0x80) : (0x40)))) / ((int64_t) (int64_t) (esize)));
		switch(size) {
			case 0x0: {
				VHR[(int) (rd)] = (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint32_t>) (Call<ulong, Vector128<float>, long, long>(VectorSumUnsigned, (LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]), esize, count))));
				break;
			}
			case 0x1: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) (((LightRuntimeValue<uint32_t>) (Call<ulong, Vector128<float>, long, long>(VectorSumUnsigned, (LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]), esize, count))).Bitcast<float>());
				break;
			}
			case 0x2: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) (Call<ulong, Vector128<float>, long, long>(VectorSumUnsigned, (LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)]), esize, count))))).Bitcast<double>());
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* UADDW[2] */
bool LightRecompiler::UADDW_2_(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto o2 = (string) ((Q != 0) ? (string("2")) : (string("")));
		auto Ta = string("");
		auto Tb = string("");
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				Ta = string("8H");
				Tb = string("8B");
				break;
			}
			case 0x1: {
				Ta = string("8H");
				Tb = string("16B");
				break;
			}
			case 0x2: {
				Ta = string("4S");
				Tb = string("4H");
				break;
			}
			case 0x3: {
				Ta = string("4S");
				Tb = string("8H");
				break;
			}
			case 0x4: {
				Ta = string("2D");
				Tb = string("2S");
				break;
			}
			case 0x5: {
				Ta = string("2D");
				Tb = string("4S");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		auto a = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto b = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Store();
		switch(size) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x0)))) + ((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>((int64_t) ((Q != 0) ? ((int64_t) (0x8)) : (0x0))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x1)))) + ((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>((int64_t) ((Q != 0) ? ((int64_t) (0x9)) : (0x1))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x2)))) + ((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>((int64_t) ((Q != 0) ? ((int64_t) (0xA)) : (0x2))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x3)))) + ((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>((int64_t) ((Q != 0) ? ((int64_t) (0xB)) : (0x3))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x4)))) + ((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>((int64_t) ((Q != 0) ? ((int64_t) (0xC)) : (0x4))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x5)))) + ((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>((int64_t) ((Q != 0) ? ((int64_t) (0xD)) : (0x5))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x6)))) + ((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>((int64_t) ((Q != 0) ? ((int64_t) (0xE)) : (0x6))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((a).Element<uint16_t>(0x7)))) + ((LightRuntimeValue<uint16_t>) (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((b).Element<uint8_t>((int64_t) ((Q != 0) ? ((int64_t) (0xF)) : (0x7))))))))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x0)))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>((int64_t) ((Q != 0) ? ((int64_t) (0x4)) : (0x0))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x1)))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>((int64_t) ((Q != 0) ? ((int64_t) (0x5)) : (0x1))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x2)))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>((int64_t) ((Q != 0) ? ((int64_t) (0x6)) : (0x2))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((a).Element<uint32_t>(0x3)))) + ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((b).Element<uint16_t>((int64_t) ((Q != 0) ? ((int64_t) (0x7)) : (0x3))))))))));
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((a).Element<uint64_t>(0x0)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((b).Element<uint32_t>((int64_t) ((Q != 0) ? ((int64_t) (0x2)) : (0x0))))))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((a).Element<uint64_t>(0x1)))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((b).Element<uint32_t>((int64_t) ((Q != 0) ? ((int64_t) (0x3)) : (0x1))))))))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* UBFM */
bool LightRecompiler::UBFM(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto N = (inst >> 22) & 0x1U;
		auto immr = (inst >> 16) & 0x3FU;
		auto imms = (inst >> 10) & 0x3FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto src = ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))).Store();
			auto wmask = (uint32_t) ((uint32_t) ((uint64_t) (MakeWMask(N, imms, immr, 0x20, 0x0))));
			auto tmask = (uint32_t) ((uint32_t) ((uint64_t) (MakeTMask(N, imms, immr, 0x20, 0x0))));
			auto bot = ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (((src) << ((LightRuntimeValue<uint>) (32 - (immr)))) | ((src) >> ((LightRuntimeValue<uint>) (immr)))))) & ((LightRuntimeValue<uint32_t>) (wmask))))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((((LightRuntimeValue<uint32_t>) (bot)) & ((LightRuntimeValue<uint32_t>) (tmask)))));
		} else {
			auto src = ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())).Store();
			auto wmask = (uint64_t) (MakeWMask(N, imms, immr, 0x40, 0x0));
			auto tmask = (uint64_t) (MakeTMask(N, imms, immr, 0x40, 0x0));
			auto bot = ((LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((src) << ((LightRuntimeValue<uint>) (64 - (immr)))) | ((src) >> ((LightRuntimeValue<uint>) (immr)))))) & ((LightRuntimeValue<uint64_t>) (wmask))))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((((LightRuntimeValue<uint64_t>) (bot)) & ((LightRuntimeValue<uint64_t>) (tmask))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* UCVTF-scalar-gpr-integer */
bool LightRecompiler::UCVTF_scalar_gpr_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto type = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto st = (uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (type)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 2))));
		auto r1 = string("");
		auto r2 = string("");
		switch(st) {
			case 0x3: {
				r1 = string("H");
				r2 = string("W");
				break;
			}
			case 0x0: {
				r1 = string("S");
				r2 = string("W");
				break;
			}
			case 0x1: {
				r1 = string("D");
				r2 = string("W");
				break;
			}
			case 0x7: {
				r1 = string("H");
				r2 = string("X");
				break;
			}
			case 0x4: {
				r1 = string("S");
				r2 = string("X");
				break;
			}
			case 0x5: {
				r1 = string("D");
				r2 = string("X");
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		switch(st) {
			case 0x0: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))));
				break;
			}
			case 0x1: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]()))));
				break;
			}
			case 0x4: {
				VSR[(int) (rd)] = (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())));
				break;
			}
			case 0x5: {
				VDR[(int) (rd)] = (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]())));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* UCVTF-scalar-integer */
bool LightRecompiler::UCVTF_scalar_integer(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("S")) : (string("D")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			VSR[(int) (rd)] = (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<float>) (VSR[(int) (rn)])).Bitcast<uint32_t>())));
		} else {
			VDR[(int) (rd)] = (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<double>) (VDR[(int) (rn)])).Bitcast<uint64_t>())));
		}
		return true;
	}
unimplemented:
	return false;
}

/* UCVTF-vector */
bool LightRecompiler::UCVTF_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_1092) -> string { switch(temp_1092) { case 0x0: return string("2S"); case 0x1: return string("4S"); case 0x3: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto n = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x1)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<float>) ((LightRuntimeValue<float>) ((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x3)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<uint64_t>) ((n).Element<uint64_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<double>) ((LightRuntimeValue<double>) ((LightRuntimeValue<uint64_t>) ((n).Element<uint64_t>(0x1)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* UDIV */
bool LightRecompiler::UDIV(uint inst, ulong pc) {
	{
		auto size = (inst >> 31) & 0x1U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto r = (string) (((bool) (((size) == (0x0)) ? 1U : 0U) != 0) ? (string("W")) : (string("X")));
		if(((bool) (((size) == (0x0)) ? 1U : 0U)) != 0) {
			auto operand2 = ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (Ternary<bool, uint32_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((operand2) == (0x0))), (uint32_t) ((uint32_t) (0x0)), (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))) / ((LightRuntimeValue<uint32_t>) (LightRuntimeValue<uint32_t>) (operand2))))));
		} else {
			auto operand2 = ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]())).Store();
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (Ternary<bool, uint64_t>((LightRuntimeValue<bool>) ((LightRuntimeValue<bool>) ((operand2) == (0x0))), (uint64_t) ((uint64_t) (0x0)), (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))) / ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) (operand2)))));
		}
		return true;
	}
unimplemented:
	return false;
}

/* UMADDL */
bool LightRecompiler::UMADDL(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto ra = (inst >> 10) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		XR[(int) rd] = (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((ra) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) ra]()))) + ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rn) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rn]())))))) * ((LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((rm) == 31 ? (LightRuntimeValue<uint>) 0U : (LightRuntimeValue<uint>) (XR[(int) rm]()))))))))));
		return true;
	}
unimplemented:
	return false;
}

/* UMOV */
bool LightRecompiler::UMOV(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto imm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto T = string("");
		auto index = 0x0;
		auto r = (string) ((Q != 0) ? (string("X")) : (string("W")));
		auto size = (int64_t) ((Q != 0) ? (0x40) : ((int64_t) (((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x1))))) == (0x1)) ? 1U : 0U) != 0) ? (0x8) : ((int64_t) (((bool) ((((uint8_t) ((((uint64_t) (imm)) & ((uint64_t) (0x3))))) == (0x2)) ? 1U : 0U) != 0) ? (0x10) : (0x20))))));
		switch(size) {
			case 0x8: {
				T = string("B");
				index = (uint8_t) ((imm) >> (uint) (0x1));
				break;
			}
			case 0x10: {
				T = string("H");
				index = (uint8_t) ((imm) >> (uint) (0x2));
				break;
			}
			case 0x20: {
				T = string("S");
				index = (uint8_t) ((imm) >> (uint) (0x3));
				break;
			}
			default: {
				T = string("D");
				index = (uint8_t) ((imm) >> (uint) (0x4));
				break;
			}
		}
		auto v = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		if((Q) != 0) {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((v).Element<uint64_t>(index));
		} else {
			XR[(int) rd] = (LightRuntimeValue<uint64_t>) (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (([=](auto temp_1093) -> LightRuntimeValue<uint32_t> { switch(temp_1093) { case 0x8: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(index))))); case 0x10: return (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint8_t>) ((v).Element<uint8_t>(index))))); default: return (LightRuntimeValue<uint32_t>) ((v).Element<uint32_t>(index)); } })(size)));
		}
		return true;
	}
unimplemented:
	return false;
}

/* UMULH */
bool LightRecompiler::UMULH(uint inst, ulong pc) {
	{
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		XR[(int) rd] = (LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) ((rn) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rn]()))))) * ((LightRuntimeValue<__uint128_t>) (LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<__uint128_t>) ((LightRuntimeValue<uint64_t>) ((rm) == 31 ? (LightRuntimeValue<ulong>) 0UL : XR[(int) rm]()))))))) >> (0x40))));
		return true;
	}
unimplemented:
	return false;
}

/* USHL-vector */
bool LightRecompiler::USHL_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto t = (string) (([=](auto temp_1094) -> string { switch(temp_1094) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto n = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto m = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x0))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x1))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x2))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x3))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x4))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x5))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x6))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x7))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x7)))));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x0))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x1))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x2))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x3))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x4))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x5))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x6))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x7))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x7)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x8))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x8)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x9))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0x9)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xA))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0xA)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xB))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0xB)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xC))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0xC)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xD))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0xD)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xE))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0xE)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (LightRuntimeValue<uint8_t>) (((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xF))) << ((LightRuntimeValue<uint8_t>) ((m).Element<uint8_t>(0xF)))));
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x0))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x1))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x2))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x3))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x3)))));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x0))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x1))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x2))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x3))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x3)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x4))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x4)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x5))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x5)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x6))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x6)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x7))) << ((LightRuntimeValue<uint16_t>) ((m).Element<uint16_t>(0x7)))));
				break;
			}
			case 0x4: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x0))) << ((LightRuntimeValue<uint32_t>) ((m).Element<uint32_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x1))) << ((LightRuntimeValue<uint32_t>) ((m).Element<uint32_t>(0x1)))));
				break;
			}
			case 0x5: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x0))) << ((LightRuntimeValue<uint32_t>) ((m).Element<uint32_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x1))) << ((LightRuntimeValue<uint32_t>) ((m).Element<uint32_t>(0x1)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x2))) << ((LightRuntimeValue<uint32_t>) ((m).Element<uint32_t>(0x2)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x3))) << ((LightRuntimeValue<uint32_t>) ((m).Element<uint32_t>(0x3)))));
				break;
			}
			case 0x7: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((n).Element<uint64_t>(0x0))) << ((LightRuntimeValue<uint64_t>) ((m).Element<uint64_t>(0x0)))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((n).Element<uint64_t>(0x1))) << ((LightRuntimeValue<uint64_t>) ((m).Element<uint64_t>(0x1)))));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* USHLL-vector */
bool LightRecompiler::USHLL_vector(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto immh = (inst >> 19) & 0xFU;
		auto immb = (inst >> 16) & 0x7U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto Ta = string("");
		auto Tb = string("");
		auto size = 0x0;
		auto shift = 0x0;
		if(!((bool) (((immh) != (0x0)) ? 1U : 0U)))
			goto unimplemented;
		auto i2 = (string) ((Q != 0) ? (string("2")) : (string("")));
		if(((bool) (((immh) == (0x1)) ? 1U : 0U)) != 0) {
			Ta = string("8H");
			Tb = (string) ((Q != 0) ? (string("16B")) : (string("8B")));
			size = 0x0;
			shift = (uint64_t) (((uint64_t) (uint32_t) ((uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (immb)) << 0)) | ((uint8_t) (((uint8_t) (immh)) << 3)))))))) - ((uint64_t) (int64_t) (0x8)));
		} else {
			if(((bool) ((((uint8_t) ((((uint64_t) (immh)) & ((uint64_t) (0xE))))) == (0x2)) ? 1U : 0U)) != 0) {
				Ta = string("4S");
				Tb = (string) ((Q != 0) ? (string("8H")) : (string("4H")));
				size = 0x1;
				shift = (uint64_t) (((uint64_t) (uint32_t) ((uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (immb)) << 0)) | ((uint8_t) (((uint8_t) (immh)) << 3)))))))) - ((uint64_t) (int64_t) (0x10)));
			} else {
				if(((bool) ((((uint8_t) ((((uint64_t) (immh)) & ((uint64_t) (0xC))))) == (0x4)) ? 1U : 0U)) != 0) {
					Ta = string("2D");
					Tb = (string) ((Q != 0) ? (string("4S")) : (string("2S")));
					size = 0x2;
					shift = (uint64_t) (((uint64_t) (uint32_t) ((uint32_t) ((uint32_t) ((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (immb)) << 0)) | ((uint8_t) (((uint8_t) (immh)) << 3)))))))) - ((uint64_t) (int64_t) (0x20)));
				} else {
					throw "Not implemented";
				}
			}
		}
		auto n = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		switch((__uint128_t) ((__uint128_t) (((__uint128_t) (((__uint128_t) (Q)) << 0)) | ((__uint128_t) (((__uint128_t) (size)) << 1))))) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x0))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x1))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x2))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x3))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x4))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x5))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x6))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x7))))) << (shift)));
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x8))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0x9))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xA))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xB))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xC))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xD))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xE))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint16_t>) (((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint8_t>) ((n).Element<uint8_t>(0xF))))) << (shift)));
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x0))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x1))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x2))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x3))))) << (shift)));
				break;
			}
			case 0x3: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x4))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x5))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x6))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint32_t>) (((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint16_t>) ((n).Element<uint16_t>(0x7))))) << (shift)));
				break;
			}
			case 0x4: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x0))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x1))))) << (shift)));
				break;
			}
			case 0x5: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x2))))) << (shift)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint64_t>) (((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint64_t>) ((LightRuntimeValue<uint32_t>) ((n).Element<uint32_t>(0x3))))) << (shift)));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* XTN */
bool LightRecompiler::XTN(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto tb = (string) (([=](auto temp_1095) -> string { switch(temp_1095) { case 0x0: return string("8B"); case 0x1: return string("4H"); case 0x2: return string("2S"); default: throw "Not implemented"; } })(size));
		auto ta = (string) (([=](auto temp_1096) -> string { switch(temp_1096) { case 0x0: return string("8H"); case 0x1: return string("4S"); case 0x2: return string("2D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x0: {
				auto a = ((LightRuntimeValue<uint16_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint16_t>(0x0))).Store();
				auto b = ((LightRuntimeValue<uint16_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint16_t>(0x1))).Store();
				auto c = ((LightRuntimeValue<uint16_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint16_t>(0x2))).Store();
				auto d = ((LightRuntimeValue<uint16_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint16_t>(0x3))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (a)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (b)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (c)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (d)));
				break;
			}
			case 0x1: {
				auto a = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint32_t>(0x0))).Store();
				auto b = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint32_t>(0x1))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (a)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (b)));
				break;
			}
			case 0x2: {
				auto a = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(0x0))).Store();
				VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint64_t>) ((uint64_t) ((uint64_t) (0x0)))).CreateVector());
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (a)));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* XTN2 */
bool LightRecompiler::XTN2(uint inst, ulong pc) {
	{
		auto size = (inst >> 22) & 0x3U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto tb = (string) (([=](auto temp_1097) -> string { switch(temp_1097) { case 0x0: return string("16B"); case 0x1: return string("8H"); case 0x2: return string("4S"); default: throw "Not implemented"; } })(size));
		auto ta = (string) (([=](auto temp_1098) -> string { switch(temp_1098) { case 0x0: return string("8H"); case 0x1: return string("4S"); case 0x2: return string("2D"); default: throw "Not implemented"; } })(size));
		switch(size) {
			case 0x0: {
				auto a = ((LightRuntimeValue<uint16_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint16_t>(0x0))).Store();
				auto b = ((LightRuntimeValue<uint16_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint16_t>(0x1))).Store();
				auto c = ((LightRuntimeValue<uint16_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint16_t>(0x2))).Store();
				auto d = ((LightRuntimeValue<uint16_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint16_t>(0x3))).Store();
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (a)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (b)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (c)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (LightRuntimeValue<uint8_t>) ((LightRuntimeValue<uint8_t>) (d)));
				break;
			}
			case 0x1: {
				auto a = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint32_t>(0x0))).Store();
				auto b = ((LightRuntimeValue<uint32_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint32_t>(0x1))).Store();
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (a)));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint16_t>) ((LightRuntimeValue<uint16_t>) (b)));
				break;
			}
			case 0x2: {
				auto a = ((LightRuntimeValue<uint64_t>) (((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Element<uint64_t>(0x0))).Store();
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint32_t>) ((LightRuntimeValue<uint32_t>) (a)));
				break;
			}
			default: {
				throw "Not implemented";
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

/* YIELD */
bool LightRecompiler::YIELD(uint inst, ulong pc) {
	{
		return true;
	}
unimplemented:
	return false;
}

/* ZIP */
bool LightRecompiler::ZIP(uint inst, ulong pc) {
	{
		auto Q = (inst >> 30) & 0x1U;
		auto size = (inst >> 22) & 0x3U;
		auto rm = (inst >> 16) & 0x1FU;
		auto op = (inst >> 14) & 0x1U;
		auto rn = (inst >> 5) & 0x1FU;
		auto rd = (inst >> 0) & 0x1FU;
		auto i = (uint8_t) ((uint8_t) ((uint64_t) (((uint64_t) (bool) (op)) + ((uint64_t) (int64_t) (0x1)))));
		auto T = (string) (([=](auto temp_1099) -> string { switch(temp_1099) { case 0x0: return string("8B"); case 0x1: return string("16B"); case 0x2: return string("4H"); case 0x3: return string("8H"); case 0x4: return string("2S"); case 0x5: return string("4S"); case 0x7: return string("2D"); default: throw "Not implemented"; } })((uint8_t) ((uint8_t) (((uint8_t) (((uint8_t) (Q)) << 0)) | ((uint8_t) (((uint8_t) (size)) << 1))))));
		auto av = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rn)])).Store();
		auto bv = ((LightRuntimeValue<Vector128<float>>) (VR[(int) (rm)])).Store();
		VR[(int) (rd)] = (LightRuntimeValue<Vector128<float>>) (((LightRuntimeValue<uint8_t>) ((uint8_t) ((uint8_t) (0x0)))).CreateVector());
		auto base = (uint64_t) (((uint64_t) (uint32_t) ((uint32_t) ((uint32_t) (op)))) * ((uint64_t) (int64_t) ((int64_t) (((int64_t) (int64_t) ((int64_t) (((int64_t) (int64_t) ((int64_t) ((Q != 0) ? (0x80) : (0x40)))) / ((int64_t) (int64_t) ((int64_t) ((0x8) << (uint) (size))))))) / ((int64_t) (int64_t) (0x2))))));
		switch(size) {
			case 0x0: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint8_t>) ((av).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint8_t>) ((av).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x1))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint8_t>) ((av).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x2))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint8_t>) ((av).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x3))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint8_t>) ((bv).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint8_t>) ((bv).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x1))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint8_t>) ((bv).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x2))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint8_t>) ((bv).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x3))))));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x8, (LightRuntimeValue<uint8_t>) ((av).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x4))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xA, (LightRuntimeValue<uint8_t>) ((av).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x5))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xC, (LightRuntimeValue<uint8_t>) ((av).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x6))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xE, (LightRuntimeValue<uint8_t>) ((av).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x7))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x9, (LightRuntimeValue<uint8_t>) ((bv).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x4))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xB, (LightRuntimeValue<uint8_t>) ((bv).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x5))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xD, (LightRuntimeValue<uint8_t>) ((bv).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x6))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0xF, (LightRuntimeValue<uint8_t>) ((bv).Element<uint8_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x7))))));
				}
				break;
			}
			case 0x1: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint16_t>) ((av).Element<uint16_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint16_t>) ((av).Element<uint16_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x1))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint16_t>) ((bv).Element<uint16_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint16_t>) ((bv).Element<uint16_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x1))))));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x4, (LightRuntimeValue<uint16_t>) ((av).Element<uint16_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x2))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x6, (LightRuntimeValue<uint16_t>) ((av).Element<uint16_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x3))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x5, (LightRuntimeValue<uint16_t>) ((bv).Element<uint16_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x4))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x7, (LightRuntimeValue<uint16_t>) ((bv).Element<uint16_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x5))))));
				}
				break;
			}
			case 0x2: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint32_t>) ((av).Element<uint32_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint32_t>) ((bv).Element<uint32_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x0))))));
				if((Q) != 0) {
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x2, (LightRuntimeValue<uint32_t>) ((av).Element<uint32_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x1))))));
					VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x3, (LightRuntimeValue<uint32_t>) ((bv).Element<uint32_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x1))))));
				}
				break;
			}
			default: {
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x0, (LightRuntimeValue<uint64_t>) ((av).Element<uint64_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x0))))));
				VR[(int) (rd)] = VR[(int) (rd)]().Insert(0x1, (LightRuntimeValue<uint64_t>) ((bv).Element<uint64_t>((uint64_t) (((uint64_t) (uint64_t) (base)) + ((uint64_t) (int64_t) (0x0))))));
				break;
			}
		}
		return true;
	}
unimplemented:
	return false;
}

